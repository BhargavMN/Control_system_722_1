
Control_system_722_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a884  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800aa68  0800aa68  0001aa68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aee4  0800aee4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800aee4  0800aee4  0001aee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aeec  0800aeec  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aeec  0800aeec  0001aeec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aef0  0800aef0  0001aef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800aef4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  200001f0  0800b0e4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000930  0800b0e4  00020930  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d7cf  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a69  00000000  00000000  0003d9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  00041458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  00042a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002577b  00000000  00000000  00043e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c05e  00000000  00000000  000695db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1175  00000000  00000000  00085639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001667ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cd8  00000000  00000000  00166804  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aa4c 	.word	0x0800aa4c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	0800aa4c 	.word	0x0800aa4c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96e 	b.w	8000eec <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468c      	mov	ip, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f040 8083 	bne.w	8000d3e <__udivmoddi4+0x116>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4617      	mov	r7, r2
 8000c3c:	d947      	bls.n	8000cce <__udivmoddi4+0xa6>
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	b142      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	f1c2 0020 	rsb	r0, r2, #32
 8000c48:	fa24 f000 	lsr.w	r0, r4, r0
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	4097      	lsls	r7, r2
 8000c50:	ea40 0c01 	orr.w	ip, r0, r1
 8000c54:	4094      	lsls	r4, r2
 8000c56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c5a:	0c23      	lsrs	r3, r4, #16
 8000c5c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c60:	fa1f fe87 	uxth.w	lr, r7
 8000c64:	fb08 c116 	mls	r1, r8, r6, ip
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x60>
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7a:	f080 8119 	bcs.w	8000eb0 <__udivmoddi4+0x288>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 8116 	bls.w	8000eb0 <__udivmoddi4+0x288>
 8000c84:	3e02      	subs	r6, #2
 8000c86:	443b      	add	r3, r7
 8000c88:	1a5b      	subs	r3, r3, r1
 8000c8a:	b2a4      	uxth	r4, r4
 8000c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c90:	fb08 3310 	mls	r3, r8, r0, r3
 8000c94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	45a6      	cmp	lr, r4
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x8c>
 8000ca0:	193c      	adds	r4, r7, r4
 8000ca2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca6:	f080 8105 	bcs.w	8000eb4 <__udivmoddi4+0x28c>
 8000caa:	45a6      	cmp	lr, r4
 8000cac:	f240 8102 	bls.w	8000eb4 <__udivmoddi4+0x28c>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	443c      	add	r4, r7
 8000cb4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb8:	eba4 040e 	sub.w	r4, r4, lr
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	b11d      	cbz	r5, 8000cc8 <__udivmoddi4+0xa0>
 8000cc0:	40d4      	lsrs	r4, r2
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc8:	4631      	mov	r1, r6
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xaa>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f282 	clz	r2, r2
 8000cd6:	2a00      	cmp	r2, #0
 8000cd8:	d150      	bne.n	8000d7c <__udivmoddi4+0x154>
 8000cda:	1bcb      	subs	r3, r1, r7
 8000cdc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce0:	fa1f f887 	uxth.w	r8, r7
 8000ce4:	2601      	movs	r6, #1
 8000ce6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cea:	0c21      	lsrs	r1, r4, #16
 8000cec:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cf8:	428b      	cmp	r3, r1
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0xe4>
 8000cfc:	1879      	adds	r1, r7, r1
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0xe2>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	f200 80e9 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1ac9      	subs	r1, r1, r3
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d18:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x10c>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x10a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80d9 	bhi.w	8000ee4 <__udivmoddi4+0x2bc>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e7bf      	b.n	8000cbe <__udivmoddi4+0x96>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d909      	bls.n	8000d56 <__udivmoddi4+0x12e>
 8000d42:	2d00      	cmp	r5, #0
 8000d44:	f000 80b1 	beq.w	8000eaa <__udivmoddi4+0x282>
 8000d48:	2600      	movs	r6, #0
 8000d4a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d4e:	4630      	mov	r0, r6
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	fab3 f683 	clz	r6, r3
 8000d5a:	2e00      	cmp	r6, #0
 8000d5c:	d14a      	bne.n	8000df4 <__udivmoddi4+0x1cc>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0x140>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80b8 	bhi.w	8000ed8 <__udivmoddi4+0x2b0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	468c      	mov	ip, r1
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	d0a8      	beq.n	8000cc8 <__udivmoddi4+0xa0>
 8000d76:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000d7c:	f1c2 0320 	rsb	r3, r2, #32
 8000d80:	fa20 f603 	lsr.w	r6, r0, r3
 8000d84:	4097      	lsls	r7, r2
 8000d86:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8e:	40d9      	lsrs	r1, r3
 8000d90:	4330      	orrs	r0, r6
 8000d92:	0c03      	lsrs	r3, r0, #16
 8000d94:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d98:	fa1f f887 	uxth.w	r8, r7
 8000d9c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000da0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da4:	fb06 f108 	mul.w	r1, r6, r8
 8000da8:	4299      	cmp	r1, r3
 8000daa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x19c>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000db6:	f080 808d 	bcs.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 808a 	bls.w	8000ed4 <__udivmoddi4+0x2ac>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b281      	uxth	r1, r0
 8000dc8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dcc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd4:	fb00 f308 	mul.w	r3, r0, r8
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x1c4>
 8000ddc:	1879      	adds	r1, r7, r1
 8000dde:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de2:	d273      	bcs.n	8000ecc <__udivmoddi4+0x2a4>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d971      	bls.n	8000ecc <__udivmoddi4+0x2a4>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4439      	add	r1, r7
 8000dec:	1acb      	subs	r3, r1, r3
 8000dee:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000df2:	e778      	b.n	8000ce6 <__udivmoddi4+0xbe>
 8000df4:	f1c6 0c20 	rsb	ip, r6, #32
 8000df8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dfc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e00:	431c      	orrs	r4, r3
 8000e02:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e06:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e0e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e12:	431f      	orrs	r7, r3
 8000e14:	0c3b      	lsrs	r3, r7, #16
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fa1f f884 	uxth.w	r8, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e26:	fb09 fa08 	mul.w	sl, r9, r8
 8000e2a:	458a      	cmp	sl, r1
 8000e2c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e30:	fa00 f306 	lsl.w	r3, r0, r6
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x220>
 8000e36:	1861      	adds	r1, r4, r1
 8000e38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e3c:	d248      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	d946      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000e42:	f1a9 0902 	sub.w	r9, r9, #2
 8000e46:	4421      	add	r1, r4
 8000e48:	eba1 010a 	sub.w	r1, r1, sl
 8000e4c:	b2bf      	uxth	r7, r7
 8000e4e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e52:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e56:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e5a:	fb00 f808 	mul.w	r8, r0, r8
 8000e5e:	45b8      	cmp	r8, r7
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x24a>
 8000e62:	19e7      	adds	r7, r4, r7
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d22e      	bcs.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6a:	45b8      	cmp	r8, r7
 8000e6c:	d92c      	bls.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	4427      	add	r7, r4
 8000e72:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e76:	eba7 0708 	sub.w	r7, r7, r8
 8000e7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e7e:	454f      	cmp	r7, r9
 8000e80:	46c6      	mov	lr, r8
 8000e82:	4649      	mov	r1, r9
 8000e84:	d31a      	bcc.n	8000ebc <__udivmoddi4+0x294>
 8000e86:	d017      	beq.n	8000eb8 <__udivmoddi4+0x290>
 8000e88:	b15d      	cbz	r5, 8000ea2 <__udivmoddi4+0x27a>
 8000e8a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e8e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e92:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e96:	40f2      	lsrs	r2, r6
 8000e98:	ea4c 0202 	orr.w	r2, ip, r2
 8000e9c:	40f7      	lsrs	r7, r6
 8000e9e:	e9c5 2700 	strd	r2, r7, [r5]
 8000ea2:	2600      	movs	r6, #0
 8000ea4:	4631      	mov	r1, r6
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e70b      	b.n	8000cc8 <__udivmoddi4+0xa0>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0x60>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6fd      	b.n	8000cb4 <__udivmoddi4+0x8c>
 8000eb8:	4543      	cmp	r3, r8
 8000eba:	d2e5      	bcs.n	8000e88 <__udivmoddi4+0x260>
 8000ebc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ec0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7df      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e7d2      	b.n	8000e72 <__udivmoddi4+0x24a>
 8000ecc:	4660      	mov	r0, ip
 8000ece:	e78d      	b.n	8000dec <__udivmoddi4+0x1c4>
 8000ed0:	4681      	mov	r9, r0
 8000ed2:	e7b9      	b.n	8000e48 <__udivmoddi4+0x220>
 8000ed4:	4666      	mov	r6, ip
 8000ed6:	e775      	b.n	8000dc4 <__udivmoddi4+0x19c>
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e74a      	b.n	8000d72 <__udivmoddi4+0x14a>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	4439      	add	r1, r7
 8000ee2:	e713      	b.n	8000d0c <__udivmoddi4+0xe4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	443c      	add	r4, r7
 8000ee8:	e724      	b.n	8000d34 <__udivmoddi4+0x10c>
 8000eea:	bf00      	nop

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <lcd_init>:
#include "i2c.h"



void lcd_init(struct lcd_disp * lcd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]
	/* set backlight */
	if(lcd->bl)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <lcd_init+0x1a>
	{
		xpin = BL_PIN;
 8000f06:	2308      	movs	r3, #8
 8000f08:	73fb      	strb	r3, [r7, #15]
	}

	/* init sequence */
	HAL_Delay(40);
 8000f0a:	2028      	movs	r0, #40	; 0x28
 8000f0c:	f001 fbde 	bl	80026cc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	7bfa      	ldrb	r2, [r7, #15]
 8000f16:	2130      	movs	r1, #48	; 0x30
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f829 	bl	8000f70 <lcd_write>
	HAL_Delay(5);
 8000f1e:	2005      	movs	r0, #5
 8000f20:	f001 fbd4 	bl	80026cc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	7bfa      	ldrb	r2, [r7, #15]
 8000f2a:	2130      	movs	r1, #48	; 0x30
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f000 f81f 	bl	8000f70 <lcd_write>
	HAL_Delay(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f001 fbca 	bl	80026cc <HAL_Delay>
	lcd_write(lcd->addr, INIT_8_BIT_MODE, xpin);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	7bfa      	ldrb	r2, [r7, #15]
 8000f3e:	2130      	movs	r1, #48	; 0x30
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f815 	bl	8000f70 <lcd_write>

	/* set 4-bit mode */
	lcd_write(lcd->addr, INIT_4_BIT_MODE, xpin);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f80e 	bl	8000f70 <lcd_write>

	/* set cursor mode */
	lcd_write(lcd->addr, UNDERLINE_OFF_BLINK_OFF, xpin);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	7bfa      	ldrb	r2, [r7, #15]
 8000f5a:	210c      	movs	r1, #12
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 f807 	bl	8000f70 <lcd_write>

	/* clear */
	lcd_clear(lcd);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 f89f 	bl	80010a6 <lcd_clear>

}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <lcd_write>:

void lcd_write(uint8_t addr, uint8_t data, uint8_t xpin)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	71bb      	strb	r3, [r7, #6]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	717b      	strb	r3, [r7, #5]
	uint8_t tx_data[4];

	/* split data */
	tx_data[0] = (data & 0xF0) | EN_PIN | xpin;
 8000f82:	79bb      	ldrb	r3, [r7, #6]
 8000f84:	f023 030f 	bic.w	r3, r3, #15
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	797b      	ldrb	r3, [r7, #5]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	733b      	strb	r3, [r7, #12]
	tx_data[1] = (data & 0xF0) | xpin;
 8000f98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f9c:	f023 030f 	bic.w	r3, r3, #15
 8000fa0:	b25a      	sxtb	r2, r3
 8000fa2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	737b      	strb	r3, [r7, #13]
	tx_data[2] = (data << 4) | EN_PIN | xpin;
 8000fae:	79bb      	ldrb	r3, [r7, #6]
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	797b      	ldrb	r3, [r7, #5]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	73bb      	strb	r3, [r7, #14]
	tx_data[3] = (data << 4) | xpin;
 8000fc2:	79bb      	ldrb	r3, [r7, #6]
 8000fc4:	011b      	lsls	r3, r3, #4
 8000fc6:	b25a      	sxtb	r2, r3
 8000fc8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	73fb      	strb	r3, [r7, #15]

	/* send data via i2c */
	HAL_I2C_Master_Transmit(&HI2C_DEF, addr, tx_data, 4, 100);
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	b299      	uxth	r1, r3
 8000fd8:	f107 020c 	add.w	r2, r7, #12
 8000fdc:	2364      	movs	r3, #100	; 0x64
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	2304      	movs	r3, #4
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <lcd_write+0x88>)
 8000fe4:	f001 ffb2 	bl	8002f4c <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000fe8:	2005      	movs	r0, #5
 8000fea:	f001 fb6f 	bl	80026cc <HAL_Delay>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000021c 	.word	0x2000021c

08000ffc <lcd_display>:

void lcd_display(struct lcd_disp * lcd)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0, i = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	2300      	movs	r3, #0
 800100a:	73bb      	strb	r3, [r7, #14]

	/* set backlight */
	if(lcd->bl)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <lcd_display+0x1e>
	{
		xpin = BL_PIN;
 8001016:	2308      	movs	r3, #8
 8001018:	73fb      	strb	r3, [r7, #15]
	}

	lcd_clear(lcd);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f843 	bl	80010a6 <lcd_clear>

	/* send first line data */
	lcd_write(lcd->addr, FIRST_CHAR_LINE_1, xpin);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ffa1 	bl	8000f70 <lcd_write>
	while(lcd->f_line[i])
 800102e:	e00f      	b.n	8001050 <lcd_display+0x54>
	{
		lcd_write(lcd->addr, lcd->f_line[i], (xpin | RS_PIN));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7818      	ldrb	r0, [r3, #0]
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	7859      	ldrb	r1, [r3, #1]
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	f7ff ff93 	bl	8000f70 <lcd_write>
		i++;
 800104a:	7bbb      	ldrb	r3, [r7, #14]
 800104c:	3301      	adds	r3, #1
 800104e:	73bb      	strb	r3, [r7, #14]
	while(lcd->f_line[i])
 8001050:	7bbb      	ldrb	r3, [r7, #14]
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	785b      	ldrb	r3, [r3, #1]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e9      	bne.n	8001030 <lcd_display+0x34>
	}

	/* send second line data */
	i = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	73bb      	strb	r3, [r7, #14]
	lcd_write(lcd->addr, FIRST_CHAR_LINE_2, xpin);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	21c0      	movs	r1, #192	; 0xc0
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff81 	bl	8000f70 <lcd_write>
	while(lcd->s_line[i])
 800106e:	e00f      	b.n	8001090 <lcd_display+0x94>
	{
		lcd_write(lcd->addr, lcd->s_line[i], (xpin | RS_PIN));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7818      	ldrb	r0, [r3, #0]
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	7c99      	ldrb	r1, [r3, #18]
 800107c:	7bfb      	ldrb	r3, [r7, #15]
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	b2db      	uxtb	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	f7ff ff73 	bl	8000f70 <lcd_write>
		i++;
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	3301      	adds	r3, #1
 800108e:	73bb      	strb	r3, [r7, #14]
	while(lcd->s_line[i])
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	7c9b      	ldrb	r3, [r3, #18]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1e9      	bne.n	8001070 <lcd_display+0x74>
	}
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <lcd_clear>:

void lcd_clear(struct lcd_disp * lcd)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	uint8_t xpin = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]

	/* set backlight */
	if(lcd->bl)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <lcd_clear+0x1a>
	{
		xpin = BL_PIN;
 80010bc:	2308      	movs	r3, #8
 80010be:	73fb      	strb	r3, [r7, #15]
	}

	/* clear display */
	lcd_write(lcd->addr, CLEAR_LCD, xpin);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	7bfa      	ldrb	r2, [r7, #15]
 80010c6:	2101      	movs	r1, #1
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff51 	bl	8000f70 <lcd_write>
}
 80010ce:	bf00      	nop
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 031c 	add.w	r3, r7, #28
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b5b      	ldr	r3, [pc, #364]	; (800125c <MX_GPIO_Init+0x184>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a5a      	ldr	r2, [pc, #360]	; (800125c <MX_GPIO_Init+0x184>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b58      	ldr	r3, [pc, #352]	; (800125c <MX_GPIO_Init+0x184>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	4b55      	ldr	r3, [pc, #340]	; (800125c <MX_GPIO_Init+0x184>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a54      	ldr	r2, [pc, #336]	; (800125c <MX_GPIO_Init+0x184>)
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b52      	ldr	r3, [pc, #328]	; (800125c <MX_GPIO_Init+0x184>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111e:	4b4f      	ldr	r3, [pc, #316]	; (800125c <MX_GPIO_Init+0x184>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a4e      	ldr	r2, [pc, #312]	; (800125c <MX_GPIO_Init+0x184>)
 8001124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b4c      	ldr	r3, [pc, #304]	; (800125c <MX_GPIO_Init+0x184>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b49      	ldr	r3, [pc, #292]	; (800125c <MX_GPIO_Init+0x184>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a48      	ldr	r2, [pc, #288]	; (800125c <MX_GPIO_Init+0x184>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b46      	ldr	r3, [pc, #280]	; (800125c <MX_GPIO_Init+0x184>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	4b43      	ldr	r3, [pc, #268]	; (800125c <MX_GPIO_Init+0x184>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a42      	ldr	r2, [pc, #264]	; (800125c <MX_GPIO_Init+0x184>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b40      	ldr	r3, [pc, #256]	; (800125c <MX_GPIO_Init+0x184>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	4b3d      	ldr	r3, [pc, #244]	; (800125c <MX_GPIO_Init+0x184>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a3c      	ldr	r2, [pc, #240]	; (800125c <MX_GPIO_Init+0x184>)
 800116c:	f043 0308 	orr.w	r3, r3, #8
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b3a      	ldr	r3, [pc, #232]	; (800125c <MX_GPIO_Init+0x184>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <MX_GPIO_Init+0x184>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a36      	ldr	r2, [pc, #216]	; (800125c <MX_GPIO_Init+0x184>)
 8001184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b34      	ldr	r3, [pc, #208]	; (800125c <MX_GPIO_Init+0x184>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DC1_Pin|DC2_Pin|LD3_Pin
 8001196:	2200      	movs	r2, #0
 8001198:	f644 4181 	movw	r1, #19585	; 0x4c81
 800119c:	4830      	ldr	r0, [pc, #192]	; (8001260 <MX_GPIO_Init+0x188>)
 800119e:	f001 fdf9 	bl	8002d94 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2140      	movs	r1, #64	; 0x40
 80011a6:	482f      	ldr	r0, [pc, #188]	; (8001264 <MX_GPIO_Init+0x18c>)
 80011a8:	f001 fdf4 	bl	8002d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4829      	ldr	r0, [pc, #164]	; (8001268 <MX_GPIO_Init+0x190>)
 80011c4:	f001 fc4a 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Sensor_Pin;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Sensor_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4823      	ldr	r0, [pc, #140]	; (800126c <MX_GPIO_Init+0x194>)
 80011de:	f001 fc3d 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DC1_Pin|DC2_Pin|LD3_Pin
 80011e2:	f644 4381 	movw	r3, #19585	; 0x4c81
 80011e6:	61fb      	str	r3, [r7, #28]
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4619      	mov	r1, r3
 80011fa:	4819      	ldr	r0, [pc, #100]	; (8001260 <MX_GPIO_Init+0x188>)
 80011fc:	f001 fc2e 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001200:	2340      	movs	r3, #64	; 0x40
 8001202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4619      	mov	r1, r3
 8001216:	4813      	ldr	r0, [pc, #76]	; (8001264 <MX_GPIO_Init+0x18c>)
 8001218:	f001 fc20 	bl	8002a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_GPIO_Init+0x18c>)
 8001230:	f001 fc14 	bl	8002a5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2006      	movs	r0, #6
 800123a:	f001 fb46 	bl	80028ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800123e:	2006      	movs	r0, #6
 8001240:	f001 fb5f 	bl	8002902 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001244:	2200      	movs	r2, #0
 8001246:	2100      	movs	r1, #0
 8001248:	2028      	movs	r0, #40	; 0x28
 800124a:	f001 fb3e 	bl	80028ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800124e:	2028      	movs	r0, #40	; 0x28
 8001250:	f001 fb57 	bl	8002902 <HAL_NVIC_EnableIRQ>

}
 8001254:	bf00      	nop
 8001256:	3730      	adds	r7, #48	; 0x30
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40020400 	.word	0x40020400
 8001264:	40021800 	.word	0x40021800
 8001268:	40020800 	.word	0x40020800
 800126c:	40021400 	.word	0x40021400

08001270 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <MX_I2C1_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_I2C1_Init+0x74>)
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <MX_I2C1_Init+0x7c>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001288:	2201      	movs	r2, #1
 800128a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_I2C1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012aa:	480e      	ldr	r0, [pc, #56]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012ac:	f001 fdbe 	bl	8002e2c <HAL_I2C_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012b6:	f000 fce7 	bl	8001c88 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012be:	f002 f937 	bl	8003530 <HAL_I2CEx_ConfigAnalogFilter>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c8:	f000 fcde 	bl	8001c88 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_I2C1_Init+0x74>)
 80012d0:	f002 f979 	bl	80035c6 <HAL_I2CEx_ConfigDigitalFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 fcd5 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2000021c 	.word	0x2000021c
 80012e8:	40005400 	.word	0x40005400
 80012ec:	20404768 	.word	0x20404768

080012f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_I2C_MspInit+0x7c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d128      	bne.n	8001364 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a16      	ldr	r2, [pc, #88]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800132a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800132e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800133c:	2304      	movs	r3, #4
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	480b      	ldr	r0, [pc, #44]	; (8001374 <HAL_I2C_MspInit+0x84>)
 8001348:	f001 fb88 	bl	8002a5c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_I2C_MspInit+0x80>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	4a07      	ldr	r2, [pc, #28]	; (8001370 <HAL_I2C_MspInit+0x80>)
 8001352:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001356:	6413      	str	r3, [r2, #64]	; 0x40
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_I2C_MspInit+0x80>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	; 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40005400 	.word	0x40005400
 8001370:	40023800 	.word	0x40023800
 8001374:	40020400 	.word	0x40020400

08001378 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001380:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001384:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d013      	beq.n	80013b8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001390:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001394:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001398:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800139c:	2b00      	cmp	r3, #0
 800139e:	d00b      	beq.n	80013b8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80013a0:	e000      	b.n	80013a4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80013a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80013a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f9      	beq.n	80013a2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80013ae:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	b2d2      	uxtb	r2, r2
 80013b6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80013b8:	687b      	ldr	r3, [r7, #4]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <_write>:
/* @version V1.0
/* @date    17-Feb-2022

/*****************************************************************************************************/
int _write(int file, char *ptr, int len)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	60f8      	str	r0, [r7, #12]
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
	int i=0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
	for(i=0 ; i<len ; i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e009      	b.n	80013f0 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	60ba      	str	r2, [r7, #8]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ffc7 	bl	8001378 <ITM_SendChar>
	for(i=0 ; i<len ; i++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf1      	blt.n	80013dc <_write+0x16>
	return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	; 0x30
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140a:	f001 f8f9 	bl	8002600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800140e:	f000 f89d 	bl	800154c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001412:	f7ff fe61 	bl	80010d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001416:	f000 ffc3 	bl	80023a0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800141a:	f001 f83d 	bl	8002498 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800141e:	f000 fdc9 	bl	8001fb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001422:	f000 fe3f 	bl	80020a4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8001426:	f000 fd77 	bl	8001f18 <MX_TIM2_Init>
  MX_TIM5_Init();
 800142a:	f000 fe91 	bl	8002150 <MX_TIM5_Init>
  MX_I2C1_Init();
 800142e:	f7ff ff1f 	bl	8001270 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	//usart
	HAL_UART_Receive_IT(&huart3, &buff,3);
 8001432:	2203      	movs	r2, #3
 8001434:	4935      	ldr	r1, [pc, #212]	; (800150c <main+0x108>)
 8001436:	4836      	ldr	r0, [pc, #216]	; (8001510 <main+0x10c>)
 8001438:	f004 ff01 	bl	800623e <HAL_UART_Receive_IT>

	// frequency measurement
	HAL_TIM_Base_Start(&htim2);
 800143c:	4835      	ldr	r0, [pc, #212]	; (8001514 <main+0x110>)
 800143e:	f003 faff 	bl	8004a40 <HAL_TIM_Base_Start>

	// H bridge
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001442:	2100      	movs	r1, #0
 8001444:	4834      	ldr	r0, [pc, #208]	; (8001518 <main+0x114>)
 8001446:	f003 fc45 	bl	8004cd4 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,50);
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <main+0x114>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2232      	movs	r2, #50	; 0x32
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(DC1_GPIO_Port, DC1_Pin, GPIO_PIN_RESET);
 8001452:	2200      	movs	r2, #0
 8001454:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001458:	4830      	ldr	r0, [pc, #192]	; (800151c <main+0x118>)
 800145a:	f001 fc9b 	bl	8002d94 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DC2_GPIO_Port, DC2_Pin, GPIO_PIN_SET);
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001464:	482d      	ldr	r0, [pc, #180]	; (800151c <main+0x118>)
 8001466:	f001 fc95 	bl	8002d94 <HAL_GPIO_WritePin>

	//encoder
	HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 800146a:	213c      	movs	r1, #60	; 0x3c
 800146c:	482c      	ldr	r0, [pc, #176]	; (8001520 <main+0x11c>)
 800146e:	f003 fdd1 	bl	8005014 <HAL_TIM_Encoder_Start_IT>


	//sampler

	int new_prescaler = htim5.Init.Prescaler/sampling_freq;
 8001472:	4b2c      	ldr	r3, [pc, #176]	; (8001524 <main+0x120>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a2c      	ldr	r2, [pc, #176]	; (8001528 <main+0x124>)
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	fbb3 f3f2 	udiv	r3, r3, r2
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_TIM_Base_Start_IT(&htim5);
 8001480:	4828      	ldr	r0, [pc, #160]	; (8001524 <main+0x120>)
 8001482:	f003 fb4d 	bl	8004b20 <HAL_TIM_Base_Start_IT>
	__HAL_TIM_SET_PRESCALER(&htim5,new_prescaler);
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <main+0x120>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800148c:	629a      	str	r2, [r3, #40]	; 0x28


	//LCD

	  disp.addr = (0x3F << 1);
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <main+0x128>)
 8001490:	227e      	movs	r2, #126	; 0x7e
 8001492:	701a      	strb	r2, [r3, #0]
	  disp.bl = true;
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <main+0x128>)
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	  lcd_init(&disp);
 800149c:	4823      	ldr	r0, [pc, #140]	; (800152c <main+0x128>)
 800149e:	f7ff fd27 	bl	8000ef0 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		sprintf(LCDdisplay1, "U: %d rpm",(int)(U*60));
 80014a2:	4b23      	ldr	r3, [pc, #140]	; (8001530 <main+0x12c>)
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001534 <main+0x130>
 80014ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	ee17 2a90 	vmov	r2, s15
 80014bc:	491e      	ldr	r1, [pc, #120]	; (8001538 <main+0x134>)
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 f886 	bl	80085d0 <siprintf>
		sprintf(LCDdisplay2, "Y: %d rpm",(int)(Y*60));
 80014c4:	4b1d      	ldr	r3, [pc, #116]	; (800153c <main+0x138>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001534 <main+0x130>
 80014ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	ee17 2a90 	vmov	r2, s15
 80014dc:	4918      	ldr	r1, [pc, #96]	; (8001540 <main+0x13c>)
 80014de:	4618      	mov	r0, r3
 80014e0:	f007 f876 	bl	80085d0 <siprintf>

		sprintf((char *)disp.f_line, LCDdisplay1);
 80014e4:	f107 0318 	add.w	r3, r7, #24
 80014e8:	4619      	mov	r1, r3
 80014ea:	4816      	ldr	r0, [pc, #88]	; (8001544 <main+0x140>)
 80014ec:	f007 f870 	bl	80085d0 <siprintf>
		sprintf((char *)disp.s_line, LCDdisplay2);
 80014f0:	1d3b      	adds	r3, r7, #4
 80014f2:	4619      	mov	r1, r3
 80014f4:	4814      	ldr	r0, [pc, #80]	; (8001548 <main+0x144>)
 80014f6:	f007 f86b 	bl	80085d0 <siprintf>

		lcd_display(&disp);
 80014fa:	480c      	ldr	r0, [pc, #48]	; (800152c <main+0x128>)
 80014fc:	f7ff fd7e 	bl	8000ffc <lcd_display>

		HAL_Delay(500);
 8001500:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001504:	f001 f8e2 	bl	80026cc <HAL_Delay>
		sprintf(LCDdisplay1, "U: %d rpm",(int)(U*60));
 8001508:	e7cb      	b.n	80014a2 <main+0x9e>
 800150a:	bf00      	nop
 800150c:	20000284 	.word	0x20000284
 8001510:	20000494 	.word	0x20000494
 8001514:	20000448 	.word	0x20000448
 8001518:	200003fc 	.word	0x200003fc
 800151c:	40020400 	.word	0x40020400
 8001520:	20000364 	.word	0x20000364
 8001524:	200003b0 	.word	0x200003b0
 8001528:	20000000 	.word	0x20000000
 800152c:	20000340 	.word	0x20000340
 8001530:	20000334 	.word	0x20000334
 8001534:	42700000 	.word	0x42700000
 8001538:	0800aa68 	.word	0x0800aa68
 800153c:	200002c8 	.word	0x200002c8
 8001540:	0800aa74 	.word	0x0800aa74
 8001544:	20000341 	.word	0x20000341
 8001548:	20000352 	.word	0x20000352

0800154c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0b4      	sub	sp, #208	; 0xd0
 8001550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001552:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001556:	2230      	movs	r2, #48	; 0x30
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f006 fbc6 	bl	8007cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001560:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f006 fbb7 	bl	8007cec <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800157e:	f002 f9b7 	bl	80038f0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b3b      	ldr	r3, [pc, #236]	; (8001670 <SystemClock_Config+0x124>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a3a      	ldr	r2, [pc, #232]	; (8001670 <SystemClock_Config+0x124>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b38      	ldr	r3, [pc, #224]	; (8001670 <SystemClock_Config+0x124>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159a:	4b36      	ldr	r3, [pc, #216]	; (8001674 <SystemClock_Config+0x128>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a35      	ldr	r2, [pc, #212]	; (8001674 <SystemClock_Config+0x128>)
 80015a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b33      	ldr	r3, [pc, #204]	; (8001674 <SystemClock_Config+0x128>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b2:	2301      	movs	r3, #1
 80015b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015b8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c0:	2302      	movs	r3, #2
 80015c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015ce:	2304      	movs	r3, #4
 80015d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80015d4:	23d8      	movs	r3, #216	; 0xd8
 80015d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80015e0:	2309      	movs	r3, #9
 80015e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f002 f9e0 	bl	80039b0 <HAL_RCC_OscConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015f6:	f000 fb47 	bl	8001c88 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015fa:	f002 f989 	bl	8003910 <HAL_PWREx_EnableOverDrive>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001604:	f000 fb40 	bl	8001c88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001608:	230f      	movs	r3, #15
 800160a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160e:	2302      	movs	r3, #2
 8001610:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800161a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800161e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800162a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800162e:	2107      	movs	r1, #7
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fc61 	bl	8003ef8 <HAL_RCC_ClockConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800163c:	f000 fb24 	bl	8001c88 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <SystemClock_Config+0x12c>)
 8001642:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001644:	2300      	movs	r3, #0
 8001646:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001648:	2300      	movs	r3, #0
 800164a:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fe50 	bl	80042fc <HAL_RCCEx_PeriphCLKConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8001662:	f000 fb11 	bl	8001c88 <Error_Handler>
  }
}
 8001666:	bf00      	nop
 8001668:	37d0      	adds	r7, #208	; 0xd0
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000
 8001678:	00204100 	.word	0x00204100
 800167c:	00000000 	.word	0x00000000

08001680 <HAL_GPIO_EXTI_Callback>:
/* @return None
/* @version V1.0
/* @date    17-Feb-2022

/*****************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == USER_Btn_Pin){
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001690:	d109      	bne.n	80016a6 <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_TogglePin(DC1_GPIO_Port, DC1_Pin);
 8001692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001696:	4832      	ldr	r0, [pc, #200]	; (8001760 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001698:	f001 fb95 	bl	8002dc6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(DC2_GPIO_Port, DC2_Pin);
 800169c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a0:	482f      	ldr	r0, [pc, #188]	; (8001760 <HAL_GPIO_EXTI_Callback+0xe0>)
 80016a2:	f001 fb90 	bl	8002dc6 <HAL_GPIO_TogglePin>

	}
	if(GPIO_Pin == Sensor_Pin){
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d14f      	bne.n	800174c <HAL_GPIO_EXTI_Callback+0xcc>
		timer_val=__HAL_TIM_GET_COUNTER(&htim2);
 80016ac:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_GPIO_EXTI_Callback+0xe4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b2c      	ldr	r3, [pc, #176]	; (8001768 <HAL_GPIO_EXTI_Callback+0xe8>)
 80016b6:	601a      	str	r2, [r3, #0]

		if(timer_val>15000){
 80016b8:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <HAL_GPIO_EXTI_Callback+0xe8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f643 2298 	movw	r2, #15000	; 0x3a98
 80016c0:	4293      	cmp	r3, r2
 80016c2:	dd03      	ble.n	80016cc <HAL_GPIO_EXTI_Callback+0x4c>
			time_elapsed=timer_val;
 80016c4:	4b28      	ldr	r3, [pc, #160]	; (8001768 <HAL_GPIO_EXTI_Callback+0xe8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a28      	ldr	r2, [pc, #160]	; (800176c <HAL_GPIO_EXTI_Callback+0xec>)
 80016ca:	6013      	str	r3, [r2, #0]
		}

		frequency = 1/(float)time_elapsed*1000000;
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_GPIO_EXTI_Callback+0xec>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	ee07 3a90 	vmov	s15, r3
 80016d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001770 <HAL_GPIO_EXTI_Callback+0xf0>
 80016e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <HAL_GPIO_EXTI_Callback+0xf4>)
 80016ea:	edc3 7a00 	vstr	s15, [r3]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 80016ee:	4b1d      	ldr	r3, [pc, #116]	; (8001764 <HAL_GPIO_EXTI_Callback+0xe4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24

		if(frequency>2){
 80016f6:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <HAL_GPIO_EXTI_Callback+0xf4>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	dd0e      	ble.n	8001728 <HAL_GPIO_EXTI_Callback+0xa8>
			ratio_frequency=(frequency/old_frequency);
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_GPIO_EXTI_Callback+0xf4>)
 800170c:	edd3 6a00 	vldr	s13, [r3]
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <HAL_GPIO_EXTI_Callback+0xfc>)
 800171c:	edc3 7a00 	vstr	s15, [r3]
			old_frequency = frequency;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_GPIO_EXTI_Callback+0xf8>)
 8001726:	6013      	str	r3, [r2, #0]
		}

		if(ratio_frequency<1.3){
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_GPIO_EXTI_Callback+0xfc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe ff33 	bl	8000598 <__aeabi_f2d>
 8001732:	a309      	add	r3, pc, #36	; (adr r3, 8001758 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7ff f9f8 	bl	8000b2c <__aeabi_dcmplt>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d100      	bne.n	8001744 <HAL_GPIO_EXTI_Callback+0xc4>
			out_frequency = frequency;
		}
	}
}
 8001742:	e003      	b.n	800174c <HAL_GPIO_EXTI_Callback+0xcc>
			out_frequency = frequency;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_GPIO_EXTI_Callback+0xf4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	; (8001780 <HAL_GPIO_EXTI_Callback+0x100>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	f3af 8000 	nop.w
 8001758:	cccccccd 	.word	0xcccccccd
 800175c:	3ff4cccc 	.word	0x3ff4cccc
 8001760:	40020400 	.word	0x40020400
 8001764:	20000448 	.word	0x20000448
 8001768:	20000324 	.word	0x20000324
 800176c:	2000026c 	.word	0x2000026c
 8001770:	49742400 	.word	0x49742400
 8001774:	20000274 	.word	0x20000274
 8001778:	200002c4 	.word	0x200002c4
 800177c:	20000010 	.word	0x20000010
 8001780:	200002cc 	.word	0x200002cc

08001784 <HAL_TIM_IC_CaptureCallback>:
/* @param[in] htim TIM handler
/* @return None/* @version V1.0
/* @date    17-Feb-2022

/*****************************************************************************************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	encoder_coutner=__HAL_TIM_GET_COUNTER(htim);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001792:	4a1e      	ldr	r2, [pc, #120]	; (800180c <HAL_TIM_IC_CaptureCallback+0x88>)
 8001794:	6013      	str	r3, [r2, #0]
	count=((int16_t)encoder_coutner)/4;
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <HAL_TIM_IC_CaptureCallback+0x88>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	b21b      	sxth	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	da00      	bge.n	80017a2 <HAL_TIM_IC_CaptureCallback+0x1e>
 80017a0:	3303      	adds	r3, #3
 80017a2:	109b      	asrs	r3, r3, #2
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80017a8:	801a      	strh	r2, [r3, #0]


	if (count>30){
 80017aa:	4b19      	ldr	r3, [pc, #100]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80017ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b0:	2b1e      	cmp	r3, #30
 80017b2:	dd0f      	ble.n	80017d4 <HAL_TIM_IC_CaptureCallback+0x50>
		count=30;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80017b6:	221e      	movs	r2, #30
 80017b8:	801a      	strh	r2, [r3, #0]
		encoder_coutner=(uint32_t)(4*count);
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80017bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_TIM_IC_CaptureCallback+0x88>)
 80017c6:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(htim,encoder_coutner);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0f      	ldr	r2, [pc, #60]	; (800180c <HAL_TIM_IC_CaptureCallback+0x88>)
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24

	}

////	U_tmp+=count;
//		U_tmp=10;
}
 80017d2:	e015      	b.n	8001800 <HAL_TIM_IC_CaptureCallback+0x7c>
	}else if(count<-30){
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80017d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017da:	f113 0f1e 	cmn.w	r3, #30
 80017de:	da0f      	bge.n	8001800 <HAL_TIM_IC_CaptureCallback+0x7c>
		count=-30;
 80017e0:	4b0b      	ldr	r3, [pc, #44]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80017e2:	f64f 72e2 	movw	r2, #65506	; 0xffe2
 80017e6:	801a      	strh	r2, [r3, #0]
		encoder_coutner=(0xFFFFFFFF+4*count);
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_TIM_IC_CaptureCallback+0x8c>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	3b01      	subs	r3, #1
 80017f2:	4a06      	ldr	r2, [pc, #24]	; (800180c <HAL_TIM_IC_CaptureCallback+0x88>)
 80017f4:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(htim,encoder_coutner);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_TIM_IC_CaptureCallback+0x88>)
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	2000020c 	.word	0x2000020c
 8001810:	20000318 	.word	0x20000318

08001814 <HAL_UART_RxCpltCallback>:
 @version V2.0
 @date    20-Feb-2022

/*****************************************************************************************************/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a5b      	ldr	r2, [pc, #364]	; (8001990 <HAL_UART_RxCpltCallback+0x17c>)
 8001822:	4293      	cmp	r3, r2
 8001824:	f040 80af 	bne.w	8001986 <HAL_UART_RxCpltCallback+0x172>
			HAL_UART_Receive_IT(&huart3, buff, 3);
 8001828:	2203      	movs	r2, #3
 800182a:	495a      	ldr	r1, [pc, #360]	; (8001994 <HAL_UART_RxCpltCallback+0x180>)
 800182c:	485a      	ldr	r0, [pc, #360]	; (8001998 <HAL_UART_RxCpltCallback+0x184>)
 800182e:	f004 fd06 	bl	800623e <HAL_UART_Receive_IT>

			if(strncmp(buff,'SETD',4)==0)
 8001832:	2204      	movs	r2, #4
 8001834:	4959      	ldr	r1, [pc, #356]	; (800199c <HAL_UART_RxCpltCallback+0x188>)
 8001836:	4857      	ldr	r0, [pc, #348]	; (8001994 <HAL_UART_RxCpltCallback+0x180>)
 8001838:	f006 feea 	bl	8008610 <strncmp>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d11f      	bne.n	8001882 <HAL_UART_RxCpltCallback+0x6e>
			{

				int val0, val1, new_duty;
				val0 = (int)(buff[4]-'0');
 8001842:	4b54      	ldr	r3, [pc, #336]	; (8001994 <HAL_UART_RxCpltCallback+0x180>)
 8001844:	791b      	ldrb	r3, [r3, #4]
 8001846:	3b30      	subs	r3, #48	; 0x30
 8001848:	617b      	str	r3, [r7, #20]
				val1 = (int)(buff[5]-'0');
 800184a:	4b52      	ldr	r3, [pc, #328]	; (8001994 <HAL_UART_RxCpltCallback+0x180>)
 800184c:	795b      	ldrb	r3, [r3, #5]
 800184e:	3b30      	subs	r3, #48	; 0x30
 8001850:	613b      	str	r3, [r7, #16]
				new_duty=(val0*10+val1)*100;
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	461a      	mov	r2, r3
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	4413      	add	r3, r2
 8001862:	2264      	movs	r2, #100	; 0x64
 8001864:	fb02 f303 	mul.w	r3, r2, r3
 8001868:	60fb      	str	r3, [r7, #12]
				__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,new_duty);
 800186a:	4b4d      	ldr	r3, [pc, #308]	; (80019a0 <HAL_UART_RxCpltCallback+0x18c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	635a      	str	r2, [r3, #52]	; 0x34
				status_len=sprintf(msg_,"Duty has been Set");
 8001872:	494c      	ldr	r1, [pc, #304]	; (80019a4 <HAL_UART_RxCpltCallback+0x190>)
 8001874:	484c      	ldr	r0, [pc, #304]	; (80019a8 <HAL_UART_RxCpltCallback+0x194>)
 8001876:	f006 feab 	bl	80085d0 <siprintf>
 800187a:	4603      	mov	r3, r0
 800187c:	4a4b      	ldr	r2, [pc, #300]	; (80019ac <HAL_UART_RxCpltCallback+0x198>)
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e079      	b.n	8001976 <HAL_UART_RxCpltCallback+0x162>
			}
			else
				if(strncmp(buff,'SETU',4)==0)
 8001882:	2204      	movs	r2, #4
 8001884:	494a      	ldr	r1, [pc, #296]	; (80019b0 <HAL_UART_RxCpltCallback+0x19c>)
 8001886:	4843      	ldr	r0, [pc, #268]	; (8001994 <HAL_UART_RxCpltCallback+0x180>)
 8001888:	f006 fec2 	bl	8008610 <strncmp>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d121      	bne.n	80018d6 <HAL_UART_RxCpltCallback+0xc2>
				{
					int val0, val1, new_duty;
					val0 = (int)(buff[1]-'0');
 8001892:	4b40      	ldr	r3, [pc, #256]	; (8001994 <HAL_UART_RxCpltCallback+0x180>)
 8001894:	785b      	ldrb	r3, [r3, #1]
 8001896:	3b30      	subs	r3, #48	; 0x30
 8001898:	61fb      	str	r3, [r7, #28]
					val1 = (int)(buff[2]-'0');
 800189a:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <HAL_UART_RxCpltCallback+0x180>)
 800189c:	789b      	ldrb	r3, [r3, #2]
 800189e:	3b30      	subs	r3, #48	; 0x30
 80018a0:	61bb      	str	r3, [r7, #24]
					U_tmp=val0*10+val1;
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	461a      	mov	r2, r3
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4413      	add	r3, r2
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ba:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <HAL_UART_RxCpltCallback+0x1a0>)
 80018bc:	edc3 7a00 	vstr	s15, [r3]
					count=0;   ////////////////////// count test
 80018c0:	4b3d      	ldr	r3, [pc, #244]	; (80019b8 <HAL_UART_RxCpltCallback+0x1a4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	801a      	strh	r2, [r3, #0]
					status_len=sprintf(msg_,"Refernce value has been Set");
 80018c6:	493d      	ldr	r1, [pc, #244]	; (80019bc <HAL_UART_RxCpltCallback+0x1a8>)
 80018c8:	4837      	ldr	r0, [pc, #220]	; (80019a8 <HAL_UART_RxCpltCallback+0x194>)
 80018ca:	f006 fe81 	bl	80085d0 <siprintf>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4a36      	ldr	r2, [pc, #216]	; (80019ac <HAL_UART_RxCpltCallback+0x198>)
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e04f      	b.n	8001976 <HAL_UART_RxCpltCallback+0x162>
				}
				else
					if(strncmp(buff,'READ:U',6)==0)
 80018d6:	2206      	movs	r2, #6
 80018d8:	4939      	ldr	r1, [pc, #228]	; (80019c0 <HAL_UART_RxCpltCallback+0x1ac>)
 80018da:	482e      	ldr	r0, [pc, #184]	; (8001994 <HAL_UART_RxCpltCallback+0x180>)
 80018dc:	f006 fe98 	bl	8008610 <strncmp>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d114      	bne.n	8001910 <HAL_UART_RxCpltCallback+0xfc>
				{

						status_len=sprintf(msg_,"Refernce Value: %d RPM\r\n",(U*60));
 80018e6:	4b37      	ldr	r3, [pc, #220]	; (80019c4 <HAL_UART_RxCpltCallback+0x1b0>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80019c8 <HAL_UART_RxCpltCallback+0x1b4>
 80018f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f4:	ee17 0a90 	vmov	r0, s15
 80018f8:	f7fe fe4e 	bl	8000598 <__aeabi_f2d>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4932      	ldr	r1, [pc, #200]	; (80019cc <HAL_UART_RxCpltCallback+0x1b8>)
 8001902:	4829      	ldr	r0, [pc, #164]	; (80019a8 <HAL_UART_RxCpltCallback+0x194>)
 8001904:	f006 fe64 	bl	80085d0 <siprintf>
 8001908:	4603      	mov	r3, r0
 800190a:	4a28      	ldr	r2, [pc, #160]	; (80019ac <HAL_UART_RxCpltCallback+0x198>)
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	e032      	b.n	8001976 <HAL_UART_RxCpltCallback+0x162>
				}
				else
					if(strncmp(buff,'READ:Y',6)==0)
 8001910:	2206      	movs	r2, #6
 8001912:	492f      	ldr	r1, [pc, #188]	; (80019d0 <HAL_UART_RxCpltCallback+0x1bc>)
 8001914:	481f      	ldr	r0, [pc, #124]	; (8001994 <HAL_UART_RxCpltCallback+0x180>)
 8001916:	f006 fe7b 	bl	8008610 <strncmp>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d114      	bne.n	800194a <HAL_UART_RxCpltCallback+0x136>
					{

						status_len=sprintf(msg_,"Speed: %d RPM\r\n",(Y*60));
 8001920:	4b2c      	ldr	r3, [pc, #176]	; (80019d4 <HAL_UART_RxCpltCallback+0x1c0>)
 8001922:	edd3 7a00 	vldr	s15, [r3]
 8001926:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80019c8 <HAL_UART_RxCpltCallback+0x1b4>
 800192a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800192e:	ee17 0a90 	vmov	r0, s15
 8001932:	f7fe fe31 	bl	8000598 <__aeabi_f2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	4927      	ldr	r1, [pc, #156]	; (80019d8 <HAL_UART_RxCpltCallback+0x1c4>)
 800193c:	481a      	ldr	r0, [pc, #104]	; (80019a8 <HAL_UART_RxCpltCallback+0x194>)
 800193e:	f006 fe47 	bl	80085d0 <siprintf>
 8001942:	4603      	mov	r3, r0
 8001944:	4a19      	ldr	r2, [pc, #100]	; (80019ac <HAL_UART_RxCpltCallback+0x198>)
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e015      	b.n	8001976 <HAL_UART_RxCpltCallback+0x162>
					}
					else
					if(strncmp(buff,'READ:E',6)==0)
 800194a:	2206      	movs	r2, #6
 800194c:	4923      	ldr	r1, [pc, #140]	; (80019dc <HAL_UART_RxCpltCallback+0x1c8>)
 800194e:	4811      	ldr	r0, [pc, #68]	; (8001994 <HAL_UART_RxCpltCallback+0x180>)
 8001950:	f006 fe5e 	bl	8008610 <strncmp>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <HAL_UART_RxCpltCallback+0x162>
					{
						status_len=sprintf(msg_,"Error: %d \r\n",E);
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <HAL_UART_RxCpltCallback+0x1cc>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fe1a 	bl	8000598 <__aeabi_f2d>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	491e      	ldr	r1, [pc, #120]	; (80019e4 <HAL_UART_RxCpltCallback+0x1d0>)
 800196a:	480f      	ldr	r0, [pc, #60]	; (80019a8 <HAL_UART_RxCpltCallback+0x194>)
 800196c:	f006 fe30 	bl	80085d0 <siprintf>
 8001970:	4603      	mov	r3, r0
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_UART_RxCpltCallback+0x198>)
 8001974:	6013      	str	r3, [r2, #0]
					}
			HAL_UART_Transmit( &huart3,msg_,status_len, 100);
 8001976:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <HAL_UART_RxCpltCallback+0x198>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	b29a      	uxth	r2, r3
 800197c:	2364      	movs	r3, #100	; 0x64
 800197e:	490a      	ldr	r1, [pc, #40]	; (80019a8 <HAL_UART_RxCpltCallback+0x194>)
 8001980:	4805      	ldr	r0, [pc, #20]	; (8001998 <HAL_UART_RxCpltCallback+0x184>)
 8001982:	f004 fbc9 	bl	8006118 <HAL_UART_Transmit>
}
}
 8001986:	bf00      	nop
 8001988:	3720      	adds	r7, #32
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40004800 	.word	0x40004800
 8001994:	20000284 	.word	0x20000284
 8001998:	20000494 	.word	0x20000494
 800199c:	53455444 	.word	0x53455444
 80019a0:	200003fc 	.word	0x200003fc
 80019a4:	0800aa80 	.word	0x0800aa80
 80019a8:	200002d8 	.word	0x200002d8
 80019ac:	200002d0 	.word	0x200002d0
 80019b0:	53455455 	.word	0x53455455
 80019b4:	20000338 	.word	0x20000338
 80019b8:	20000318 	.word	0x20000318
 80019bc:	0800aa94 	.word	0x0800aa94
 80019c0:	41443a55 	.word	0x41443a55
 80019c4:	20000334 	.word	0x20000334
 80019c8:	42700000 	.word	0x42700000
 80019cc:	0800aab0 	.word	0x0800aab0
 80019d0:	41443a59 	.word	0x41443a59
 80019d4:	200002c8 	.word	0x200002c8
 80019d8:	0800aacc 	.word	0x0800aacc
 80019dc:	41443a45 	.word	0x41443a45
 80019e0:	2000032c 	.word	0x2000032c
 80019e4:	0800aadc 	.word	0x0800aadc

080019e8 <HAL_TIM_PeriodElapsedCallback>:
 @return None
 @version V1.0
 @date    18-Feb-2022

/**************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM5){
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a8a      	ldr	r2, [pc, #552]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	f040 810b 	bne.w	8001c12 <HAL_TIM_PeriodElapsedCallback+0x22a>
		rot_freq=out_frequency;
 80019fc:	4b89      	ldr	r3, [pc, #548]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a89      	ldr	r2, [pc, #548]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001a02:	6013      	str	r3, [r2, #0]
		total_time+=1/((float)sampling_freq);
 8001a04:	4b89      	ldr	r3, [pc, #548]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a18:	4b85      	ldr	r3, [pc, #532]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a1a:	edd3 7a00 	vldr	s15, [r3]
 8001a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a22:	4b83      	ldr	r3, [pc, #524]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001a24:	edc3 7a00 	vstr	s15, [r3]
		Y=rot_freq;
 8001a28:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a81      	ldr	r2, [pc, #516]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001a2e:	6013      	str	r3, [r2, #0]
		U=U_tmp+count;
 8001a30:	4b81      	ldr	r3, [pc, #516]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a3e:	4b7f      	ldr	r3, [pc, #508]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001a40:	edd3 7a00 	vldr	s15, [r3]
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	4b7d      	ldr	r3, [pc, #500]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a4a:	edc3 7a00 	vstr	s15, [r3]

		E=U-Y;
 8001a4e:	4b7c      	ldr	r3, [pc, #496]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001a50:	ed93 7a00 	vldr	s14, [r3]
 8001a54:	4b77      	ldr	r3, [pc, #476]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5e:	4b79      	ldr	r3, [pc, #484]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001a60:	edc3 7a00 	vstr	s15, [r3]

//I
		I = prev_I+ E+prev_E;
 8001a64:	4b78      	ldr	r3, [pc, #480]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001a66:	ed93 7a00 	vldr	s14, [r3]
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001a6c:	edd3 7a00 	vldr	s15, [r3]
 8001a70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a74:	4b75      	ldr	r3, [pc, #468]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7e:	4b74      	ldr	r3, [pc, #464]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001a80:	edc3 7a00 	vstr	s15, [r3]
		Duty_test_I=I*k_I;
 8001a84:	4b72      	ldr	r3, [pc, #456]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001a86:	ed93 7a00 	vldr	s14, [r3]
 8001a8a:	4b72      	ldr	r3, [pc, #456]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a94:	4b70      	ldr	r3, [pc, #448]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a96:	edc3 7a00 	vstr	s15, [r3]
		if(Duty_test_I<1){Duty_test_I=1;}if(Duty_test_I>MAX_DUTY){Duty_test_I=MAX_DUTY; I=MAX_DUTY/k_I;}
 8001a9a:	4b6f      	ldr	r3, [pc, #444]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	d503      	bpl.n	8001ab6 <HAL_TIM_PeriodElapsedCallback+0xce>
 8001aae:	4b6a      	ldr	r3, [pc, #424]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ab0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	4b68      	ldr	r3, [pc, #416]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001ab8:	edd3 7a00 	vldr	s15, [r3]
 8001abc:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001c5c <HAL_TIM_PeriodElapsedCallback+0x274>
 8001ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac8:	dd0c      	ble.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0xfc>
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001acc:	4a64      	ldr	r2, [pc, #400]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	4b60      	ldr	r3, [pc, #384]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001ad2:	ed93 7a00 	vldr	s14, [r3]
 8001ad6:	eddf 6a61 	vldr	s13, [pc, #388]	; 8001c5c <HAL_TIM_PeriodElapsedCallback+0x274>
 8001ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ade:	4b5c      	ldr	r3, [pc, #368]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001ae0:	edc3 7a00 	vstr	s15, [r3]

//P
		Duty_test_P=E*k_E;
 8001ae4:	4b57      	ldr	r3, [pc, #348]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001ae6:	ed93 7a00 	vldr	s14, [r3]
 8001aea:	4b5e      	ldr	r3, [pc, #376]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	4b5c      	ldr	r3, [pc, #368]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001af6:	edc3 7a00 	vstr	s15, [r3]
		if(Duty_test_P<1){Duty_test_P=1;}if(Duty_test_P>MAX_DUTY){Duty_test_P=MAX_DUTY;}
 8001afa:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001afc:	edd3 7a00 	vldr	s15, [r3]
 8001b00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0c:	d503      	bpl.n	8001b16 <HAL_TIM_PeriodElapsedCallback+0x12e>
 8001b0e:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b10:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	4b54      	ldr	r3, [pc, #336]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001c5c <HAL_TIM_PeriodElapsedCallback+0x274>
 8001b20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b28:	dd02      	ble.n	8001b30 <HAL_TIM_PeriodElapsedCallback+0x148>
 8001b2a:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b2c:	4a4c      	ldr	r2, [pc, #304]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b2e:	601a      	str	r2, [r3, #0]

//D
		D = (E-prev_E);
 8001b30:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	4b45      	ldr	r3, [pc, #276]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001b38:	edd3 7a00 	vldr	s15, [r3]
 8001b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b40:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001b42:	edc3 7a00 	vstr	s15, [r3]
		Duty_test_D=k_D*D;
 8001b46:	4b4a      	ldr	r3, [pc, #296]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001b48:	ed93 7a00 	vldr	s14, [r3]
 8001b4c:	4b47      	ldr	r3, [pc, #284]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001b4e:	edd3 7a00 	vldr	s15, [r3]
 8001b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b56:	4b47      	ldr	r3, [pc, #284]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001b58:	edc3 7a00 	vstr	s15, [r3]
		if(Duty_test_D<-900){Duty_test_D=-900;}if(Duty_test_D>MAX_DUTY){Duty_test_D=MAX_DUTY;}
 8001b5c:	4b45      	ldr	r3, [pc, #276]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8001c78 <HAL_TIM_PeriodElapsedCallback+0x290>
 8001b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	d502      	bpl.n	8001b76 <HAL_TIM_PeriodElapsedCallback+0x18e>
 8001b70:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001b72:	4a42      	ldr	r2, [pc, #264]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	4b3f      	ldr	r3, [pc, #252]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001b78:	edd3 7a00 	vldr	s15, [r3]
 8001b7c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8001c5c <HAL_TIM_PeriodElapsedCallback+0x274>
 8001b80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b88:	dd02      	ble.n	8001b90 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001b8c:	4a34      	ldr	r2, [pc, #208]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b8e:	601a      	str	r2, [r3, #0]

		Duty_test=(int)(Duty_test_P+Duty_test_I+Duty_test_D);
 8001b90:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b92:	ed93 7a00 	vldr	s14, [r3]
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b98:	edd3 7a00 	vldr	s15, [r3]
 8001b9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba0:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001ba2:	edd3 7a00 	vldr	s15, [r3]
 8001ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001baa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb2:	4b33      	ldr	r3, [pc, #204]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bb4:	edc3 7a00 	vstr	s15, [r3]

		prev_E=E;
 8001bb8:	4b22      	ldr	r3, [pc, #136]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001bbe:	6013      	str	r3, [r2, #0]
		prev_I=I;
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001bc6:	6013      	str	r3, [r2, #0]

	if(Duty_test<1){Duty_test=1;}if(Duty_test>MAX_DUTY){Duty_test=MAX_DUTY;}
 8001bc8:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	d503      	bpl.n	8001be4 <HAL_TIM_PeriodElapsedCallback+0x1fc>
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bde:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001be6:	edd3 7a00 	vldr	s15, [r3]
 8001bea:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001c5c <HAL_TIM_PeriodElapsedCallback+0x274>
 8001bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf6:	dd02      	ble.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x216>
 8001bf8:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bfa:	4a19      	ldr	r2, [pc, #100]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001bfc:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,Duty_test);
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c00:	edd3 7a00 	vldr	s15, [r3]
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c0c:	ee17 2a90 	vmov	r2, s15
 8001c10:	635a      	str	r2, [r3, #52]	; 0x34
	}
//	printf("%f %f\n\r",total_time,rot_freq);
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40000c00 	.word	0x40000c00
 8001c24:	200002cc 	.word	0x200002cc
 8001c28:	20000270 	.word	0x20000270
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000278 	.word	0x20000278
 8001c34:	200002c8 	.word	0x200002c8
 8001c38:	20000318 	.word	0x20000318
 8001c3c:	20000338 	.word	0x20000338
 8001c40:	20000334 	.word	0x20000334
 8001c44:	2000032c 	.word	0x2000032c
 8001c48:	20000280 	.word	0x20000280
 8001c4c:	20000320 	.word	0x20000320
 8001c50:	20000330 	.word	0x20000330
 8001c54:	20000008 	.word	0x20000008
 8001c58:	2000027c 	.word	0x2000027c
 8001c5c:	461ab000 	.word	0x461ab000
 8001c60:	461ab000 	.word	0x461ab000
 8001c64:	20000004 	.word	0x20000004
 8001c68:	2000031c 	.word	0x2000031c
 8001c6c:	20000268 	.word	0x20000268
 8001c70:	2000000c 	.word	0x2000000c
 8001c74:	20000328 	.word	0x20000328
 8001c78:	c4610000 	.word	0xc4610000
 8001c7c:	c4610000 	.word	0xc4610000
 8001c80:	2000033c 	.word	0x2000033c
 8001c84:	200003fc 	.word	0x200003fc

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001c90:	e7fe      	b.n	8001c90 <Error_Handler+0x8>
	...

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <HAL_MspInit+0x44>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a0e      	ldr	r2, [pc, #56]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <HAL_MspInit+0x44>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	4a08      	ldr	r2, [pc, #32]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cbe:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <HAL_MspInit+0x44>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 fcb0 	bl	800268c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f001 f861 	bl	8002dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
	...

08001d40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d44:	4802      	ldr	r0, [pc, #8]	; (8001d50 <TIM3_IRQHandler+0x10>)
 8001d46:	f003 fa13 	bl	8005170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	200003fc 	.word	0x200003fc

08001d54 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d58:	4802      	ldr	r0, [pc, #8]	; (8001d64 <TIM4_IRQHandler+0x10>)
 8001d5a:	f003 fa09 	bl	8005170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000364 	.word	0x20000364

08001d68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d6c:	4802      	ldr	r0, [pc, #8]	; (8001d78 <USART3_IRQHandler+0x10>)
 8001d6e:	f004 fab5 	bl	80062dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000494 	.word	0x20000494

08001d7c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d80:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d84:	f001 f83a 	bl	8002dfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d90:	4802      	ldr	r0, [pc, #8]	; (8001d9c <TIM5_IRQHandler+0x10>)
 8001d92:	f003 f9ed 	bl	8005170 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200003b0 	.word	0x200003b0

08001da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
	return 1;
 8001da4:	2301      	movs	r3, #1
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_kill>:

int _kill(int pid, int sig)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dba:	f005 ff6d 	bl	8007c98 <__errno>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2216      	movs	r2, #22
 8001dc2:	601a      	str	r2, [r3, #0]
	return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <_exit>:

void _exit (int status)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ffe7 	bl	8001db0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001de2:	e7fe      	b.n	8001de2 <_exit+0x12>

08001de4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	e00a      	b.n	8001e0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001df6:	f3af 8000 	nop.w
 8001dfa:	4601      	mov	r1, r0
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	b2ca      	uxtb	r2, r1
 8001e04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697a      	ldr	r2, [r7, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	dbf0      	blt.n	8001df6 <_read+0x12>
	}

return len;
 8001e14:	687b      	ldr	r3, [r7, #4]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <_close>:
	}
	return len;
}

int _close(int file)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
	return -1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e46:	605a      	str	r2, [r3, #4]
	return 0;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <_isatty>:

int _isatty(int file)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
	return 0;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <_sbrk+0x5c>)
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <_sbrk+0x60>)
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e9c:	4b13      	ldr	r3, [pc, #76]	; (8001eec <_sbrk+0x64>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d102      	bne.n	8001eaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <_sbrk+0x64>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <_sbrk+0x68>)
 8001ea8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb8:	f005 feee 	bl	8007c98 <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec6:	e009      	b.n	8001edc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ece:	4b07      	ldr	r3, [pc, #28]	; (8001eec <_sbrk+0x64>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	4a05      	ldr	r2, [pc, #20]	; (8001eec <_sbrk+0x64>)
 8001ed8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eda:	68fb      	ldr	r3, [r7, #12]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20040000 	.word	0x20040000
 8001ee8:	00000400 	.word	0x00000400
 8001eec:	20000210 	.word	0x20000210
 8001ef0:	20000930 	.word	0x20000930

08001ef4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <SystemInit+0x20>)
 8001efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <SystemInit+0x20>)
 8001f00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]
 8001f34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f36:	4b1e      	ldr	r3, [pc, #120]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f3c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108;
 8001f3e:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f40:	226c      	movs	r2, #108	; 0x6c
 8001f42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f4a:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f58:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f5e:	4814      	ldr	r0, [pc, #80]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f60:	f002 fd16 	bl	8004990 <HAL_TIM_Base_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f6a:	f7ff fe8d 	bl	8001c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f7c:	f003 fb2c 	bl	80055d8 <HAL_TIM_ConfigClockSource>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001f86:	f7ff fe7f 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	4806      	ldr	r0, [pc, #24]	; (8001fb0 <MX_TIM2_Init+0x98>)
 8001f98:	f003 ffc4 	bl	8005f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fa2:	f7ff fe71 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000448 	.word	0x20000448

08001fb4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08e      	sub	sp, #56	; 0x38
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <MX_TIM3_Init+0xe8>)
 8001fe8:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <MX_TIM3_Init+0xec>)
 8001fea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001fec:	4b2b      	ldr	r3, [pc, #172]	; (800209c <MX_TIM3_Init+0xe8>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <MX_TIM3_Init+0xe8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <MX_TIM3_Init+0xe8>)
 8001ffa:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ffe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002000:	4b26      	ldr	r3, [pc, #152]	; (800209c <MX_TIM3_Init+0xe8>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002006:	4b25      	ldr	r3, [pc, #148]	; (800209c <MX_TIM3_Init+0xe8>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800200c:	4823      	ldr	r0, [pc, #140]	; (800209c <MX_TIM3_Init+0xe8>)
 800200e:	f002 fcbf 	bl	8004990 <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002018:	f7ff fe36 	bl	8001c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002026:	4619      	mov	r1, r3
 8002028:	481c      	ldr	r0, [pc, #112]	; (800209c <MX_TIM3_Init+0xe8>)
 800202a:	f003 fad5 	bl	80055d8 <HAL_TIM_ConfigClockSource>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002034:	f7ff fe28 	bl	8001c88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002038:	4818      	ldr	r0, [pc, #96]	; (800209c <MX_TIM3_Init+0xe8>)
 800203a:	f002 fde9 	bl	8004c10 <HAL_TIM_PWM_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002044:	f7ff fe20 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	4811      	ldr	r0, [pc, #68]	; (800209c <MX_TIM3_Init+0xe8>)
 8002058:	f003 ff64 	bl	8005f24 <HAL_TIMEx_MasterConfigSynchronization>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002062:	f7ff fe11 	bl	8001c88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002066:	2360      	movs	r3, #96	; 0x60
 8002068:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800206e:	2300      	movs	r3, #0
 8002070:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002072:	2300      	movs	r3, #0
 8002074:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002076:	463b      	mov	r3, r7
 8002078:	2200      	movs	r2, #0
 800207a:	4619      	mov	r1, r3
 800207c:	4807      	ldr	r0, [pc, #28]	; (800209c <MX_TIM3_Init+0xe8>)
 800207e:	f003 f997 	bl	80053b0 <HAL_TIM_PWM_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002088:	f7ff fdfe 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800208c:	4803      	ldr	r0, [pc, #12]	; (800209c <MX_TIM3_Init+0xe8>)
 800208e:	f000 f94f 	bl	8002330 <HAL_TIM_MspPostInit>

}
 8002092:	bf00      	nop
 8002094:	3738      	adds	r7, #56	; 0x38
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	200003fc 	.word	0x200003fc
 80020a0:	40000400 	.word	0x40000400

080020a4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	; 0x30
 80020a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020aa:	f107 030c 	add.w	r3, r7, #12
 80020ae:	2224      	movs	r2, #36	; 0x24
 80020b0:	2100      	movs	r1, #0
 80020b2:	4618      	mov	r0, r3
 80020b4:	f005 fe1a 	bl	8007cec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b8:	463b      	mov	r3, r7
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	605a      	str	r2, [r3, #4]
 80020c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020c2:	4b21      	ldr	r3, [pc, #132]	; (8002148 <MX_TIM4_Init+0xa4>)
 80020c4:	4a21      	ldr	r2, [pc, #132]	; (800214c <MX_TIM4_Init+0xa8>)
 80020c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020c8:	4b1f      	ldr	r3, [pc, #124]	; (8002148 <MX_TIM4_Init+0xa4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ce:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <MX_TIM4_Init+0xa4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020d4:	4b1c      	ldr	r3, [pc, #112]	; (8002148 <MX_TIM4_Init+0xa4>)
 80020d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020dc:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <MX_TIM4_Init+0xa4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <MX_TIM4_Init+0xa4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020e8:	2303      	movs	r3, #3
 80020ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80020ec:	2302      	movs	r3, #2
 80020ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020f0:	2301      	movs	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020fc:	2300      	movs	r3, #0
 80020fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002100:	2301      	movs	r3, #1
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002104:	2300      	movs	r3, #0
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	4619      	mov	r1, r3
 8002112:	480d      	ldr	r0, [pc, #52]	; (8002148 <MX_TIM4_Init+0xa4>)
 8002114:	f002 fed8 	bl	8004ec8 <HAL_TIM_Encoder_Init>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800211e:	f7ff fdb3 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800212a:	463b      	mov	r3, r7
 800212c:	4619      	mov	r1, r3
 800212e:	4806      	ldr	r0, [pc, #24]	; (8002148 <MX_TIM4_Init+0xa4>)
 8002130:	f003 fef8 	bl	8005f24 <HAL_TIMEx_MasterConfigSynchronization>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800213a:	f7ff fda5 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800213e:	bf00      	nop
 8002140:	3730      	adds	r7, #48	; 0x30
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000364 	.word	0x20000364
 800214c:	40000800 	.word	0x40000800

08002150 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b088      	sub	sp, #32
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002156:	f107 0310 	add.w	r3, r7, #16
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	605a      	str	r2, [r3, #4]
 8002160:	609a      	str	r2, [r3, #8]
 8002162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <MX_TIM5_Init+0x94>)
 8002170:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <MX_TIM5_Init+0x98>)
 8002172:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1000;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <MX_TIM5_Init+0x94>)
 8002176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800217a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217c:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <MX_TIM5_Init+0x94>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 108000;
 8002182:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <MX_TIM5_Init+0x94>)
 8002184:	4a19      	ldr	r2, [pc, #100]	; (80021ec <MX_TIM5_Init+0x9c>)
 8002186:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002188:	4b16      	ldr	r3, [pc, #88]	; (80021e4 <MX_TIM5_Init+0x94>)
 800218a:	2200      	movs	r2, #0
 800218c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218e:	4b15      	ldr	r3, [pc, #84]	; (80021e4 <MX_TIM5_Init+0x94>)
 8002190:	2200      	movs	r2, #0
 8002192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002194:	4813      	ldr	r0, [pc, #76]	; (80021e4 <MX_TIM5_Init+0x94>)
 8002196:	f002 fbfb 	bl	8004990 <HAL_TIM_Base_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80021a0:	f7ff fd72 	bl	8001c88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	4619      	mov	r1, r3
 80021b0:	480c      	ldr	r0, [pc, #48]	; (80021e4 <MX_TIM5_Init+0x94>)
 80021b2:	f003 fa11 	bl	80055d8 <HAL_TIM_ConfigClockSource>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d001      	beq.n	80021c0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80021bc:	f7ff fd64 	bl	8001c88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c0:	2300      	movs	r3, #0
 80021c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	; (80021e4 <MX_TIM5_Init+0x94>)
 80021ce:	f003 fea9 	bl	8005f24 <HAL_TIMEx_MasterConfigSynchronization>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80021d8:	f7ff fd56 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021dc:	bf00      	nop
 80021de:	3720      	adds	r7, #32
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200003b0 	.word	0x200003b0
 80021e8:	40000c00 	.word	0x40000c00
 80021ec:	0001a5e0 	.word	0x0001a5e0

080021f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002200:	d10c      	bne.n	800221c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <HAL_TIM_Base_MspInit+0x9c>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a21      	ldr	r2, [pc, #132]	; (800228c <HAL_TIM_Base_MspInit+0x9c>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <HAL_TIM_Base_MspInit+0x9c>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800221a:	e032      	b.n	8002282 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <HAL_TIM_Base_MspInit+0xa0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d114      	bne.n	8002250 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002226:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_TIM_Base_MspInit+0x9c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a18      	ldr	r2, [pc, #96]	; (800228c <HAL_TIM_Base_MspInit+0x9c>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b16      	ldr	r3, [pc, #88]	; (800228c <HAL_TIM_Base_MspInit+0x9c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	201d      	movs	r0, #29
 8002244:	f000 fb41 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002248:	201d      	movs	r0, #29
 800224a:	f000 fb5a 	bl	8002902 <HAL_NVIC_EnableIRQ>
}
 800224e:	e018      	b.n	8002282 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <HAL_TIM_Base_MspInit+0xa4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d113      	bne.n	8002282 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_TIM_Base_MspInit+0x9c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_TIM_Base_MspInit+0x9c>)
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_TIM_Base_MspInit+0x9c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	2032      	movs	r0, #50	; 0x32
 8002278:	f000 fb27 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800227c:	2032      	movs	r0, #50	; 0x32
 800227e:	f000 fb40 	bl	8002902 <HAL_NVIC_EnableIRQ>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40000400 	.word	0x40000400
 8002294:	40000c00 	.word	0x40000c00

08002298 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	; 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_TIM_Encoder_MspInit+0x8c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d130      	bne.n	800231c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_TIM_Encoder_MspInit+0x90>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <HAL_TIM_Encoder_MspInit+0x90>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_TIM_Encoder_MspInit+0x90>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <HAL_TIM_Encoder_MspInit+0x90>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a14      	ldr	r2, [pc, #80]	; (8002328 <HAL_TIM_Encoder_MspInit+0x90>)
 80022d8:	f043 0308 	orr.w	r3, r3, #8
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_TIM_Encoder_MspInit+0x90>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80022ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f0:	2302      	movs	r3, #2
 80022f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f8:	2300      	movs	r3, #0
 80022fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80022fc:	2302      	movs	r3, #2
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	4809      	ldr	r0, [pc, #36]	; (800232c <HAL_TIM_Encoder_MspInit+0x94>)
 8002308:	f000 fba8 	bl	8002a5c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	201e      	movs	r0, #30
 8002312:	f000 fada 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002316:	201e      	movs	r0, #30
 8002318:	f000 faf3 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800231c:	bf00      	nop
 800231e:	3728      	adds	r7, #40	; 0x28
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40000800 	.word	0x40000800
 8002328:	40023800 	.word	0x40023800
 800232c:	40020c00 	.word	0x40020c00

08002330 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a11      	ldr	r2, [pc, #68]	; (8002394 <HAL_TIM_MspPostInit+0x64>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d11b      	bne.n	800238a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <HAL_TIM_MspPostInit+0x68>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a10      	ldr	r2, [pc, #64]	; (8002398 <HAL_TIM_MspPostInit+0x68>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_TIM_MspPostInit+0x68>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800236a:	2340      	movs	r3, #64	; 0x40
 800236c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236e:	2302      	movs	r3, #2
 8002370:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800237a:	2302      	movs	r3, #2
 800237c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	4619      	mov	r1, r3
 8002384:	4805      	ldr	r0, [pc, #20]	; (800239c <HAL_TIM_MspPostInit+0x6c>)
 8002386:	f000 fb69 	bl	8002a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800238a:	bf00      	nop
 800238c:	3720      	adds	r7, #32
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40000400 	.word	0x40000400
 8002398:	40023800 	.word	0x40023800
 800239c:	40020000 	.word	0x40020000

080023a0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023a4:	4b14      	ldr	r3, [pc, #80]	; (80023f8 <MX_USART3_UART_Init+0x58>)
 80023a6:	4a15      	ldr	r2, [pc, #84]	; (80023fc <MX_USART3_UART_Init+0x5c>)
 80023a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <MX_USART3_UART_Init+0x58>)
 80023ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <MX_USART3_UART_Init+0x58>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <MX_USART3_UART_Init+0x58>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023be:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <MX_USART3_UART_Init+0x58>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <MX_USART3_UART_Init+0x58>)
 80023c6:	220c      	movs	r2, #12
 80023c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <MX_USART3_UART_Init+0x58>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <MX_USART3_UART_Init+0x58>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023d6:	4b08      	ldr	r3, [pc, #32]	; (80023f8 <MX_USART3_UART_Init+0x58>)
 80023d8:	2200      	movs	r2, #0
 80023da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <MX_USART3_UART_Init+0x58>)
 80023de:	2200      	movs	r2, #0
 80023e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023e2:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_USART3_UART_Init+0x58>)
 80023e4:	f003 fe4a 	bl	800607c <HAL_UART_Init>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80023ee:	f7ff fc4b 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000494 	.word	0x20000494
 80023fc:	40004800 	.word	0x40004800

08002400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <HAL_UART_MspInit+0x8c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d130      	bne.n	8002484 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002422:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_UART_MspInit+0x90>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	4a1a      	ldr	r2, [pc, #104]	; (8002490 <HAL_UART_MspInit+0x90>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242c:	6413      	str	r3, [r2, #64]	; 0x40
 800242e:	4b18      	ldr	r3, [pc, #96]	; (8002490 <HAL_UART_MspInit+0x90>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002436:	613b      	str	r3, [r7, #16]
 8002438:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <HAL_UART_MspInit+0x90>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a14      	ldr	r2, [pc, #80]	; (8002490 <HAL_UART_MspInit+0x90>)
 8002440:	f043 0308 	orr.w	r3, r3, #8
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_UART_MspInit+0x90>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002452:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002460:	2303      	movs	r3, #3
 8002462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002464:	2307      	movs	r3, #7
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	4619      	mov	r1, r3
 800246e:	4809      	ldr	r0, [pc, #36]	; (8002494 <HAL_UART_MspInit+0x94>)
 8002470:	f000 faf4 	bl	8002a5c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002474:	2200      	movs	r2, #0
 8002476:	2100      	movs	r1, #0
 8002478:	2027      	movs	r0, #39	; 0x27
 800247a:	f000 fa26 	bl	80028ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800247e:	2027      	movs	r0, #39	; 0x27
 8002480:	f000 fa3f 	bl	8002902 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40004800 	.word	0x40004800
 8002490:	40023800 	.word	0x40023800
 8002494:	40020c00 	.word	0x40020c00

08002498 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800249c:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800249e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80024a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80024a4:	4b12      	ldr	r3, [pc, #72]	; (80024f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024a6:	2206      	movs	r2, #6
 80024a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80024b0:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024b2:	2202      	movs	r2, #2
 80024b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80024bc:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024be:	2200      	movs	r2, #0
 80024c0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80024c2:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80024c8:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80024ce:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024da:	4805      	ldr	r0, [pc, #20]	; (80024f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024dc:	f001 f8bf 	bl	800365e <HAL_PCD_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80024e6:	f7ff fbcf 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000518 	.word	0x20000518

080024f4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002514:	d141      	bne.n	800259a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_PCD_MspInit+0xb0>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251a:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <HAL_PCD_MspInit+0xb0>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	; 0x30
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <HAL_PCD_MspInit+0xb0>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800252e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002540:	230a      	movs	r3, #10
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4619      	mov	r1, r3
 800254a:	4817      	ldr	r0, [pc, #92]	; (80025a8 <HAL_PCD_MspInit+0xb4>)
 800254c:	f000 fa86 	bl	8002a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002556:	2300      	movs	r3, #0
 8002558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255a:	2300      	movs	r3, #0
 800255c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800255e:	f107 0314 	add.w	r3, r7, #20
 8002562:	4619      	mov	r1, r3
 8002564:	4810      	ldr	r0, [pc, #64]	; (80025a8 <HAL_PCD_MspInit+0xb4>)
 8002566:	f000 fa79 	bl	8002a5c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <HAL_PCD_MspInit+0xb0>)
 800256c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256e:	4a0d      	ldr	r2, [pc, #52]	; (80025a4 <HAL_PCD_MspInit+0xb0>)
 8002570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002574:	6353      	str	r3, [r2, #52]	; 0x34
 8002576:	4b0b      	ldr	r3, [pc, #44]	; (80025a4 <HAL_PCD_MspInit+0xb0>)
 8002578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_PCD_MspInit+0xb0>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <HAL_PCD_MspInit+0xb0>)
 8002588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_PCD_MspInit+0xb0>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800259a:	bf00      	nop
 800259c:	3728      	adds	r7, #40	; 0x28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020000 	.word	0x40020000

080025ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025b2:	490e      	ldr	r1, [pc, #56]	; (80025ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025b4:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0b      	ldr	r2, [pc, #44]	; (80025f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c8:	4c0b      	ldr	r4, [pc, #44]	; (80025f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025d6:	f7ff fc8d 	bl	8001ef4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025da:	f005 fb63 	bl	8007ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025de:	f7fe ff11 	bl	8001404 <main>
  bx  lr    
 80025e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025e4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80025f0:	0800aef4 	.word	0x0800aef4
  ldr r2, =_sbss
 80025f4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80025f8:	20000930 	.word	0x20000930

080025fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC_IRQHandler>
	...

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8002604:	4b08      	ldr	r3, [pc, #32]	; (8002628 <HAL_Init+0x28>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a07      	ldr	r2, [pc, #28]	; (8002628 <HAL_Init+0x28>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002610:	2003      	movs	r0, #3
 8002612:	f000 f94f 	bl	80028b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002616:	2000      	movs	r0, #0
 8002618:	f000 f808 	bl	800262c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800261c:	f7ff fb3a 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023c00 	.word	0x40023c00

0800262c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_InitTick+0x54>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_InitTick+0x58>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4619      	mov	r1, r3
 800263e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002642:	fbb3 f3f1 	udiv	r3, r3, r1
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f967 	bl	800291e <HAL_SYSTICK_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e00e      	b.n	8002678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b0f      	cmp	r3, #15
 800265e:	d80a      	bhi.n	8002676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002660:	2200      	movs	r2, #0
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	f04f 30ff 	mov.w	r0, #4294967295
 8002668:	f000 f92f 	bl	80028ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800266c:	4a06      	ldr	r2, [pc, #24]	; (8002688 <HAL_InitTick+0x5c>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	e000      	b.n	8002678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20000014 	.word	0x20000014
 8002684:	2000001c 	.word	0x2000001c
 8002688:	20000018 	.word	0x20000018

0800268c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_IncTick+0x20>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_IncTick+0x24>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4413      	add	r3, r2
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_IncTick+0x24>)
 800269e:	6013      	str	r3, [r2, #0]
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	2000001c 	.word	0x2000001c
 80026b0:	2000091c 	.word	0x2000091c

080026b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  return uwTick;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <HAL_GetTick+0x14>)
 80026ba:	681b      	ldr	r3, [r3, #0]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	2000091c 	.word	0x2000091c

080026cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff ffee 	bl	80026b4 <HAL_GetTick>
 80026d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e4:	d005      	beq.n	80026f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_Delay+0x44>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026f2:	bf00      	nop
 80026f4:	f7ff ffde 	bl	80026b4 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	429a      	cmp	r2, r3
 8002702:	d8f7      	bhi.n	80026f4 <HAL_Delay+0x28>
  {
  }
}
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000001c 	.word	0x2000001c

08002714 <__NVIC_SetPriorityGrouping>:
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <__NVIC_SetPriorityGrouping+0x40>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	4313      	orrs	r3, r2
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <__NVIC_SetPriorityGrouping+0x40>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00
 8002758:	05fa0000 	.word	0x05fa0000

0800275c <__NVIC_GetPriorityGrouping>:
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_EnableIRQ>:
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db0b      	blt.n	80027a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <__NVIC_EnableIRQ+0x38>)
 8002792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2001      	movs	r0, #1
 800279a:	fa00 f202 	lsl.w	r2, r0, r2
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_SetPriority>:
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	; (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	79fb      	ldrb	r3, [r7, #7]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <SysTick_Config>:
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3b01      	subs	r3, #1
 800287c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002880:	d301      	bcc.n	8002886 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002882:	2301      	movs	r3, #1
 8002884:	e00f      	b.n	80028a6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002886:	4a0a      	ldr	r2, [pc, #40]	; (80028b0 <SysTick_Config+0x40>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288e:	210f      	movs	r1, #15
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f7ff ff8e 	bl	80027b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <SysTick_Config+0x40>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289e:	4b04      	ldr	r3, [pc, #16]	; (80028b0 <SysTick_Config+0x40>)
 80028a0:	2207      	movs	r2, #7
 80028a2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ff29 	bl	8002714 <__NVIC_SetPriorityGrouping>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028dc:	f7ff ff3e 	bl	800275c <__NVIC_GetPriorityGrouping>
 80028e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68b9      	ldr	r1, [r7, #8]
 80028e6:	6978      	ldr	r0, [r7, #20]
 80028e8:	f7ff ff8e 	bl	8002808 <NVIC_EncodePriority>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff5d 	bl	80027b4 <__NVIC_SetPriority>
}
 80028fa:	bf00      	nop
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff ff31 	bl	8002778 <__NVIC_EnableIRQ>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffa2 	bl	8002870 <SysTick_Config>
 800292c:	4603      	mov	r3, r0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002942:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002944:	f7ff feb6 	bl	80026b4 <HAL_GetTick>
 8002948:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d008      	beq.n	8002968 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2280      	movs	r2, #128	; 0x80
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e052      	b.n	8002a0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0216 	bic.w	r2, r2, #22
 8002976:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002986:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <HAL_DMA_Abort+0x62>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0208 	bic.w	r2, r2, #8
 80029a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b8:	e013      	b.n	80029e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029ba:	f7ff fe7b 	bl	80026b4 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b05      	cmp	r3, #5
 80029c6:	d90c      	bls.n	80029e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2220      	movs	r2, #32
 80029cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2203      	movs	r2, #3
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e015      	b.n	8002a0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1e4      	bne.n	80029ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	223f      	movs	r2, #63	; 0x3f
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d004      	beq.n	8002a34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e00c      	b.n	8002a4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2205      	movs	r2, #5
 8002a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a66:	2300      	movs	r3, #0
 8002a68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	e169      	b.n	8002d50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	f040 8158 	bne.w	8002d4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d005      	beq.n	8002ab2 <HAL_GPIO_Init+0x56>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d130      	bne.n	8002b14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 0201 	and.w	r2, r3, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d017      	beq.n	8002b50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0303 	and.w	r3, r3, #3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d123      	bne.n	8002ba4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	08da      	lsrs	r2, r3, #3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3208      	adds	r2, #8
 8002b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	220f      	movs	r2, #15
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	08da      	lsrs	r2, r3, #3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3208      	adds	r2, #8
 8002b9e:	69b9      	ldr	r1, [r7, #24]
 8002ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	2203      	movs	r2, #3
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f003 0203 	and.w	r2, r3, #3
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80b2 	beq.w	8002d4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	4b60      	ldr	r3, [pc, #384]	; (8002d68 <HAL_GPIO_Init+0x30c>)
 8002be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bea:	4a5f      	ldr	r2, [pc, #380]	; (8002d68 <HAL_GPIO_Init+0x30c>)
 8002bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf2:	4b5d      	ldr	r3, [pc, #372]	; (8002d68 <HAL_GPIO_Init+0x30c>)
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bfe:	4a5b      	ldr	r2, [pc, #364]	; (8002d6c <HAL_GPIO_Init+0x310>)
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	089b      	lsrs	r3, r3, #2
 8002c04:	3302      	adds	r3, #2
 8002c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	220f      	movs	r2, #15
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a52      	ldr	r2, [pc, #328]	; (8002d70 <HAL_GPIO_Init+0x314>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d02b      	beq.n	8002c82 <HAL_GPIO_Init+0x226>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a51      	ldr	r2, [pc, #324]	; (8002d74 <HAL_GPIO_Init+0x318>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d025      	beq.n	8002c7e <HAL_GPIO_Init+0x222>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a50      	ldr	r2, [pc, #320]	; (8002d78 <HAL_GPIO_Init+0x31c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d01f      	beq.n	8002c7a <HAL_GPIO_Init+0x21e>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a4f      	ldr	r2, [pc, #316]	; (8002d7c <HAL_GPIO_Init+0x320>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d019      	beq.n	8002c76 <HAL_GPIO_Init+0x21a>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a4e      	ldr	r2, [pc, #312]	; (8002d80 <HAL_GPIO_Init+0x324>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0x216>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <HAL_GPIO_Init+0x328>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d00d      	beq.n	8002c6e <HAL_GPIO_Init+0x212>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4c      	ldr	r2, [pc, #304]	; (8002d88 <HAL_GPIO_Init+0x32c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d007      	beq.n	8002c6a <HAL_GPIO_Init+0x20e>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4b      	ldr	r2, [pc, #300]	; (8002d8c <HAL_GPIO_Init+0x330>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d101      	bne.n	8002c66 <HAL_GPIO_Init+0x20a>
 8002c62:	2307      	movs	r3, #7
 8002c64:	e00e      	b.n	8002c84 <HAL_GPIO_Init+0x228>
 8002c66:	2308      	movs	r3, #8
 8002c68:	e00c      	b.n	8002c84 <HAL_GPIO_Init+0x228>
 8002c6a:	2306      	movs	r3, #6
 8002c6c:	e00a      	b.n	8002c84 <HAL_GPIO_Init+0x228>
 8002c6e:	2305      	movs	r3, #5
 8002c70:	e008      	b.n	8002c84 <HAL_GPIO_Init+0x228>
 8002c72:	2304      	movs	r3, #4
 8002c74:	e006      	b.n	8002c84 <HAL_GPIO_Init+0x228>
 8002c76:	2303      	movs	r3, #3
 8002c78:	e004      	b.n	8002c84 <HAL_GPIO_Init+0x228>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	e002      	b.n	8002c84 <HAL_GPIO_Init+0x228>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_GPIO_Init+0x228>
 8002c82:	2300      	movs	r3, #0
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	f002 0203 	and.w	r2, r2, #3
 8002c8a:	0092      	lsls	r2, r2, #2
 8002c8c:	4093      	lsls	r3, r2
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c94:	4935      	ldr	r1, [pc, #212]	; (8002d6c <HAL_GPIO_Init+0x310>)
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	089b      	lsrs	r3, r3, #2
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <HAL_GPIO_Init+0x334>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cc6:	4a32      	ldr	r2, [pc, #200]	; (8002d90 <HAL_GPIO_Init+0x334>)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ccc:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <HAL_GPIO_Init+0x334>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cf0:	4a27      	ldr	r2, [pc, #156]	; (8002d90 <HAL_GPIO_Init+0x334>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <HAL_GPIO_Init+0x334>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4013      	ands	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <HAL_GPIO_Init+0x334>)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d20:	4b1b      	ldr	r3, [pc, #108]	; (8002d90 <HAL_GPIO_Init+0x334>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d44:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <HAL_GPIO_Init+0x334>)
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	61fb      	str	r3, [r7, #28]
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b0f      	cmp	r3, #15
 8002d54:	f67f ae92 	bls.w	8002a7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	3724      	adds	r7, #36	; 0x24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40020400 	.word	0x40020400
 8002d78:	40020800 	.word	0x40020800
 8002d7c:	40020c00 	.word	0x40020c00
 8002d80:	40021000 	.word	0x40021000
 8002d84:	40021400 	.word	0x40021400
 8002d88:	40021800 	.word	0x40021800
 8002d8c:	40021c00 	.word	0x40021c00
 8002d90:	40013c00 	.word	0x40013c00

08002d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	807b      	strh	r3, [r7, #2]
 8002da0:	4613      	mov	r3, r2
 8002da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da4:	787b      	ldrb	r3, [r7, #1]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002db0:	e003      	b.n	8002dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	041a      	lsls	r2, r3, #16
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	619a      	str	r2, [r3, #24]
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dd8:	887a      	ldrh	r2, [r7, #2]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	041a      	lsls	r2, r3, #16
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	400b      	ands	r3, r1
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	619a      	str	r2, [r3, #24]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	88fb      	ldrh	r3, [r7, #6]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e12:	4a05      	ldr	r2, [pc, #20]	; (8002e28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fe fc30 	bl	8001680 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e07f      	b.n	8002f3e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fe fa4c 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	e006      	b.n	8002eb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002eb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d104      	bne.n	8002ec6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ec4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6859      	ldr	r1, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <HAL_I2C_Init+0x11c>)
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ee4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69d9      	ldr	r1, [r3, #28]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2220      	movs	r2, #32
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	02008000 	.word	0x02008000

08002f4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607a      	str	r2, [r7, #4]
 8002f56:	461a      	mov	r2, r3
 8002f58:	460b      	mov	r3, r1
 8002f5a:	817b      	strh	r3, [r7, #10]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b20      	cmp	r3, #32
 8002f6a:	f040 80da 	bne.w	8003122 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_I2C_Master_Transmit+0x30>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e0d3      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f84:	f7ff fb96 	bl	80026b4 <HAL_GetTick>
 8002f88:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2319      	movs	r3, #25
 8002f90:	2201      	movs	r2, #1
 8002f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f8f0 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0be      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2221      	movs	r2, #33	; 0x21
 8002faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	893a      	ldrh	r2, [r7, #8]
 8002fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	2bff      	cmp	r3, #255	; 0xff
 8002fd6:	d90e      	bls.n	8002ff6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	22ff      	movs	r2, #255	; 0xff
 8002fdc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	8979      	ldrh	r1, [r7, #10]
 8002fe6:	4b51      	ldr	r3, [pc, #324]	; (800312c <HAL_I2C_Master_Transmit+0x1e0>)
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fa6c 	bl	80034cc <I2C_TransferConfig>
 8002ff4:	e06c      	b.n	80030d0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	b2da      	uxtb	r2, r3
 8003006:	8979      	ldrh	r1, [r7, #10]
 8003008:	4b48      	ldr	r3, [pc, #288]	; (800312c <HAL_I2C_Master_Transmit+0x1e0>)
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fa5b 	bl	80034cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003016:	e05b      	b.n	80030d0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	6a39      	ldr	r1, [r7, #32]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f8ed 	bl	80031fc <I2C_WaitOnTXISFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e07b      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d034      	beq.n	80030d0 <HAL_I2C_Master_Transmit+0x184>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800306a:	2b00      	cmp	r3, #0
 800306c:	d130      	bne.n	80030d0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	2200      	movs	r2, #0
 8003076:	2180      	movs	r1, #128	; 0x80
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f87f 	bl	800317c <I2C_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e04d      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2bff      	cmp	r3, #255	; 0xff
 8003090:	d90e      	bls.n	80030b0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	22ff      	movs	r2, #255	; 0xff
 8003096:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800309c:	b2da      	uxtb	r2, r3
 800309e:	8979      	ldrh	r1, [r7, #10]
 80030a0:	2300      	movs	r3, #0
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fa0f 	bl	80034cc <I2C_TransferConfig>
 80030ae:	e00f      	b.n	80030d0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	8979      	ldrh	r1, [r7, #10]
 80030c2:	2300      	movs	r3, #0
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f9fe 	bl	80034cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d19e      	bne.n	8003018 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	6a39      	ldr	r1, [r7, #32]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f8cc 	bl	800327c <I2C_WaitOnSTOPFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e01a      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2220      	movs	r2, #32
 80030f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b0b      	ldr	r3, [pc, #44]	; (8003130 <HAL_I2C_Master_Transmit+0x1e4>)
 8003102:	400b      	ands	r3, r1
 8003104:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	e000      	b.n	8003124 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003122:	2302      	movs	r3, #2
  }
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	80002000 	.word	0x80002000
 8003130:	fe00e800 	.word	0xfe00e800

08003134 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d103      	bne.n	8003152 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2200      	movs	r2, #0
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	2b01      	cmp	r3, #1
 800315e:	d007      	beq.n	8003170 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	619a      	str	r2, [r3, #24]
  }
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	603b      	str	r3, [r7, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800318c:	e022      	b.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003194:	d01e      	beq.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003196:	f7ff fa8d 	bl	80026b4 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d302      	bcc.n	80031ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d113      	bne.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e00f      	b.n	80031f4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	4013      	ands	r3, r2
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	bf0c      	ite	eq
 80031e4:	2301      	moveq	r3, #1
 80031e6:	2300      	movne	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d0cd      	beq.n	800318e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003208:	e02c      	b.n	8003264 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 f870 	bl	80032f4 <I2C_IsErrorOccurred>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e02a      	b.n	8003274 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003224:	d01e      	beq.n	8003264 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003226:	f7ff fa45 	bl	80026b4 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	429a      	cmp	r2, r3
 8003234:	d302      	bcc.n	800323c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d113      	bne.n	8003264 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	f043 0220 	orr.w	r2, r3, #32
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e007      	b.n	8003274 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b02      	cmp	r3, #2
 8003270:	d1cb      	bne.n	800320a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003288:	e028      	b.n	80032dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	68b9      	ldr	r1, [r7, #8]
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f830 	bl	80032f4 <I2C_IsErrorOccurred>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e026      	b.n	80032ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329e:	f7ff fa09 	bl	80026b4 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d302      	bcc.n	80032b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d113      	bne.n	80032dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2220      	movs	r2, #32
 80032c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e007      	b.n	80032ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b20      	cmp	r3, #32
 80032e8:	d1cf      	bne.n	800328a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f003 0310 	and.w	r3, r3, #16
 800331c:	2b00      	cmp	r3, #0
 800331e:	d075      	beq.n	800340c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2210      	movs	r2, #16
 8003326:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003328:	e056      	b.n	80033d8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d052      	beq.n	80033d8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003332:	f7ff f9bf 	bl	80026b4 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	429a      	cmp	r2, r3
 8003340:	d302      	bcc.n	8003348 <I2C_IsErrorOccurred+0x54>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d147      	bne.n	80033d8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003352:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800335a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800336a:	d12e      	bne.n	80033ca <I2C_IsErrorOccurred+0xd6>
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003372:	d02a      	beq.n	80033ca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003374:	7cfb      	ldrb	r3, [r7, #19]
 8003376:	2b20      	cmp	r3, #32
 8003378:	d027      	beq.n	80033ca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003388:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800338a:	f7ff f993 	bl	80026b4 <HAL_GetTick>
 800338e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003390:	e01b      	b.n	80033ca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003392:	f7ff f98f 	bl	80026b4 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b19      	cmp	r3, #25
 800339e:	d914      	bls.n	80033ca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	f043 0220 	orr.w	r2, r3, #32
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2220      	movs	r2, #32
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d1dc      	bne.n	8003392 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d003      	beq.n	80033ee <I2C_IsErrorOccurred+0xfa>
 80033e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d09d      	beq.n	800332a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2220      	movs	r2, #32
 80033fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	f043 0304 	orr.w	r3, r3, #4
 8003404:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f043 0301 	orr.w	r3, r3, #1
 8003424:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800342e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	f043 0308 	orr.w	r3, r3, #8
 8003446:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003450:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00b      	beq.n	800347a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003462:	6a3b      	ldr	r3, [r7, #32]
 8003464:	f043 0302 	orr.w	r3, r3, #2
 8003468:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003472:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800347a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800347e:	2b00      	cmp	r3, #0
 8003480:	d01c      	beq.n	80034bc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7ff fe56 	bl	8003134 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <I2C_IsErrorOccurred+0x1d4>)
 8003494:	400b      	ands	r3, r1
 8003496:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	431a      	orrs	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80034bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3728      	adds	r7, #40	; 0x28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	fe00e800 	.word	0xfe00e800

080034cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	607b      	str	r3, [r7, #4]
 80034d6:	460b      	mov	r3, r1
 80034d8:	817b      	strh	r3, [r7, #10]
 80034da:	4613      	mov	r3, r2
 80034dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034e4:	7a7b      	ldrb	r3, [r7, #9]
 80034e6:	041b      	lsls	r3, r3, #16
 80034e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034ec:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034fa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	0d5b      	lsrs	r3, r3, #21
 8003506:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <I2C_TransferConfig+0x60>)
 800350c:	430b      	orrs	r3, r1
 800350e:	43db      	mvns	r3, r3
 8003510:	ea02 0103 	and.w	r1, r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	03ff63ff 	.word	0x03ff63ff

08003530 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b20      	cmp	r3, #32
 8003544:	d138      	bne.n	80035b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003550:	2302      	movs	r3, #2
 8003552:	e032      	b.n	80035ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003582:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6819      	ldr	r1, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2220      	movs	r2, #32
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e000      	b.n	80035ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035b8:	2302      	movs	r3, #2
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
 80035ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b20      	cmp	r3, #32
 80035da:	d139      	bne.n	8003650 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e033      	b.n	8003652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2224      	movs	r2, #36	; 0x24
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 0201 	bic.w	r2, r2, #1
 8003608:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003618:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	e000      	b.n	8003652 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
  }
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800365e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003660:	b08f      	sub	sp, #60	; 0x3c
 8003662:	af0a      	add	r7, sp, #40	; 0x28
 8003664:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e116      	b.n	800389e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fe ff32 	bl	80024f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2203      	movs	r2, #3
 8003694:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d102      	bne.n	80036aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f004 f84c 	bl	800774c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	603b      	str	r3, [r7, #0]
 80036ba:	687e      	ldr	r6, [r7, #4]
 80036bc:	466d      	mov	r5, sp
 80036be:	f106 0410 	add.w	r4, r6, #16
 80036c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80036d2:	1d33      	adds	r3, r6, #4
 80036d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036d6:	6838      	ldr	r0, [r7, #0]
 80036d8:	f003 ffb0 	bl	800763c <USB_CoreInit>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d005      	beq.n	80036ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0d7      	b.n	800389e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f004 f83a 	bl	800776e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	e04a      	b.n	8003796 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	333d      	adds	r3, #61	; 0x3d
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	333c      	adds	r3, #60	; 0x3c
 8003724:	7bfa      	ldrb	r2, [r7, #15]
 8003726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	b298      	uxth	r0, r3
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	3342      	adds	r3, #66	; 0x42
 800373c:	4602      	mov	r2, r0
 800373e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003740:	7bfa      	ldrb	r2, [r7, #15]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	333f      	adds	r3, #63	; 0x3f
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003754:	7bfa      	ldrb	r2, [r7, #15]
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	4613      	mov	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	3344      	adds	r3, #68	; 0x44
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	3348      	adds	r3, #72	; 0x48
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800377c:	7bfa      	ldrb	r2, [r7, #15]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	3350      	adds	r3, #80	; 0x50
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	3301      	adds	r3, #1
 8003794:	73fb      	strb	r3, [r7, #15]
 8003796:	7bfa      	ldrb	r2, [r7, #15]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	d3af      	bcc.n	8003700 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	73fb      	strb	r3, [r7, #15]
 80037a4:	e044      	b.n	8003830 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037a6:	7bfa      	ldrb	r2, [r7, #15]
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037bc:	7bfa      	ldrb	r2, [r7, #15]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80037d2:	7bfa      	ldrb	r2, [r7, #15]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80037e4:	2200      	movs	r2, #0
 80037e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80037e8:	7bfa      	ldrb	r2, [r7, #15]
 80037ea:	6879      	ldr	r1, [r7, #4]
 80037ec:	4613      	mov	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	1a9b      	subs	r3, r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003814:	7bfa      	ldrb	r2, [r7, #15]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	3301      	adds	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	7bfa      	ldrb	r2, [r7, #15]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	429a      	cmp	r2, r3
 8003838:	d3b5      	bcc.n	80037a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	687e      	ldr	r6, [r7, #4]
 8003842:	466d      	mov	r5, sp
 8003844:	f106 0410 	add.w	r4, r6, #16
 8003848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800384a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800384e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003850:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003854:	e885 0003 	stmia.w	r5, {r0, r1}
 8003858:	1d33      	adds	r3, r6, #4
 800385a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800385c:	6838      	ldr	r0, [r7, #0]
 800385e:	f003 ffd3 	bl	8007808 <USB_DevInit>
 8003862:	4603      	mov	r3, r0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e014      	b.n	800389e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2b01      	cmp	r3, #1
 800388a:	d102      	bne.n	8003892 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f80b 	bl	80038a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f004 f99d 	bl	8007bd6 <USB_DevDisconnect>

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080038a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <HAL_PCDEx_ActivateLPM+0x44>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	10000003 	.word	0x10000003

080038f0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a04      	ldr	r2, [pc, #16]	; (800390c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fe:	6013      	str	r3, [r2, #0]
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	40007000 	.word	0x40007000

08003910 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800391a:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	4a22      	ldr	r2, [pc, #136]	; (80039a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003924:	6413      	str	r3, [r2, #64]	; 0x40
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800392e:	603b      	str	r3, [r7, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003932:	4b1e      	ldr	r3, [pc, #120]	; (80039ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800393e:	f7fe feb9 	bl	80026b4 <HAL_GetTick>
 8003942:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003944:	e009      	b.n	800395a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003946:	f7fe feb5 	bl	80026b4 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003954:	d901      	bls.n	800395a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e022      	b.n	80039a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800395a:	4b14      	ldr	r3, [pc, #80]	; (80039ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003966:	d1ee      	bne.n	8003946 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003968:	4b10      	ldr	r3, [pc, #64]	; (80039ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0f      	ldr	r2, [pc, #60]	; (80039ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003972:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003974:	f7fe fe9e 	bl	80026b4 <HAL_GetTick>
 8003978:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800397a:	e009      	b.n	8003990 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800397c:	f7fe fe9a 	bl	80026b4 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800398a:	d901      	bls.n	8003990 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e007      	b.n	80039a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800399c:	d1ee      	bne.n	800397c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40007000 	.word	0x40007000

080039b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e291      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 8087 	beq.w	8003ae2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039d4:	4b96      	ldr	r3, [pc, #600]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d00c      	beq.n	80039fa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e0:	4b93      	ldr	r3, [pc, #588]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	d112      	bne.n	8003a12 <HAL_RCC_OscConfig+0x62>
 80039ec:	4b90      	ldr	r3, [pc, #576]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f8:	d10b      	bne.n	8003a12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039fa:	4b8d      	ldr	r3, [pc, #564]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d06c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x130>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d168      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e26b      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCC_OscConfig+0x7a>
 8003a1c:	4b84      	ldr	r3, [pc, #528]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a83      	ldr	r2, [pc, #524]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	e02e      	b.n	8003a88 <HAL_RCC_OscConfig+0xd8>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_RCC_OscConfig+0x9c>
 8003a32:	4b7f      	ldr	r3, [pc, #508]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a7e      	ldr	r2, [pc, #504]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3c:	6013      	str	r3, [r2, #0]
 8003a3e:	4b7c      	ldr	r3, [pc, #496]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a7b      	ldr	r2, [pc, #492]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	e01d      	b.n	8003a88 <HAL_RCC_OscConfig+0xd8>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0xc0>
 8003a56:	4b76      	ldr	r3, [pc, #472]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a75      	ldr	r2, [pc, #468]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b73      	ldr	r3, [pc, #460]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a72      	ldr	r2, [pc, #456]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e00b      	b.n	8003a88 <HAL_RCC_OscConfig+0xd8>
 8003a70:	4b6f      	ldr	r3, [pc, #444]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a6e      	ldr	r2, [pc, #440]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b6c      	ldr	r3, [pc, #432]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6b      	ldr	r2, [pc, #428]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d013      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fe fe10 	bl	80026b4 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fe fe0c 	bl	80026b4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e21f      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aaa:	4b61      	ldr	r3, [pc, #388]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCC_OscConfig+0xe8>
 8003ab6:	e014      	b.n	8003ae2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fdfc 	bl	80026b4 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac0:	f7fe fdf8 	bl	80026b4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b64      	cmp	r3, #100	; 0x64
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e20b      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad2:	4b57      	ldr	r3, [pc, #348]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x110>
 8003ade:	e000      	b.n	8003ae2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d069      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003aee:	4b50      	ldr	r3, [pc, #320]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00b      	beq.n	8003b12 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003afa:	4b4d      	ldr	r3, [pc, #308]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d11c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x190>
 8003b06:	4b4a      	ldr	r3, [pc, #296]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d116      	bne.n	8003b40 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	4b47      	ldr	r3, [pc, #284]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x17a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d001      	beq.n	8003b2a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e1df      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2a:	4b41      	ldr	r3, [pc, #260]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	493d      	ldr	r1, [pc, #244]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3e:	e040      	b.n	8003bc2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d023      	beq.n	8003b90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b48:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a38      	ldr	r2, [pc, #224]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b54:	f7fe fdae 	bl	80026b4 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5c:	f7fe fdaa 	bl	80026b4 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e1bd      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6e:	4b30      	ldr	r3, [pc, #192]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7a:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4929      	ldr	r1, [pc, #164]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	600b      	str	r3, [r1, #0]
 8003b8e:	e018      	b.n	8003bc2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b90:	4b27      	ldr	r3, [pc, #156]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a26      	ldr	r2, [pc, #152]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7fe fd8a 	bl	80026b4 <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba4:	f7fe fd86 	bl	80026b4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e199      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb6:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1f0      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d038      	beq.n	8003c40 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d019      	beq.n	8003c0a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd6:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be2:	f7fe fd67 	bl	80026b4 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bea:	f7fe fd63 	bl	80026b4 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e176      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0f0      	beq.n	8003bea <HAL_RCC_OscConfig+0x23a>
 8003c08:	e01a      	b.n	8003c40 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c0a:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003c0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c0e:	4a08      	ldr	r2, [pc, #32]	; (8003c30 <HAL_RCC_OscConfig+0x280>)
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c16:	f7fe fd4d 	bl	80026b4 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c1c:	e00a      	b.n	8003c34 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c1e:	f7fe fd49 	bl	80026b4 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d903      	bls.n	8003c34 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e15c      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
 8003c30:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	4b91      	ldr	r3, [pc, #580]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d1ee      	bne.n	8003c1e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 80a4 	beq.w	8003d96 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4e:	4b8b      	ldr	r3, [pc, #556]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10d      	bne.n	8003c76 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	4b88      	ldr	r3, [pc, #544]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a87      	ldr	r2, [pc, #540]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b85      	ldr	r3, [pc, #532]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c76:	4b82      	ldr	r3, [pc, #520]	; (8003e80 <HAL_RCC_OscConfig+0x4d0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d118      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c82:	4b7f      	ldr	r3, [pc, #508]	; (8003e80 <HAL_RCC_OscConfig+0x4d0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a7e      	ldr	r2, [pc, #504]	; (8003e80 <HAL_RCC_OscConfig+0x4d0>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8e:	f7fe fd11 	bl	80026b4 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c96:	f7fe fd0d 	bl	80026b4 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b64      	cmp	r3, #100	; 0x64
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e120      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ca8:	4b75      	ldr	r3, [pc, #468]	; (8003e80 <HAL_RCC_OscConfig+0x4d0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d106      	bne.n	8003cca <HAL_RCC_OscConfig+0x31a>
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	4a6e      	ldr	r2, [pc, #440]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc8:	e02d      	b.n	8003d26 <HAL_RCC_OscConfig+0x376>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0x33c>
 8003cd2:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a69      	ldr	r2, [pc, #420]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	4b67      	ldr	r3, [pc, #412]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	4a66      	ldr	r2, [pc, #408]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003ce4:	f023 0304 	bic.w	r3, r3, #4
 8003ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cea:	e01c      	b.n	8003d26 <HAL_RCC_OscConfig+0x376>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d10c      	bne.n	8003d0e <HAL_RCC_OscConfig+0x35e>
 8003cf4:	4b61      	ldr	r3, [pc, #388]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a60      	ldr	r2, [pc, #384]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003cfa:	f043 0304 	orr.w	r3, r3, #4
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	4b5e      	ldr	r3, [pc, #376]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a5d      	ldr	r2, [pc, #372]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d06:	f043 0301 	orr.w	r3, r3, #1
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0c:	e00b      	b.n	8003d26 <HAL_RCC_OscConfig+0x376>
 8003d0e:	4b5b      	ldr	r3, [pc, #364]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a5a      	ldr	r2, [pc, #360]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d14:	f023 0301 	bic.w	r3, r3, #1
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
 8003d1a:	4b58      	ldr	r3, [pc, #352]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	4a57      	ldr	r2, [pc, #348]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d20:	f023 0304 	bic.w	r3, r3, #4
 8003d24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d015      	beq.n	8003d5a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2e:	f7fe fcc1 	bl	80026b4 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7fe fcbd 	bl	80026b4 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e0ce      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d4c:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d0ee      	beq.n	8003d36 <HAL_RCC_OscConfig+0x386>
 8003d58:	e014      	b.n	8003d84 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5a:	f7fe fcab 	bl	80026b4 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d60:	e00a      	b.n	8003d78 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fe fca7 	bl	80026b4 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e0b8      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d78:	4b40      	ldr	r3, [pc, #256]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	f003 0302 	and.w	r3, r3, #2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1ee      	bne.n	8003d62 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d105      	bne.n	8003d96 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8a:	4b3c      	ldr	r3, [pc, #240]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	4a3b      	ldr	r2, [pc, #236]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80a4 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da0:	4b36      	ldr	r3, [pc, #216]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 030c 	and.w	r3, r3, #12
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d06b      	beq.n	8003e84 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d149      	bne.n	8003e48 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db4:	4b31      	ldr	r3, [pc, #196]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a30      	ldr	r2, [pc, #192]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fe fc78 	bl	80026b4 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc8:	f7fe fc74 	bl	80026b4 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e087      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dda:	4b28      	ldr	r3, [pc, #160]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfc:	085b      	lsrs	r3, r3, #1
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	061b      	lsls	r3, r3, #24
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e12:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e14:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a18      	ldr	r2, [pc, #96]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e20:	f7fe fc48 	bl	80026b4 <HAL_GetTick>
 8003e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	e008      	b.n	8003e3a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e28:	f7fe fc44 	bl	80026b4 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d901      	bls.n	8003e3a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e057      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d0f0      	beq.n	8003e28 <HAL_RCC_OscConfig+0x478>
 8003e46:	e04f      	b.n	8003ee8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a0b      	ldr	r2, [pc, #44]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fe fc2e 	bl	80026b4 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7fe fc2a 	bl	80026b4 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e03d      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	4b03      	ldr	r3, [pc, #12]	; (8003e7c <HAL_RCC_OscConfig+0x4cc>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4ac>
 8003e7a:	e035      	b.n	8003ee8 <HAL_RCC_OscConfig+0x538>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e84:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCC_OscConfig+0x544>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d028      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d121      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d11a      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003eba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d111      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	085b      	lsrs	r3, r3, #1
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d107      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d001      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40023800 	.word	0x40023800

08003ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f02:	2300      	movs	r3, #0
 8003f04:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0d0      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f10:	4b6a      	ldr	r3, [pc, #424]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d910      	bls.n	8003f40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f1e:	4b67      	ldr	r3, [pc, #412]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f023 020f 	bic.w	r2, r3, #15
 8003f26:	4965      	ldr	r1, [pc, #404]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f2e:	4b63      	ldr	r3, [pc, #396]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d001      	beq.n	8003f40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0b8      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d020      	beq.n	8003f8e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f58:	4b59      	ldr	r3, [pc, #356]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a58      	ldr	r2, [pc, #352]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f62:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0308 	and.w	r3, r3, #8
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f70:	4b53      	ldr	r3, [pc, #332]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	4a52      	ldr	r2, [pc, #328]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f7c:	4b50      	ldr	r3, [pc, #320]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	494d      	ldr	r1, [pc, #308]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d040      	beq.n	800401c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d107      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa2:	4b47      	ldr	r3, [pc, #284]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d115      	bne.n	8003fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e07f      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d107      	bne.n	8003fca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fba:	4b41      	ldr	r3, [pc, #260]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d109      	bne.n	8003fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e073      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fca:	4b3d      	ldr	r3, [pc, #244]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e06b      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fda:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 0203 	bic.w	r2, r3, #3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	4936      	ldr	r1, [pc, #216]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fec:	f7fe fb62 	bl	80026b4 <HAL_GetTick>
 8003ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ff4:	f7fe fb5e 	bl	80026b4 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e053      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400a:	4b2d      	ldr	r3, [pc, #180]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 020c 	and.w	r2, r3, #12
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	429a      	cmp	r2, r3
 800401a:	d1eb      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800401c:	4b27      	ldr	r3, [pc, #156]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 030f 	and.w	r3, r3, #15
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d210      	bcs.n	800404c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402a:	4b24      	ldr	r3, [pc, #144]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 020f 	bic.w	r2, r3, #15
 8004032:	4922      	ldr	r1, [pc, #136]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	4313      	orrs	r3, r2
 8004038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b20      	ldr	r3, [pc, #128]	; (80040bc <HAL_RCC_ClockConfig+0x1c4>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e032      	b.n	80040b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	4916      	ldr	r1, [pc, #88]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004066:	4313      	orrs	r3, r2
 8004068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0308 	and.w	r3, r3, #8
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	490e      	ldr	r1, [pc, #56]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800408a:	f000 f821 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800408e:	4602      	mov	r2, r0
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	490a      	ldr	r1, [pc, #40]	; (80040c4 <HAL_RCC_ClockConfig+0x1cc>)
 800409c:	5ccb      	ldrb	r3, [r1, r3]
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	4a09      	ldr	r2, [pc, #36]	; (80040c8 <HAL_RCC_ClockConfig+0x1d0>)
 80040a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCC_ClockConfig+0x1d4>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe fabe 	bl	800262c <HAL_InitTick>

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	40023c00 	.word	0x40023c00
 80040c0:	40023800 	.word	0x40023800
 80040c4:	0800aaec 	.word	0x0800aaec
 80040c8:	20000014 	.word	0x20000014
 80040cc:	20000018 	.word	0x20000018

080040d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	2300      	movs	r3, #0
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	2300      	movs	r3, #0
 80040e2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040e8:	4b67      	ldr	r3, [pc, #412]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f003 030c 	and.w	r3, r3, #12
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	d00d      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x40>
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	f200 80bd 	bhi.w	8004274 <HAL_RCC_GetSysClockFreq+0x1a4>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x34>
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d003      	beq.n	800410a <HAL_RCC_GetSysClockFreq+0x3a>
 8004102:	e0b7      	b.n	8004274 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004104:	4b61      	ldr	r3, [pc, #388]	; (800428c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004106:	60bb      	str	r3, [r7, #8]
      break;
 8004108:	e0b7      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800410a:	4b61      	ldr	r3, [pc, #388]	; (8004290 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800410c:	60bb      	str	r3, [r7, #8]
      break;
 800410e:	e0b4      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004110:	4b5d      	ldr	r3, [pc, #372]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004118:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800411a:	4b5b      	ldr	r3, [pc, #364]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d04d      	beq.n	80041c2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004126:	4b58      	ldr	r3, [pc, #352]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	099b      	lsrs	r3, r3, #6
 800412c:	461a      	mov	r2, r3
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004136:	f04f 0100 	mov.w	r1, #0
 800413a:	ea02 0800 	and.w	r8, r2, r0
 800413e:	ea03 0901 	and.w	r9, r3, r1
 8004142:	4640      	mov	r0, r8
 8004144:	4649      	mov	r1, r9
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	f04f 0300 	mov.w	r3, #0
 800414e:	014b      	lsls	r3, r1, #5
 8004150:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004154:	0142      	lsls	r2, r0, #5
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	ebb0 0008 	subs.w	r0, r0, r8
 800415e:	eb61 0109 	sbc.w	r1, r1, r9
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	018b      	lsls	r3, r1, #6
 800416c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004170:	0182      	lsls	r2, r0, #6
 8004172:	1a12      	subs	r2, r2, r0
 8004174:	eb63 0301 	sbc.w	r3, r3, r1
 8004178:	f04f 0000 	mov.w	r0, #0
 800417c:	f04f 0100 	mov.w	r1, #0
 8004180:	00d9      	lsls	r1, r3, #3
 8004182:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004186:	00d0      	lsls	r0, r2, #3
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	eb12 0208 	adds.w	r2, r2, r8
 8004190:	eb43 0309 	adc.w	r3, r3, r9
 8004194:	f04f 0000 	mov.w	r0, #0
 8004198:	f04f 0100 	mov.w	r1, #0
 800419c:	0259      	lsls	r1, r3, #9
 800419e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041a2:	0250      	lsls	r0, r2, #9
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	461a      	mov	r2, r3
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	f7fc fd20 	bl	8000bf8 <__aeabi_uldivmod>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4613      	mov	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
 80041c0:	e04a      	b.n	8004258 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	099b      	lsrs	r3, r3, #6
 80041c8:	461a      	mov	r2, r3
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041d2:	f04f 0100 	mov.w	r1, #0
 80041d6:	ea02 0400 	and.w	r4, r2, r0
 80041da:	ea03 0501 	and.w	r5, r3, r1
 80041de:	4620      	mov	r0, r4
 80041e0:	4629      	mov	r1, r5
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	014b      	lsls	r3, r1, #5
 80041ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041f0:	0142      	lsls	r2, r0, #5
 80041f2:	4610      	mov	r0, r2
 80041f4:	4619      	mov	r1, r3
 80041f6:	1b00      	subs	r0, r0, r4
 80041f8:	eb61 0105 	sbc.w	r1, r1, r5
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	018b      	lsls	r3, r1, #6
 8004206:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800420a:	0182      	lsls	r2, r0, #6
 800420c:	1a12      	subs	r2, r2, r0
 800420e:	eb63 0301 	sbc.w	r3, r3, r1
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f04f 0100 	mov.w	r1, #0
 800421a:	00d9      	lsls	r1, r3, #3
 800421c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004220:	00d0      	lsls	r0, r2, #3
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	1912      	adds	r2, r2, r4
 8004228:	eb45 0303 	adc.w	r3, r5, r3
 800422c:	f04f 0000 	mov.w	r0, #0
 8004230:	f04f 0100 	mov.w	r1, #0
 8004234:	0299      	lsls	r1, r3, #10
 8004236:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800423a:	0290      	lsls	r0, r2, #10
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4610      	mov	r0, r2
 8004242:	4619      	mov	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	461a      	mov	r2, r3
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	f7fc fcd4 	bl	8000bf8 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4613      	mov	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	3301      	adds	r3, #1
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004270:	60bb      	str	r3, [r7, #8]
      break;
 8004272:	e002      	b.n	800427a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004274:	4b05      	ldr	r3, [pc, #20]	; (800428c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004276:	60bb      	str	r3, [r7, #8]
      break;
 8004278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800427a:	68bb      	ldr	r3, [r7, #8]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
 800428c:	00f42400 	.word	0x00f42400
 8004290:	007a1200 	.word	0x007a1200

08004294 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000014 	.word	0x20000014

080042ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042b0:	f7ff fff0 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042b4:	4602      	mov	r2, r0
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	0a9b      	lsrs	r3, r3, #10
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	4903      	ldr	r1, [pc, #12]	; (80042d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042c2:	5ccb      	ldrb	r3, [r1, r3]
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40023800 	.word	0x40023800
 80042d0:	0800aafc 	.word	0x0800aafc

080042d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042d8:	f7ff ffdc 	bl	8004294 <HAL_RCC_GetHCLKFreq>
 80042dc:	4602      	mov	r2, r0
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	0b5b      	lsrs	r3, r3, #13
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	4903      	ldr	r1, [pc, #12]	; (80042f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042ea:	5ccb      	ldrb	r3, [r1, r3]
 80042ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	0800aafc 	.word	0x0800aafc

080042fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d012      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004320:	4b65      	ldr	r3, [pc, #404]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	4a64      	ldr	r2, [pc, #400]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004326:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800432a:	6093      	str	r3, [r2, #8]
 800432c:	4b62      	ldr	r3, [pc, #392]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	4960      	ldr	r1, [pc, #384]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8004342:	2301      	movs	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d017      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004352:	4b59      	ldr	r3, [pc, #356]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004360:	4955      	ldr	r1, [pc, #340]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004370:	d101      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8004372:	2301      	movs	r3, #1
 8004374:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800437e:	2301      	movs	r3, #1
 8004380:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d017      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800438e:	4b4a      	ldr	r3, [pc, #296]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004394:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	4946      	ldr	r1, [pc, #280]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ac:	d101      	bne.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80043ae:	2301      	movs	r3, #1
 80043b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80043ba:	2301      	movs	r3, #1
 80043bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 808b 	beq.w	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043cc:	4b3a      	ldr	r3, [pc, #232]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	4a39      	ldr	r2, [pc, #228]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6413      	str	r3, [r2, #64]	; 0x40
 80043d8:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043e4:	4b35      	ldr	r3, [pc, #212]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a34      	ldr	r2, [pc, #208]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f0:	f7fe f960 	bl	80026b4 <HAL_GetTick>
 80043f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f8:	f7fe f95c 	bl	80026b4 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	; 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e2bc      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800440a:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004416:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d035      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d02e      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004434:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800443e:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800444a:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a1a      	ldr	r2, [pc, #104]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004454:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800445c:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d114      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fe f924 	bl	80026b4 <HAL_GetTick>
 800446c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	e00a      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fe f920 	bl	80026b4 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e27e      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ee      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449e:	d111      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	4901      	ldr	r1, [pc, #4]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
 80044b6:	e00b      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40007000 	.word	0x40007000
 80044c0:	0ffffcff 	.word	0x0ffffcff
 80044c4:	4ba4      	ldr	r3, [pc, #656]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4aa3      	ldr	r2, [pc, #652]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044ce:	6093      	str	r3, [r2, #8]
 80044d0:	4ba1      	ldr	r3, [pc, #644]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044dc:	499e      	ldr	r1, [pc, #632]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d010      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ee:	4b9a      	ldr	r3, [pc, #616]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f4:	4a98      	ldr	r2, [pc, #608]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80044f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044fe:	4b96      	ldr	r3, [pc, #600]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004500:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004508:	4993      	ldr	r1, [pc, #588]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800451c:	4b8e      	ldr	r3, [pc, #568]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800452a:	498b      	ldr	r1, [pc, #556]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800453e:	4b86      	ldr	r3, [pc, #536]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454c:	4982      	ldr	r1, [pc, #520]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004560:	4b7d      	ldr	r3, [pc, #500]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800456e:	497a      	ldr	r1, [pc, #488]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004582:	4b75      	ldr	r3, [pc, #468]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f023 0203 	bic.w	r2, r3, #3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004590:	4971      	ldr	r1, [pc, #452]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045a4:	4b6c      	ldr	r3, [pc, #432]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f023 020c 	bic.w	r2, r3, #12
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4969      	ldr	r1, [pc, #420]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045c6:	4b64      	ldr	r3, [pc, #400]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d4:	4960      	ldr	r1, [pc, #384]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045e8:	4b5b      	ldr	r3, [pc, #364]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f6:	4958      	ldr	r1, [pc, #352]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800460a:	4b53      	ldr	r3, [pc, #332]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004618:	494f      	ldr	r1, [pc, #316]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800462c:	4b4a      	ldr	r3, [pc, #296]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800463a:	4947      	ldr	r1, [pc, #284]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800464e:	4b42      	ldr	r3, [pc, #264]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	493e      	ldr	r1, [pc, #248]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004670:	4b39      	ldr	r3, [pc, #228]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467e:	4936      	ldr	r1, [pc, #216]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d011      	beq.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004692:	4b31      	ldr	r3, [pc, #196]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004698:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046a0:	492d      	ldr	r1, [pc, #180]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046b0:	d101      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80046b2:	2301      	movs	r3, #1
 80046b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046c2:	4b25      	ldr	r3, [pc, #148]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d0:	4921      	ldr	r1, [pc, #132]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046e4:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046f2:	4919      	ldr	r1, [pc, #100]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004706:	4b14      	ldr	r3, [pc, #80]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004714:	4910      	ldr	r1, [pc, #64]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d006      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	f000 809d 	beq.w	800486a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004736:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800473a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800473c:	f7fd ffba 	bl	80026b4 <HAL_GetTick>
 8004740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004742:	e00b      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004744:	f7fd ffb6 	bl	80026b4 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b64      	cmp	r3, #100	; 0x64
 8004750:	d904      	bls.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e116      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8004756:	bf00      	nop
 8004758:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800475c:	4b8b      	ldr	r3, [pc, #556]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1ed      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d017      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d113      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800477c:	4b83      	ldr	r3, [pc, #524]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800477e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004782:	0e1b      	lsrs	r3, r3, #24
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	019a      	lsls	r2, r3, #6
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	061b      	lsls	r3, r3, #24
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	071b      	lsls	r3, r3, #28
 800479c:	497b      	ldr	r1, [pc, #492]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d004      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d024      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ce:	d11f      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047d0:	4b6e      	ldr	r3, [pc, #440]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d6:	0f1b      	lsrs	r3, r3, #28
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	019a      	lsls	r2, r3, #6
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	431a      	orrs	r2, r3
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	071b      	lsls	r3, r3, #28
 80047f0:	4966      	ldr	r1, [pc, #408]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047f8:	4b64      	ldr	r3, [pc, #400]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80047fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047fe:	f023 021f 	bic.w	r2, r3, #31
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	3b01      	subs	r3, #1
 8004808:	4960      	ldr	r1, [pc, #384]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	019a      	lsls	r2, r3, #6
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	061b      	lsls	r3, r3, #24
 8004828:	431a      	orrs	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	071b      	lsls	r3, r3, #28
 8004830:	4956      	ldr	r1, [pc, #344]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004838:	4b54      	ldr	r3, [pc, #336]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a53      	ldr	r2, [pc, #332]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800483e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004842:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004844:	f7fd ff36 	bl	80026b4 <HAL_GetTick>
 8004848:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800484a:	e008      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800484c:	f7fd ff32 	bl	80026b4 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b64      	cmp	r3, #100	; 0x64
 8004858:	d901      	bls.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e092      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800485e:	4b4b      	ldr	r3, [pc, #300]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b01      	cmp	r3, #1
 800486e:	f040 8088 	bne.w	8004982 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004872:	4b46      	ldr	r3, [pc, #280]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a45      	ldr	r2, [pc, #276]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800487c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487e:	f7fd ff19 	bl	80026b4 <HAL_GetTick>
 8004882:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004886:	f7fd ff15 	bl	80026b4 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b64      	cmp	r3, #100	; 0x64
 8004892:	d901      	bls.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e075      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004898:	4b3c      	ldr	r3, [pc, #240]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a4:	d0ef      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d009      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d024      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d120      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048ce:	4b2f      	ldr	r3, [pc, #188]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d4:	0c1b      	lsrs	r3, r3, #16
 80048d6:	f003 0303 	and.w	r3, r3, #3
 80048da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	019a      	lsls	r2, r3, #6
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	061b      	lsls	r3, r3, #24
 80048ee:	4927      	ldr	r1, [pc, #156]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80048f6:	4b25      	ldr	r3, [pc, #148]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80048f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	3b01      	subs	r3, #1
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	4920      	ldr	r1, [pc, #128]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d018      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x652>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004920:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004924:	d113      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004926:	4b19      	ldr	r3, [pc, #100]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492c:	0e1b      	lsrs	r3, r3, #24
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	019a      	lsls	r2, r3, #6
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	431a      	orrs	r2, r3
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	061b      	lsls	r3, r3, #24
 8004946:	4911      	ldr	r1, [pc, #68]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800494e:	4b0f      	ldr	r3, [pc, #60]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a0e      	ldr	r2, [pc, #56]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495a:	f7fd feab 	bl	80026b4 <HAL_GetTick>
 800495e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004960:	e008      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004962:	f7fd fea7 	bl	80026b4 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b64      	cmp	r3, #100	; 0x64
 800496e:	d901      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e007      	b.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800497c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004980:	d1ef      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3720      	adds	r7, #32
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40023800 	.word	0x40023800

08004990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e049      	b.n	8004a36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fd fc1a 	bl	80021f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 feea 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3708      	adds	r7, #8
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d001      	beq.n	8004a58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e04c      	b.n	8004af2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a26      	ldr	r2, [pc, #152]	; (8004b00 <HAL_TIM_Base_Start+0xc0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d022      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a72:	d01d      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a22      	ldr	r2, [pc, #136]	; (8004b04 <HAL_TIM_Base_Start+0xc4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d018      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a21      	ldr	r2, [pc, #132]	; (8004b08 <HAL_TIM_Base_Start+0xc8>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d013      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1f      	ldr	r2, [pc, #124]	; (8004b0c <HAL_TIM_Base_Start+0xcc>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1e      	ldr	r2, [pc, #120]	; (8004b10 <HAL_TIM_Base_Start+0xd0>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d009      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1c      	ldr	r2, [pc, #112]	; (8004b14 <HAL_TIM_Base_Start+0xd4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_TIM_Base_Start+0x70>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1b      	ldr	r2, [pc, #108]	; (8004b18 <HAL_TIM_Base_Start+0xd8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d115      	bne.n	8004adc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <HAL_TIM_Base_Start+0xdc>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d015      	beq.n	8004aee <HAL_TIM_Base_Start+0xae>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac8:	d011      	beq.n	8004aee <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0201 	orr.w	r2, r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ada:	e008      	b.n	8004aee <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	e000      	b.n	8004af0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000800 	.word	0x40000800
 8004b0c:	40000c00 	.word	0x40000c00
 8004b10:	40010400 	.word	0x40010400
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40001800 	.word	0x40001800
 8004b1c:	00010007 	.word	0x00010007

08004b20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d001      	beq.n	8004b38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e054      	b.n	8004be2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d022      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x80>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b62:	d01d      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x80>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a22      	ldr	r2, [pc, #136]	; (8004bf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d018      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x80>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a21      	ldr	r2, [pc, #132]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d013      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x80>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a1f      	ldr	r2, [pc, #124]	; (8004bfc <HAL_TIM_Base_Start_IT+0xdc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00e      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x80>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a1e      	ldr	r2, [pc, #120]	; (8004c00 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x80>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a1c      	ldr	r2, [pc, #112]	; (8004c04 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x80>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d115      	bne.n	8004bcc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_TIM_Base_Start_IT+0xec>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b06      	cmp	r3, #6
 8004bb0:	d015      	beq.n	8004bde <HAL_TIM_Base_Start_IT+0xbe>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb8:	d011      	beq.n	8004bde <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0201 	orr.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bca:	e008      	b.n	8004bde <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	e000      	b.n	8004be0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40000800 	.word	0x40000800
 8004bfc:	40000c00 	.word	0x40000c00
 8004c00:	40010400 	.word	0x40010400
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40001800 	.word	0x40001800
 8004c0c:	00010007 	.word	0x00010007

08004c10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e049      	b.n	8004cb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f841 	bl	8004cbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f000 fdaa 	bl	80057a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d109      	bne.n	8004cf8 <HAL_TIM_PWM_Start+0x24>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	bf14      	ite	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	2300      	moveq	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	e03c      	b.n	8004d72 <HAL_TIM_PWM_Start+0x9e>
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d109      	bne.n	8004d12 <HAL_TIM_PWM_Start+0x3e>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	bf14      	ite	ne
 8004d0a:	2301      	movne	r3, #1
 8004d0c:	2300      	moveq	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	e02f      	b.n	8004d72 <HAL_TIM_PWM_Start+0x9e>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b08      	cmp	r3, #8
 8004d16:	d109      	bne.n	8004d2c <HAL_TIM_PWM_Start+0x58>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	bf14      	ite	ne
 8004d24:	2301      	movne	r3, #1
 8004d26:	2300      	moveq	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	e022      	b.n	8004d72 <HAL_TIM_PWM_Start+0x9e>
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	2b0c      	cmp	r3, #12
 8004d30:	d109      	bne.n	8004d46 <HAL_TIM_PWM_Start+0x72>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	bf14      	ite	ne
 8004d3e:	2301      	movne	r3, #1
 8004d40:	2300      	moveq	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	e015      	b.n	8004d72 <HAL_TIM_PWM_Start+0x9e>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b10      	cmp	r3, #16
 8004d4a:	d109      	bne.n	8004d60 <HAL_TIM_PWM_Start+0x8c>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	e008      	b.n	8004d72 <HAL_TIM_PWM_Start+0x9e>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	bf14      	ite	ne
 8004d6c:	2301      	movne	r3, #1
 8004d6e:	2300      	moveq	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e092      	b.n	8004ea0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d104      	bne.n	8004d8a <HAL_TIM_PWM_Start+0xb6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d88:	e023      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xfe>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d104      	bne.n	8004d9a <HAL_TIM_PWM_Start+0xc6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d98:	e01b      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xfe>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d104      	bne.n	8004daa <HAL_TIM_PWM_Start+0xd6>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da8:	e013      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xfe>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b0c      	cmp	r3, #12
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_PWM_Start+0xe6>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004db8:	e00b      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xfe>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_PWM_Start+0xf6>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc8:	e003      	b.n	8004dd2 <HAL_TIM_PWM_Start+0xfe>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2202      	movs	r2, #2
 8004dce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f001 f87c 	bl	8005ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a30      	ldr	r2, [pc, #192]	; (8004ea8 <HAL_TIM_PWM_Start+0x1d4>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d004      	beq.n	8004df4 <HAL_TIM_PWM_Start+0x120>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a2f      	ldr	r2, [pc, #188]	; (8004eac <HAL_TIM_PWM_Start+0x1d8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d101      	bne.n	8004df8 <HAL_TIM_PWM_Start+0x124>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <HAL_TIM_PWM_Start+0x126>
 8004df8:	2300      	movs	r3, #0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <HAL_TIM_PWM_Start+0x1d4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d022      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x18a>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d01d      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x18a>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a22      	ldr	r2, [pc, #136]	; (8004eb0 <HAL_TIM_PWM_Start+0x1dc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d018      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x18a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <HAL_TIM_PWM_Start+0x1e0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x18a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <HAL_TIM_PWM_Start+0x1e4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x18a>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a19      	ldr	r2, [pc, #100]	; (8004eac <HAL_TIM_PWM_Start+0x1d8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x18a>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1b      	ldr	r2, [pc, #108]	; (8004ebc <HAL_TIM_PWM_Start+0x1e8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_TIM_PWM_Start+0x18a>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <HAL_TIM_PWM_Start+0x1ec>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d115      	bne.n	8004e8a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	4b17      	ldr	r3, [pc, #92]	; (8004ec4 <HAL_TIM_PWM_Start+0x1f0>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2b06      	cmp	r3, #6
 8004e6e:	d015      	beq.n	8004e9c <HAL_TIM_PWM_Start+0x1c8>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e76:	d011      	beq.n	8004e9c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e88:	e008      	b.n	8004e9c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 0201 	orr.w	r2, r2, #1
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	e000      	b.n	8004e9e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40010400 	.word	0x40010400
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	40000c00 	.word	0x40000c00
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40001800 	.word	0x40001800
 8004ec4:	00010007 	.word	0x00010007

08004ec8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e08f      	b.n	8004ffc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7fd f9d1 	bl	8002298 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2202      	movs	r2, #2
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6899      	ldr	r1, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	4b3e      	ldr	r3, [pc, #248]	; (8005004 <HAL_TIM_Encoder_Init+0x13c>)
 8004f0a:	400b      	ands	r3, r1
 8004f0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	3304      	adds	r3, #4
 8004f16:	4619      	mov	r1, r3
 8004f18:	4610      	mov	r0, r2
 8004f1a:	f000 fc45 	bl	80057a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	4b31      	ldr	r3, [pc, #196]	; (8005008 <HAL_TIM_Encoder_Init+0x140>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	689a      	ldr	r2, [r3, #8]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	021b      	lsls	r3, r3, #8
 8004f52:	4313      	orrs	r3, r2
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <HAL_TIM_Encoder_Init+0x144>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4b2a      	ldr	r3, [pc, #168]	; (8005010 <HAL_TIM_Encoder_Init+0x148>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68da      	ldr	r2, [r3, #12]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	4313      	orrs	r3, r2
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	011a      	lsls	r2, r3, #4
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	031b      	lsls	r3, r3, #12
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004f9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	695b      	ldr	r3, [r3, #20]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	4313      	orrs	r3, r2
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	fffebff8 	.word	0xfffebff8
 8005008:	fffffcfc 	.word	0xfffffcfc
 800500c:	fffff3f3 	.word	0xfffff3f3
 8005010:	ffff0f0f 	.word	0xffff0f0f

08005014 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005024:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800502c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005034:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800503c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d110      	bne.n	8005066 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d102      	bne.n	8005050 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800504a:	7b7b      	ldrb	r3, [r7, #13]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d001      	beq.n	8005054 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e089      	b.n	8005168 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005064:	e031      	b.n	80050ca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b04      	cmp	r3, #4
 800506a:	d110      	bne.n	800508e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800506c:	7bbb      	ldrb	r3, [r7, #14]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d102      	bne.n	8005078 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005072:	7b3b      	ldrb	r3, [r7, #12]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d001      	beq.n	800507c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e075      	b.n	8005168 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800508c:	e01d      	b.n	80050ca <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d108      	bne.n	80050a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005094:	7bbb      	ldrb	r3, [r7, #14]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d105      	bne.n	80050a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800509a:	7b7b      	ldrb	r3, [r7, #13]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d102      	bne.n	80050a6 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050a0:	7b3b      	ldrb	r3, [r7, #12]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d001      	beq.n	80050aa <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e05e      	b.n	8005168 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2202      	movs	r2, #2
 80050b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2202      	movs	r2, #2
 80050be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2202      	movs	r2, #2
 80050c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <HAL_TIM_Encoder_Start_IT+0xc4>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d010      	beq.n	80050f8 <HAL_TIM_Encoder_Start_IT+0xe4>
 80050d6:	e01f      	b.n	8005118 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2201      	movs	r2, #1
 80050de:	2100      	movs	r1, #0
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fef9 	bl	8005ed8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f042 0202 	orr.w	r2, r2, #2
 80050f4:	60da      	str	r2, [r3, #12]
      break;
 80050f6:	e02e      	b.n	8005156 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2201      	movs	r2, #1
 80050fe:	2104      	movs	r1, #4
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fee9 	bl	8005ed8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0204 	orr.w	r2, r2, #4
 8005114:	60da      	str	r2, [r3, #12]
      break;
 8005116:	e01e      	b.n	8005156 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2201      	movs	r2, #1
 800511e:	2100      	movs	r1, #0
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fed9 	bl	8005ed8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2201      	movs	r2, #1
 800512c:	2104      	movs	r1, #4
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fed2 	bl	8005ed8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f042 0202 	orr.w	r2, r2, #2
 8005142:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0204 	orr.w	r2, r2, #4
 8005152:	60da      	str	r2, [r3, #12]
      break;
 8005154:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d122      	bne.n	80051cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f003 0302 	and.w	r3, r3, #2
 8005190:	2b02      	cmp	r3, #2
 8005192:	d11b      	bne.n	80051cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0202 	mvn.w	r2, #2
 800519c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f003 0303 	and.w	r3, r3, #3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fc fae6 	bl	8001784 <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fad6 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fadd 	bl	8005780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d122      	bne.n	8005220 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d11b      	bne.n	8005220 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0204 	mvn.w	r2, #4
 80051f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2202      	movs	r2, #2
 80051f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f7fc fabc 	bl	8001784 <HAL_TIM_IC_CaptureCallback>
 800520c:	e005      	b.n	800521a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 faac 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fab3 	bl	8005780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b08      	cmp	r3, #8
 800522c:	d122      	bne.n	8005274 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0308 	and.w	r3, r3, #8
 8005238:	2b08      	cmp	r3, #8
 800523a:	d11b      	bne.n	8005274 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0208 	mvn.w	r2, #8
 8005244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2204      	movs	r2, #4
 800524a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	69db      	ldr	r3, [r3, #28]
 8005252:	f003 0303 	and.w	r3, r3, #3
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fc fa92 	bl	8001784 <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fa82 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fa89 	bl	8005780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b10      	cmp	r3, #16
 8005280:	d122      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b10      	cmp	r3, #16
 800528e:	d11b      	bne.n	80052c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0210 	mvn.w	r2, #16
 8005298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2208      	movs	r2, #8
 800529e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7fc fa68 	bl	8001784 <HAL_TIM_IC_CaptureCallback>
 80052b4:	e005      	b.n	80052c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 fa58 	bl	800576c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fa5f 	bl	8005780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10e      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d107      	bne.n	80052f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0201 	mvn.w	r2, #1
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fc fb7a 	bl	80019e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d10e      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800530c:	2b80      	cmp	r3, #128	; 0x80
 800530e:	d107      	bne.n	8005320 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fe9a 	bl	8006054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800532a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800532e:	d10e      	bne.n	800534e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533a:	2b80      	cmp	r3, #128	; 0x80
 800533c:	d107      	bne.n	800534e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005346:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fe8d 	bl	8006068 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005358:	2b40      	cmp	r3, #64	; 0x40
 800535a:	d10e      	bne.n	800537a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d107      	bne.n	800537a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fa0d 	bl	8005794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b20      	cmp	r3, #32
 8005386:	d10e      	bne.n	80053a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b20      	cmp	r3, #32
 8005394:	d107      	bne.n	80053a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f06f 0220 	mvn.w	r2, #32
 800539e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fe4d 	bl	8006040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053a6:	bf00      	nop
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e0ff      	b.n	80055ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b14      	cmp	r3, #20
 80053da:	f200 80f0 	bhi.w	80055be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80053de:	a201      	add	r2, pc, #4	; (adr r2, 80053e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e4:	08005439 	.word	0x08005439
 80053e8:	080055bf 	.word	0x080055bf
 80053ec:	080055bf 	.word	0x080055bf
 80053f0:	080055bf 	.word	0x080055bf
 80053f4:	08005479 	.word	0x08005479
 80053f8:	080055bf 	.word	0x080055bf
 80053fc:	080055bf 	.word	0x080055bf
 8005400:	080055bf 	.word	0x080055bf
 8005404:	080054bb 	.word	0x080054bb
 8005408:	080055bf 	.word	0x080055bf
 800540c:	080055bf 	.word	0x080055bf
 8005410:	080055bf 	.word	0x080055bf
 8005414:	080054fb 	.word	0x080054fb
 8005418:	080055bf 	.word	0x080055bf
 800541c:	080055bf 	.word	0x080055bf
 8005420:	080055bf 	.word	0x080055bf
 8005424:	0800553d 	.word	0x0800553d
 8005428:	080055bf 	.word	0x080055bf
 800542c:	080055bf 	.word	0x080055bf
 8005430:	080055bf 	.word	0x080055bf
 8005434:	0800557d 	.word	0x0800557d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68b9      	ldr	r1, [r7, #8]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fa52 	bl	80058e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0208 	orr.w	r2, r2, #8
 8005452:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0204 	bic.w	r2, r2, #4
 8005462:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6999      	ldr	r1, [r3, #24]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	691a      	ldr	r2, [r3, #16]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	619a      	str	r2, [r3, #24]
      break;
 8005476:	e0a5      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 faa4 	bl	80059cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699a      	ldr	r2, [r3, #24]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6999      	ldr	r1, [r3, #24]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	021a      	lsls	r2, r3, #8
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	619a      	str	r2, [r3, #24]
      break;
 80054b8:	e084      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68b9      	ldr	r1, [r7, #8]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fafb 	bl	8005abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0208 	orr.w	r2, r2, #8
 80054d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 0204 	bic.w	r2, r2, #4
 80054e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69d9      	ldr	r1, [r3, #28]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	61da      	str	r2, [r3, #28]
      break;
 80054f8:	e064      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb51 	bl	8005ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	69da      	ldr	r2, [r3, #28]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69d9      	ldr	r1, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	021a      	lsls	r2, r3, #8
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	61da      	str	r2, [r3, #28]
      break;
 800553a:	e043      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68b9      	ldr	r1, [r7, #8]
 8005542:	4618      	mov	r0, r3
 8005544:	f000 fb88 	bl	8005c58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0208 	orr.w	r2, r2, #8
 8005556:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0204 	bic.w	r2, r2, #4
 8005566:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	691a      	ldr	r2, [r3, #16]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	430a      	orrs	r2, r1
 8005578:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800557a:	e023      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	4618      	mov	r0, r3
 8005584:	f000 fbba 	bl	8005cfc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	021a      	lsls	r2, r3, #8
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055bc:	e002      	b.n	80055c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
      break;
 80055c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop

080055d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_TIM_ConfigClockSource+0x1c>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e0b4      	b.n	800575e <HAL_TIM_ConfigClockSource+0x186>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	4b56      	ldr	r3, [pc, #344]	; (8005768 <HAL_TIM_ConfigClockSource+0x190>)
 8005610:	4013      	ands	r3, r2
 8005612:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800561a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800562c:	d03e      	beq.n	80056ac <HAL_TIM_ConfigClockSource+0xd4>
 800562e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005632:	f200 8087 	bhi.w	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800563a:	f000 8086 	beq.w	800574a <HAL_TIM_ConfigClockSource+0x172>
 800563e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005642:	d87f      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005644:	2b70      	cmp	r3, #112	; 0x70
 8005646:	d01a      	beq.n	800567e <HAL_TIM_ConfigClockSource+0xa6>
 8005648:	2b70      	cmp	r3, #112	; 0x70
 800564a:	d87b      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 800564c:	2b60      	cmp	r3, #96	; 0x60
 800564e:	d050      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005650:	2b60      	cmp	r3, #96	; 0x60
 8005652:	d877      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005654:	2b50      	cmp	r3, #80	; 0x50
 8005656:	d03c      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005658:	2b50      	cmp	r3, #80	; 0x50
 800565a:	d873      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d058      	beq.n	8005712 <HAL_TIM_ConfigClockSource+0x13a>
 8005660:	2b40      	cmp	r3, #64	; 0x40
 8005662:	d86f      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005664:	2b30      	cmp	r3, #48	; 0x30
 8005666:	d064      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 8005668:	2b30      	cmp	r3, #48	; 0x30
 800566a:	d86b      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 800566c:	2b20      	cmp	r3, #32
 800566e:	d060      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 8005670:	2b20      	cmp	r3, #32
 8005672:	d867      	bhi.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d05c      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 8005678:	2b10      	cmp	r3, #16
 800567a:	d05a      	beq.n	8005732 <HAL_TIM_ConfigClockSource+0x15a>
 800567c:	e062      	b.n	8005744 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6899      	ldr	r1, [r3, #8]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f000 fc03 	bl	8005e98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	609a      	str	r2, [r3, #8]
      break;
 80056aa:	e04f      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6818      	ldr	r0, [r3, #0]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	6899      	ldr	r1, [r3, #8]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f000 fbec 	bl	8005e98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689a      	ldr	r2, [r3, #8]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ce:	609a      	str	r2, [r3, #8]
      break;
 80056d0:	e03c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6859      	ldr	r1, [r3, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	461a      	mov	r2, r3
 80056e0:	f000 fb60 	bl	8005da4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2150      	movs	r1, #80	; 0x50
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fbb9 	bl	8005e62 <TIM_ITRx_SetConfig>
      break;
 80056f0:	e02c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6859      	ldr	r1, [r3, #4]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	461a      	mov	r2, r3
 8005700:	f000 fb7f 	bl	8005e02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2160      	movs	r1, #96	; 0x60
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fba9 	bl	8005e62 <TIM_ITRx_SetConfig>
      break;
 8005710:	e01c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6818      	ldr	r0, [r3, #0]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	6859      	ldr	r1, [r3, #4]
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	461a      	mov	r2, r3
 8005720:	f000 fb40 	bl	8005da4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2140      	movs	r1, #64	; 0x40
 800572a:	4618      	mov	r0, r3
 800572c:	f000 fb99 	bl	8005e62 <TIM_ITRx_SetConfig>
      break;
 8005730:	e00c      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4619      	mov	r1, r3
 800573c:	4610      	mov	r0, r2
 800573e:	f000 fb90 	bl	8005e62 <TIM_ITRx_SetConfig>
      break;
 8005742:	e003      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	73fb      	strb	r3, [r7, #15]
      break;
 8005748:	e000      	b.n	800574c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800574a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800575c:	7bfb      	ldrb	r3, [r7, #15]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	fffeff88 	.word	0xfffeff88

0800576c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800576c:	b480      	push	{r7}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005788:	bf00      	nop
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005792:	4770      	bx	lr

08005794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800579c:	bf00      	nop
 800579e:	370c      	adds	r7, #12
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a40      	ldr	r2, [pc, #256]	; (80058bc <TIM_Base_SetConfig+0x114>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d013      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c6:	d00f      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a3d      	ldr	r2, [pc, #244]	; (80058c0 <TIM_Base_SetConfig+0x118>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00b      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a3c      	ldr	r2, [pc, #240]	; (80058c4 <TIM_Base_SetConfig+0x11c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d007      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a3b      	ldr	r2, [pc, #236]	; (80058c8 <TIM_Base_SetConfig+0x120>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d003      	beq.n	80057e8 <TIM_Base_SetConfig+0x40>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a3a      	ldr	r2, [pc, #232]	; (80058cc <TIM_Base_SetConfig+0x124>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d108      	bne.n	80057fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2f      	ldr	r2, [pc, #188]	; (80058bc <TIM_Base_SetConfig+0x114>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d02b      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005808:	d027      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a2c      	ldr	r2, [pc, #176]	; (80058c0 <TIM_Base_SetConfig+0x118>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d023      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2b      	ldr	r2, [pc, #172]	; (80058c4 <TIM_Base_SetConfig+0x11c>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01f      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a2a      	ldr	r2, [pc, #168]	; (80058c8 <TIM_Base_SetConfig+0x120>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01b      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a29      	ldr	r2, [pc, #164]	; (80058cc <TIM_Base_SetConfig+0x124>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d017      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a28      	ldr	r2, [pc, #160]	; (80058d0 <TIM_Base_SetConfig+0x128>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a27      	ldr	r2, [pc, #156]	; (80058d4 <TIM_Base_SetConfig+0x12c>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00f      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a26      	ldr	r2, [pc, #152]	; (80058d8 <TIM_Base_SetConfig+0x130>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00b      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a25      	ldr	r2, [pc, #148]	; (80058dc <TIM_Base_SetConfig+0x134>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d007      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a24      	ldr	r2, [pc, #144]	; (80058e0 <TIM_Base_SetConfig+0x138>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d003      	beq.n	800585a <TIM_Base_SetConfig+0xb2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a23      	ldr	r2, [pc, #140]	; (80058e4 <TIM_Base_SetConfig+0x13c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d108      	bne.n	800586c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a0a      	ldr	r2, [pc, #40]	; (80058bc <TIM_Base_SetConfig+0x114>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_Base_SetConfig+0xf8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a0c      	ldr	r2, [pc, #48]	; (80058cc <TIM_Base_SetConfig+0x124>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d103      	bne.n	80058a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	691a      	ldr	r2, [r3, #16]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	615a      	str	r2, [r3, #20]
}
 80058ae:	bf00      	nop
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40010000 	.word	0x40010000
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40010400 	.word	0x40010400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800
 80058dc:	40001800 	.word	0x40001800
 80058e0:	40001c00 	.word	0x40001c00
 80058e4:	40002000 	.word	0x40002000

080058e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b087      	sub	sp, #28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 0201 	bic.w	r2, r3, #1
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	4b2b      	ldr	r3, [pc, #172]	; (80059c0 <TIM_OC1_SetConfig+0xd8>)
 8005914:	4013      	ands	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0303 	bic.w	r3, r3, #3
 800591e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f023 0302 	bic.w	r3, r3, #2
 8005930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	697a      	ldr	r2, [r7, #20]
 8005938:	4313      	orrs	r3, r2
 800593a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a21      	ldr	r2, [pc, #132]	; (80059c4 <TIM_OC1_SetConfig+0xdc>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_OC1_SetConfig+0x64>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a20      	ldr	r2, [pc, #128]	; (80059c8 <TIM_OC1_SetConfig+0xe0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d10c      	bne.n	8005966 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f023 0308 	bic.w	r3, r3, #8
 8005952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4313      	orrs	r3, r2
 800595c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f023 0304 	bic.w	r3, r3, #4
 8005964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a16      	ldr	r2, [pc, #88]	; (80059c4 <TIM_OC1_SetConfig+0xdc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d003      	beq.n	8005976 <TIM_OC1_SetConfig+0x8e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a15      	ldr	r2, [pc, #84]	; (80059c8 <TIM_OC1_SetConfig+0xe0>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d111      	bne.n	800599a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800597c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695b      	ldr	r3, [r3, #20]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	621a      	str	r2, [r3, #32]
}
 80059b4:	bf00      	nop
 80059b6:	371c      	adds	r7, #28
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	fffeff8f 	.word	0xfffeff8f
 80059c4:	40010000 	.word	0x40010000
 80059c8:	40010400 	.word	0x40010400

080059cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	f023 0210 	bic.w	r2, r3, #16
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4b2e      	ldr	r3, [pc, #184]	; (8005ab0 <TIM_OC2_SetConfig+0xe4>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f023 0320 	bic.w	r3, r3, #32
 8005a16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	011b      	lsls	r3, r3, #4
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a23      	ldr	r2, [pc, #140]	; (8005ab4 <TIM_OC2_SetConfig+0xe8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC2_SetConfig+0x68>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a22      	ldr	r2, [pc, #136]	; (8005ab8 <TIM_OC2_SetConfig+0xec>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10d      	bne.n	8005a50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a18      	ldr	r2, [pc, #96]	; (8005ab4 <TIM_OC2_SetConfig+0xe8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC2_SetConfig+0x94>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <TIM_OC2_SetConfig+0xec>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d113      	bne.n	8005a88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	621a      	str	r2, [r3, #32]
}
 8005aa2:	bf00      	nop
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	feff8fff 	.word	0xfeff8fff
 8005ab4:	40010000 	.word	0x40010000
 8005ab8:	40010400 	.word	0x40010400

08005abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4b2d      	ldr	r3, [pc, #180]	; (8005b9c <TIM_OC3_SetConfig+0xe0>)
 8005ae8:	4013      	ands	r3, r2
 8005aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a22      	ldr	r2, [pc, #136]	; (8005ba0 <TIM_OC3_SetConfig+0xe4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d003      	beq.n	8005b22 <TIM_OC3_SetConfig+0x66>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a21      	ldr	r2, [pc, #132]	; (8005ba4 <TIM_OC3_SetConfig+0xe8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d10d      	bne.n	8005b3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	021b      	lsls	r3, r3, #8
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a17      	ldr	r2, [pc, #92]	; (8005ba0 <TIM_OC3_SetConfig+0xe4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_OC3_SetConfig+0x92>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a16      	ldr	r2, [pc, #88]	; (8005ba4 <TIM_OC3_SetConfig+0xe8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d113      	bne.n	8005b76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	695b      	ldr	r3, [r3, #20]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	621a      	str	r2, [r3, #32]
}
 8005b90:	bf00      	nop
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	fffeff8f 	.word	0xfffeff8f
 8005ba0:	40010000 	.word	0x40010000
 8005ba4:	40010400 	.word	0x40010400

08005ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b087      	sub	sp, #28
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4b1e      	ldr	r3, [pc, #120]	; (8005c4c <TIM_OC4_SetConfig+0xa4>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	031b      	lsls	r3, r3, #12
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a13      	ldr	r2, [pc, #76]	; (8005c50 <TIM_OC4_SetConfig+0xa8>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_OC4_SetConfig+0x68>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a12      	ldr	r2, [pc, #72]	; (8005c54 <TIM_OC4_SetConfig+0xac>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d109      	bne.n	8005c24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	019b      	lsls	r3, r3, #6
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	697a      	ldr	r2, [r7, #20]
 8005c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	621a      	str	r2, [r3, #32]
}
 8005c3e:	bf00      	nop
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	feff8fff 	.word	0xfeff8fff
 8005c50:	40010000 	.word	0x40010000
 8005c54:	40010400 	.word	0x40010400

08005c58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	4b1b      	ldr	r3, [pc, #108]	; (8005cf0 <TIM_OC5_SetConfig+0x98>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	041b      	lsls	r3, r3, #16
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a12      	ldr	r2, [pc, #72]	; (8005cf4 <TIM_OC5_SetConfig+0x9c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d003      	beq.n	8005cb6 <TIM_OC5_SetConfig+0x5e>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a11      	ldr	r2, [pc, #68]	; (8005cf8 <TIM_OC5_SetConfig+0xa0>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d109      	bne.n	8005cca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	621a      	str	r2, [r3, #32]
}
 8005ce4:	bf00      	nop
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	fffeff8f 	.word	0xfffeff8f
 8005cf4:	40010000 	.word	0x40010000
 8005cf8:	40010400 	.word	0x40010400

08005cfc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4b1c      	ldr	r3, [pc, #112]	; (8005d98 <TIM_OC6_SetConfig+0x9c>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	021b      	lsls	r3, r3, #8
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	051b      	lsls	r3, r3, #20
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a13      	ldr	r2, [pc, #76]	; (8005d9c <TIM_OC6_SetConfig+0xa0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d003      	beq.n	8005d5c <TIM_OC6_SetConfig+0x60>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a12      	ldr	r2, [pc, #72]	; (8005da0 <TIM_OC6_SetConfig+0xa4>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d109      	bne.n	8005d70 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	029b      	lsls	r3, r3, #10
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	feff8fff 	.word	0xfeff8fff
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40010400 	.word	0x40010400

08005da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f023 0201 	bic.w	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	f023 030a 	bic.w	r3, r3, #10
 8005de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	697a      	ldr	r2, [r7, #20]
 8005df4:	621a      	str	r2, [r3, #32]
}
 8005df6:	bf00      	nop
 8005df8:	371c      	adds	r7, #28
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b087      	sub	sp, #28
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0210 	bic.w	r2, r3, #16
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	031b      	lsls	r3, r3, #12
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	bf00      	nop
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b085      	sub	sp, #20
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e7a:	683a      	ldr	r2, [r7, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f043 0307 	orr.w	r3, r3, #7
 8005e84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	609a      	str	r2, [r3, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	021a      	lsls	r2, r3, #8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	609a      	str	r2, [r3, #8]
}
 8005ecc:	bf00      	nop
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f003 031f 	and.w	r3, r3, #31
 8005eea:	2201      	movs	r2, #1
 8005eec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1a      	ldr	r2, [r3, #32]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	43db      	mvns	r3, r3
 8005efa:	401a      	ands	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6a1a      	ldr	r2, [r3, #32]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f10:	431a      	orrs	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	621a      	str	r2, [r3, #32]
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
	...

08005f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b085      	sub	sp, #20
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d101      	bne.n	8005f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	e06d      	b.n	8006018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a30      	ldr	r2, [pc, #192]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d004      	beq.n	8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a2f      	ldr	r2, [pc, #188]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d108      	bne.n	8005f82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a20      	ldr	r2, [pc, #128]	; (8006024 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d022      	beq.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fae:	d01d      	beq.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1d      	ldr	r2, [pc, #116]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d018      	beq.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1c      	ldr	r2, [pc, #112]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00e      	beq.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a15      	ldr	r2, [pc, #84]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a16      	ldr	r2, [pc, #88]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a15      	ldr	r2, [pc, #84]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d10c      	bne.n	8006006 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68ba      	ldr	r2, [r7, #8]
 8006004:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3714      	adds	r7, #20
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	40010000 	.word	0x40010000
 8006028:	40010400 	.word	0x40010400
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40014000 	.word	0x40014000
 800603c:	40001800 	.word	0x40001800

08006040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e040      	b.n	8006110 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006092:	2b00      	cmp	r3, #0
 8006094:	d106      	bne.n	80060a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fc f9ae 	bl	8002400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2224      	movs	r2, #36	; 0x24
 80060a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0201 	bic.w	r2, r2, #1
 80060b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fbf8 	bl	80068b0 <UART_SetConfig>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e022      	b.n	8006110 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fe4e 	bl	8006d74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 fed5 	bl	8006eb8 <UART_CheckIdleState>
 800610e:	4603      	mov	r3, r0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b08a      	sub	sp, #40	; 0x28
 800611c:	af02      	add	r7, sp, #8
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	4613      	mov	r3, r2
 8006126:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800612c:	2b20      	cmp	r3, #32
 800612e:	f040 8081 	bne.w	8006234 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d002      	beq.n	800613e <HAL_UART_Transmit+0x26>
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e079      	b.n	8006236 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006148:	2b01      	cmp	r3, #1
 800614a:	d101      	bne.n	8006150 <HAL_UART_Transmit+0x38>
 800614c:	2302      	movs	r3, #2
 800614e:	e072      	b.n	8006236 <HAL_UART_Transmit+0x11e>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2221      	movs	r2, #33	; 0x21
 8006164:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006166:	f7fc faa5 	bl	80026b4 <HAL_GetTick>
 800616a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	88fa      	ldrh	r2, [r7, #6]
 8006170:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006184:	d108      	bne.n	8006198 <HAL_UART_Transmit+0x80>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800618e:	2300      	movs	r3, #0
 8006190:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	61bb      	str	r3, [r7, #24]
 8006196:	e003      	b.n	80061a0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800619c:	2300      	movs	r3, #0
 800619e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80061a8:	e02c      	b.n	8006204 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2200      	movs	r2, #0
 80061b2:	2180      	movs	r1, #128	; 0x80
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 feb2 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e038      	b.n	8006236 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10b      	bne.n	80061e2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	461a      	mov	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	3302      	adds	r3, #2
 80061de:	61bb      	str	r3, [r7, #24]
 80061e0:	e007      	b.n	80061f2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	781a      	ldrb	r2, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	3301      	adds	r3, #1
 80061f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	3b01      	subs	r3, #1
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1cc      	bne.n	80061aa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2200      	movs	r2, #0
 8006218:	2140      	movs	r1, #64	; 0x40
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 fe7f 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006226:	2303      	movs	r3, #3
 8006228:	e005      	b.n	8006236 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2220      	movs	r2, #32
 800622e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	e000      	b.n	8006236 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006234:	2302      	movs	r3, #2
  }
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b08a      	sub	sp, #40	; 0x28
 8006242:	af00      	add	r7, sp, #0
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	4613      	mov	r3, r2
 800624a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006250:	2b20      	cmp	r3, #32
 8006252:	d13d      	bne.n	80062d0 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <HAL_UART_Receive_IT+0x22>
 800625a:	88fb      	ldrh	r3, [r7, #6]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e036      	b.n	80062d2 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_UART_Receive_IT+0x34>
 800626e:	2302      	movs	r3, #2
 8006270:	e02f      	b.n	80062d2 <HAL_UART_Receive_IT+0x94>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d018      	beq.n	80062c0 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	613b      	str	r3, [r7, #16]
   return(result);
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	461a      	mov	r2, r3
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	623b      	str	r3, [r7, #32]
 80062ae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	69f9      	ldr	r1, [r7, #28]
 80062b2:	6a3a      	ldr	r2, [r7, #32]
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e6      	bne.n	800628e <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80062c0:	88fb      	ldrh	r3, [r7, #6]
 80062c2:	461a      	mov	r2, r3
 80062c4:	68b9      	ldr	r1, [r7, #8]
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 feee 	bl	80070a8 <UART_Start_Receive_IT>
 80062cc:	4603      	mov	r3, r0
 80062ce:	e000      	b.n	80062d2 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062d0:	2302      	movs	r3, #2
  }
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3728      	adds	r7, #40	; 0x28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
	...

080062dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b0ba      	sub	sp, #232	; 0xe8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006302:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006306:	f640 030f 	movw	r3, #2063	; 0x80f
 800630a:	4013      	ands	r3, r2
 800630c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006314:	2b00      	cmp	r3, #0
 8006316:	d115      	bne.n	8006344 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00f      	beq.n	8006344 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006328:	f003 0320 	and.w	r3, r3, #32
 800632c:	2b00      	cmp	r3, #0
 800632e:	d009      	beq.n	8006344 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 828f 	beq.w	8006858 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	4798      	blx	r3
      }
      return;
 8006342:	e289      	b.n	8006858 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8117 	beq.w	800657c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800634e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d106      	bne.n	8006368 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800635a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800635e:	4b85      	ldr	r3, [pc, #532]	; (8006574 <HAL_UART_IRQHandler+0x298>)
 8006360:	4013      	ands	r3, r2
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 810a 	beq.w	800657c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d011      	beq.n	8006398 <HAL_UART_IRQHandler+0xbc>
 8006374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00b      	beq.n	8006398 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2201      	movs	r2, #1
 8006386:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800638e:	f043 0201 	orr.w	r2, r3, #1
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800639c:	f003 0302 	and.w	r3, r3, #2
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d011      	beq.n	80063c8 <HAL_UART_IRQHandler+0xec>
 80063a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00b      	beq.n	80063c8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2202      	movs	r2, #2
 80063b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063be:	f043 0204 	orr.w	r2, r3, #4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d011      	beq.n	80063f8 <HAL_UART_IRQHandler+0x11c>
 80063d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00b      	beq.n	80063f8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2204      	movs	r2, #4
 80063e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063ee:	f043 0202 	orr.w	r2, r3, #2
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fc:	f003 0308 	and.w	r3, r3, #8
 8006400:	2b00      	cmp	r3, #0
 8006402:	d017      	beq.n	8006434 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	d105      	bne.n	800641c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006414:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00b      	beq.n	8006434 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2208      	movs	r2, #8
 8006422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800642a:	f043 0208 	orr.w	r2, r3, #8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800643c:	2b00      	cmp	r3, #0
 800643e:	d012      	beq.n	8006466 <HAL_UART_IRQHandler+0x18a>
 8006440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006444:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00c      	beq.n	8006466 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006454:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645c:	f043 0220 	orr.w	r2, r3, #32
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 81f5 	beq.w	800685c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006476:	f003 0320 	and.w	r3, r3, #32
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00d      	beq.n	800649a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800647e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b00      	cmp	r3, #0
 8006488:	d007      	beq.n	800649a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b40      	cmp	r3, #64	; 0x40
 80064b0:	d005      	beq.n	80064be <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80064b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d04f      	beq.n	800655e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 febc 	bl	800723c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ce:	2b40      	cmp	r3, #64	; 0x40
 80064d0:	d141      	bne.n	8006556 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3308      	adds	r3, #8
 80064d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064e0:	e853 3f00 	ldrex	r3, [r3]
 80064e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3308      	adds	r3, #8
 80064fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800650a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800650e:	e841 2300 	strex	r3, r2, [r1]
 8006512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1d9      	bne.n	80064d2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006522:	2b00      	cmp	r3, #0
 8006524:	d013      	beq.n	800654e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652a:	4a13      	ldr	r2, [pc, #76]	; (8006578 <HAL_UART_IRQHandler+0x29c>)
 800652c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006532:	4618      	mov	r0, r3
 8006534:	f7fc fa6f 	bl	8002a16 <HAL_DMA_Abort_IT>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d017      	beq.n	800656e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006548:	4610      	mov	r0, r2
 800654a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654c:	e00f      	b.n	800656e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f998 	bl	8006884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006554:	e00b      	b.n	800656e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f994 	bl	8006884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800655c:	e007      	b.n	800656e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f990 	bl	8006884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800656c:	e176      	b.n	800685c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656e:	bf00      	nop
    return;
 8006570:	e174      	b.n	800685c <HAL_UART_IRQHandler+0x580>
 8006572:	bf00      	nop
 8006574:	04000120 	.word	0x04000120
 8006578:	08007303 	.word	0x08007303

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006580:	2b01      	cmp	r3, #1
 8006582:	f040 8144 	bne.w	800680e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658a:	f003 0310 	and.w	r3, r3, #16
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 813d 	beq.w	800680e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8136 	beq.w	800680e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2210      	movs	r2, #16
 80065a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b4:	2b40      	cmp	r3, #64	; 0x40
 80065b6:	f040 80b2 	bne.w	800671e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8148 	beq.w	8006860 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80065d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065da:	429a      	cmp	r2, r3
 80065dc:	f080 8140 	bcs.w	8006860 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065f4:	f000 8085 	beq.w	8006702 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800660c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	461a      	mov	r2, r3
 800661e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006622:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006626:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800662e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800663a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1da      	bne.n	80065f8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3308      	adds	r3, #8
 8006648:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800664c:	e853 3f00 	ldrex	r3, [r3]
 8006650:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006652:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006654:	f023 0301 	bic.w	r3, r3, #1
 8006658:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3308      	adds	r3, #8
 8006662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006666:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800666a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800666e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006672:	e841 2300 	strex	r3, r2, [r1]
 8006676:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1e1      	bne.n	8006642 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	3308      	adds	r3, #8
 8006684:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800668e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006694:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	3308      	adds	r3, #8
 800669e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e3      	bne.n	800667e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066d2:	f023 0310 	bic.w	r3, r3, #16
 80066d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80066e6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066ec:	e841 2300 	strex	r3, r2, [r1]
 80066f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1e4      	bne.n	80066c2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7fc f91a 	bl	8002936 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800670e:	b29b      	uxth	r3, r3
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	b29b      	uxth	r3, r3
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f8be 	bl	8006898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800671c:	e0a0      	b.n	8006860 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800672a:	b29b      	uxth	r3, r3
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 8092 	beq.w	8006864 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8006740:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006744:	2b00      	cmp	r3, #0
 8006746:	f000 808d 	beq.w	8006864 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800675e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800676c:	647b      	str	r3, [r7, #68]	; 0x44
 800676e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006772:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800677a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e4      	bne.n	800674a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	3308      	adds	r3, #8
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	623b      	str	r3, [r7, #32]
   return(result);
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	f023 0301 	bic.w	r3, r3, #1
 8006796:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3308      	adds	r3, #8
 80067a0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067a4:	633a      	str	r2, [r7, #48]	; 0x30
 80067a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ac:	e841 2300 	strex	r3, r2, [r1]
 80067b0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e3      	bne.n	8006780 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2220      	movs	r2, #32
 80067bc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	e853 3f00 	ldrex	r3, [r3]
 80067d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0310 	bic.w	r3, r3, #16
 80067de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067ec:	61fb      	str	r3, [r7, #28]
 80067ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	69b9      	ldr	r1, [r7, #24]
 80067f2:	69fa      	ldr	r2, [r7, #28]
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	617b      	str	r3, [r7, #20]
   return(result);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e4      	bne.n	80067ca <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006800:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006804:	4619      	mov	r1, r3
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f846 	bl	8006898 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800680c:	e02a      	b.n	8006864 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800681a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006822:	2b00      	cmp	r3, #0
 8006824:	d008      	beq.n	8006838 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800682a:	2b00      	cmp	r3, #0
 800682c:	d01c      	beq.n	8006868 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	4798      	blx	r3
    }
    return;
 8006836:	e017      	b.n	8006868 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006840:	2b00      	cmp	r3, #0
 8006842:	d012      	beq.n	800686a <HAL_UART_IRQHandler+0x58e>
 8006844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00c      	beq.n	800686a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fd6c 	bl	800732e <UART_EndTransmit_IT>
    return;
 8006856:	e008      	b.n	800686a <HAL_UART_IRQHandler+0x58e>
      return;
 8006858:	bf00      	nop
 800685a:	e006      	b.n	800686a <HAL_UART_IRQHandler+0x58e>
    return;
 800685c:	bf00      	nop
 800685e:	e004      	b.n	800686a <HAL_UART_IRQHandler+0x58e>
      return;
 8006860:	bf00      	nop
 8006862:	e002      	b.n	800686a <HAL_UART_IRQHandler+0x58e>
      return;
 8006864:	bf00      	nop
 8006866:	e000      	b.n	800686a <HAL_UART_IRQHandler+0x58e>
    return;
 8006868:	bf00      	nop
  }

}
 800686a:	37e8      	adds	r7, #232	; 0xe8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b088      	sub	sp, #32
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	689a      	ldr	r2, [r3, #8]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	431a      	orrs	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	4ba7      	ldr	r3, [pc, #668]	; (8006b78 <UART_SetConfig+0x2c8>)
 80068dc:	4013      	ands	r3, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	6979      	ldr	r1, [r7, #20]
 80068e4:	430b      	orrs	r3, r1
 80068e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a1b      	ldr	r3, [r3, #32]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	430a      	orrs	r2, r1
 8006920:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a95      	ldr	r2, [pc, #596]	; (8006b7c <UART_SetConfig+0x2cc>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d120      	bne.n	800696e <UART_SetConfig+0xbe>
 800692c:	4b94      	ldr	r3, [pc, #592]	; (8006b80 <UART_SetConfig+0x2d0>)
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	2b03      	cmp	r3, #3
 8006938:	d816      	bhi.n	8006968 <UART_SetConfig+0xb8>
 800693a:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <UART_SetConfig+0x90>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	08006951 	.word	0x08006951
 8006944:	0800695d 	.word	0x0800695d
 8006948:	08006957 	.word	0x08006957
 800694c:	08006963 	.word	0x08006963
 8006950:	2301      	movs	r3, #1
 8006952:	77fb      	strb	r3, [r7, #31]
 8006954:	e14f      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006956:	2302      	movs	r3, #2
 8006958:	77fb      	strb	r3, [r7, #31]
 800695a:	e14c      	b.n	8006bf6 <UART_SetConfig+0x346>
 800695c:	2304      	movs	r3, #4
 800695e:	77fb      	strb	r3, [r7, #31]
 8006960:	e149      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006962:	2308      	movs	r3, #8
 8006964:	77fb      	strb	r3, [r7, #31]
 8006966:	e146      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006968:	2310      	movs	r3, #16
 800696a:	77fb      	strb	r3, [r7, #31]
 800696c:	e143      	b.n	8006bf6 <UART_SetConfig+0x346>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a84      	ldr	r2, [pc, #528]	; (8006b84 <UART_SetConfig+0x2d4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d132      	bne.n	80069de <UART_SetConfig+0x12e>
 8006978:	4b81      	ldr	r3, [pc, #516]	; (8006b80 <UART_SetConfig+0x2d0>)
 800697a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800697e:	f003 030c 	and.w	r3, r3, #12
 8006982:	2b0c      	cmp	r3, #12
 8006984:	d828      	bhi.n	80069d8 <UART_SetConfig+0x128>
 8006986:	a201      	add	r2, pc, #4	; (adr r2, 800698c <UART_SetConfig+0xdc>)
 8006988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800698c:	080069c1 	.word	0x080069c1
 8006990:	080069d9 	.word	0x080069d9
 8006994:	080069d9 	.word	0x080069d9
 8006998:	080069d9 	.word	0x080069d9
 800699c:	080069cd 	.word	0x080069cd
 80069a0:	080069d9 	.word	0x080069d9
 80069a4:	080069d9 	.word	0x080069d9
 80069a8:	080069d9 	.word	0x080069d9
 80069ac:	080069c7 	.word	0x080069c7
 80069b0:	080069d9 	.word	0x080069d9
 80069b4:	080069d9 	.word	0x080069d9
 80069b8:	080069d9 	.word	0x080069d9
 80069bc:	080069d3 	.word	0x080069d3
 80069c0:	2300      	movs	r3, #0
 80069c2:	77fb      	strb	r3, [r7, #31]
 80069c4:	e117      	b.n	8006bf6 <UART_SetConfig+0x346>
 80069c6:	2302      	movs	r3, #2
 80069c8:	77fb      	strb	r3, [r7, #31]
 80069ca:	e114      	b.n	8006bf6 <UART_SetConfig+0x346>
 80069cc:	2304      	movs	r3, #4
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e111      	b.n	8006bf6 <UART_SetConfig+0x346>
 80069d2:	2308      	movs	r3, #8
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e10e      	b.n	8006bf6 <UART_SetConfig+0x346>
 80069d8:	2310      	movs	r3, #16
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e10b      	b.n	8006bf6 <UART_SetConfig+0x346>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a69      	ldr	r2, [pc, #420]	; (8006b88 <UART_SetConfig+0x2d8>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d120      	bne.n	8006a2a <UART_SetConfig+0x17a>
 80069e8:	4b65      	ldr	r3, [pc, #404]	; (8006b80 <UART_SetConfig+0x2d0>)
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069f2:	2b30      	cmp	r3, #48	; 0x30
 80069f4:	d013      	beq.n	8006a1e <UART_SetConfig+0x16e>
 80069f6:	2b30      	cmp	r3, #48	; 0x30
 80069f8:	d814      	bhi.n	8006a24 <UART_SetConfig+0x174>
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d009      	beq.n	8006a12 <UART_SetConfig+0x162>
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	d810      	bhi.n	8006a24 <UART_SetConfig+0x174>
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d002      	beq.n	8006a0c <UART_SetConfig+0x15c>
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d006      	beq.n	8006a18 <UART_SetConfig+0x168>
 8006a0a:	e00b      	b.n	8006a24 <UART_SetConfig+0x174>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e0f1      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006a12:	2302      	movs	r3, #2
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e0ee      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e0eb      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006a1e:	2308      	movs	r3, #8
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	e0e8      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006a24:	2310      	movs	r3, #16
 8006a26:	77fb      	strb	r3, [r7, #31]
 8006a28:	e0e5      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a57      	ldr	r2, [pc, #348]	; (8006b8c <UART_SetConfig+0x2dc>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d120      	bne.n	8006a76 <UART_SetConfig+0x1c6>
 8006a34:	4b52      	ldr	r3, [pc, #328]	; (8006b80 <UART_SetConfig+0x2d0>)
 8006a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006a3e:	2bc0      	cmp	r3, #192	; 0xc0
 8006a40:	d013      	beq.n	8006a6a <UART_SetConfig+0x1ba>
 8006a42:	2bc0      	cmp	r3, #192	; 0xc0
 8006a44:	d814      	bhi.n	8006a70 <UART_SetConfig+0x1c0>
 8006a46:	2b80      	cmp	r3, #128	; 0x80
 8006a48:	d009      	beq.n	8006a5e <UART_SetConfig+0x1ae>
 8006a4a:	2b80      	cmp	r3, #128	; 0x80
 8006a4c:	d810      	bhi.n	8006a70 <UART_SetConfig+0x1c0>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <UART_SetConfig+0x1a8>
 8006a52:	2b40      	cmp	r3, #64	; 0x40
 8006a54:	d006      	beq.n	8006a64 <UART_SetConfig+0x1b4>
 8006a56:	e00b      	b.n	8006a70 <UART_SetConfig+0x1c0>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	77fb      	strb	r3, [r7, #31]
 8006a5c:	e0cb      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	77fb      	strb	r3, [r7, #31]
 8006a62:	e0c8      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006a64:	2304      	movs	r3, #4
 8006a66:	77fb      	strb	r3, [r7, #31]
 8006a68:	e0c5      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006a6a:	2308      	movs	r3, #8
 8006a6c:	77fb      	strb	r3, [r7, #31]
 8006a6e:	e0c2      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006a70:	2310      	movs	r3, #16
 8006a72:	77fb      	strb	r3, [r7, #31]
 8006a74:	e0bf      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a45      	ldr	r2, [pc, #276]	; (8006b90 <UART_SetConfig+0x2e0>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d125      	bne.n	8006acc <UART_SetConfig+0x21c>
 8006a80:	4b3f      	ldr	r3, [pc, #252]	; (8006b80 <UART_SetConfig+0x2d0>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a8e:	d017      	beq.n	8006ac0 <UART_SetConfig+0x210>
 8006a90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a94:	d817      	bhi.n	8006ac6 <UART_SetConfig+0x216>
 8006a96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a9a:	d00b      	beq.n	8006ab4 <UART_SetConfig+0x204>
 8006a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006aa0:	d811      	bhi.n	8006ac6 <UART_SetConfig+0x216>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <UART_SetConfig+0x1fe>
 8006aa6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aaa:	d006      	beq.n	8006aba <UART_SetConfig+0x20a>
 8006aac:	e00b      	b.n	8006ac6 <UART_SetConfig+0x216>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	77fb      	strb	r3, [r7, #31]
 8006ab2:	e0a0      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e09d      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006aba:	2304      	movs	r3, #4
 8006abc:	77fb      	strb	r3, [r7, #31]
 8006abe:	e09a      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006ac0:	2308      	movs	r3, #8
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e097      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006ac6:	2310      	movs	r3, #16
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	e094      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a30      	ldr	r2, [pc, #192]	; (8006b94 <UART_SetConfig+0x2e4>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d125      	bne.n	8006b22 <UART_SetConfig+0x272>
 8006ad6:	4b2a      	ldr	r3, [pc, #168]	; (8006b80 <UART_SetConfig+0x2d0>)
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ae4:	d017      	beq.n	8006b16 <UART_SetConfig+0x266>
 8006ae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006aea:	d817      	bhi.n	8006b1c <UART_SetConfig+0x26c>
 8006aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af0:	d00b      	beq.n	8006b0a <UART_SetConfig+0x25a>
 8006af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006af6:	d811      	bhi.n	8006b1c <UART_SetConfig+0x26c>
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <UART_SetConfig+0x254>
 8006afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b00:	d006      	beq.n	8006b10 <UART_SetConfig+0x260>
 8006b02:	e00b      	b.n	8006b1c <UART_SetConfig+0x26c>
 8006b04:	2301      	movs	r3, #1
 8006b06:	77fb      	strb	r3, [r7, #31]
 8006b08:	e075      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e072      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006b10:	2304      	movs	r3, #4
 8006b12:	77fb      	strb	r3, [r7, #31]
 8006b14:	e06f      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006b16:	2308      	movs	r3, #8
 8006b18:	77fb      	strb	r3, [r7, #31]
 8006b1a:	e06c      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	77fb      	strb	r3, [r7, #31]
 8006b20:	e069      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a1c      	ldr	r2, [pc, #112]	; (8006b98 <UART_SetConfig+0x2e8>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d137      	bne.n	8006b9c <UART_SetConfig+0x2ec>
 8006b2c:	4b14      	ldr	r3, [pc, #80]	; (8006b80 <UART_SetConfig+0x2d0>)
 8006b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b32:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006b36:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b3a:	d017      	beq.n	8006b6c <UART_SetConfig+0x2bc>
 8006b3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006b40:	d817      	bhi.n	8006b72 <UART_SetConfig+0x2c2>
 8006b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b46:	d00b      	beq.n	8006b60 <UART_SetConfig+0x2b0>
 8006b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b4c:	d811      	bhi.n	8006b72 <UART_SetConfig+0x2c2>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <UART_SetConfig+0x2aa>
 8006b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b56:	d006      	beq.n	8006b66 <UART_SetConfig+0x2b6>
 8006b58:	e00b      	b.n	8006b72 <UART_SetConfig+0x2c2>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	77fb      	strb	r3, [r7, #31]
 8006b5e:	e04a      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006b60:	2302      	movs	r3, #2
 8006b62:	77fb      	strb	r3, [r7, #31]
 8006b64:	e047      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006b66:	2304      	movs	r3, #4
 8006b68:	77fb      	strb	r3, [r7, #31]
 8006b6a:	e044      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006b6c:	2308      	movs	r3, #8
 8006b6e:	77fb      	strb	r3, [r7, #31]
 8006b70:	e041      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006b72:	2310      	movs	r3, #16
 8006b74:	77fb      	strb	r3, [r7, #31]
 8006b76:	e03e      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006b78:	efff69f3 	.word	0xefff69f3
 8006b7c:	40011000 	.word	0x40011000
 8006b80:	40023800 	.word	0x40023800
 8006b84:	40004400 	.word	0x40004400
 8006b88:	40004800 	.word	0x40004800
 8006b8c:	40004c00 	.word	0x40004c00
 8006b90:	40005000 	.word	0x40005000
 8006b94:	40011400 	.word	0x40011400
 8006b98:	40007800 	.word	0x40007800
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a71      	ldr	r2, [pc, #452]	; (8006d68 <UART_SetConfig+0x4b8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d125      	bne.n	8006bf2 <UART_SetConfig+0x342>
 8006ba6:	4b71      	ldr	r3, [pc, #452]	; (8006d6c <UART_SetConfig+0x4bc>)
 8006ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006bb0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006bb4:	d017      	beq.n	8006be6 <UART_SetConfig+0x336>
 8006bb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006bba:	d817      	bhi.n	8006bec <UART_SetConfig+0x33c>
 8006bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc0:	d00b      	beq.n	8006bda <UART_SetConfig+0x32a>
 8006bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bc6:	d811      	bhi.n	8006bec <UART_SetConfig+0x33c>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <UART_SetConfig+0x324>
 8006bcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd0:	d006      	beq.n	8006be0 <UART_SetConfig+0x330>
 8006bd2:	e00b      	b.n	8006bec <UART_SetConfig+0x33c>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	77fb      	strb	r3, [r7, #31]
 8006bd8:	e00d      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	77fb      	strb	r3, [r7, #31]
 8006bde:	e00a      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006be0:	2304      	movs	r3, #4
 8006be2:	77fb      	strb	r3, [r7, #31]
 8006be4:	e007      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006be6:	2308      	movs	r3, #8
 8006be8:	77fb      	strb	r3, [r7, #31]
 8006bea:	e004      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006bec:	2310      	movs	r3, #16
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e001      	b.n	8006bf6 <UART_SetConfig+0x346>
 8006bf2:	2310      	movs	r3, #16
 8006bf4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfe:	d15a      	bne.n	8006cb6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006c00:	7ffb      	ldrb	r3, [r7, #31]
 8006c02:	2b08      	cmp	r3, #8
 8006c04:	d827      	bhi.n	8006c56 <UART_SetConfig+0x3a6>
 8006c06:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <UART_SetConfig+0x35c>)
 8006c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0c:	08006c31 	.word	0x08006c31
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c41 	.word	0x08006c41
 8006c18:	08006c57 	.word	0x08006c57
 8006c1c:	08006c47 	.word	0x08006c47
 8006c20:	08006c57 	.word	0x08006c57
 8006c24:	08006c57 	.word	0x08006c57
 8006c28:	08006c57 	.word	0x08006c57
 8006c2c:	08006c4f 	.word	0x08006c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c30:	f7fd fb3c 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8006c34:	61b8      	str	r0, [r7, #24]
        break;
 8006c36:	e013      	b.n	8006c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c38:	f7fd fb4c 	bl	80042d4 <HAL_RCC_GetPCLK2Freq>
 8006c3c:	61b8      	str	r0, [r7, #24]
        break;
 8006c3e:	e00f      	b.n	8006c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c40:	4b4b      	ldr	r3, [pc, #300]	; (8006d70 <UART_SetConfig+0x4c0>)
 8006c42:	61bb      	str	r3, [r7, #24]
        break;
 8006c44:	e00c      	b.n	8006c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c46:	f7fd fa43 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8006c4a:	61b8      	str	r0, [r7, #24]
        break;
 8006c4c:	e008      	b.n	8006c60 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c52:	61bb      	str	r3, [r7, #24]
        break;
 8006c54:	e004      	b.n	8006c60 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	77bb      	strb	r3, [r7, #30]
        break;
 8006c5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d074      	beq.n	8006d50 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	005a      	lsls	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	441a      	add	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	2b0f      	cmp	r3, #15
 8006c80:	d916      	bls.n	8006cb0 <UART_SetConfig+0x400>
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c88:	d212      	bcs.n	8006cb0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f023 030f 	bic.w	r3, r3, #15
 8006c92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	085b      	lsrs	r3, r3, #1
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	89fb      	ldrh	r3, [r7, #14]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	89fa      	ldrh	r2, [r7, #14]
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	e04f      	b.n	8006d50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	77bb      	strb	r3, [r7, #30]
 8006cb4:	e04c      	b.n	8006d50 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cb6:	7ffb      	ldrb	r3, [r7, #31]
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d828      	bhi.n	8006d0e <UART_SetConfig+0x45e>
 8006cbc:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <UART_SetConfig+0x414>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006cf1 	.word	0x08006cf1
 8006ccc:	08006cf9 	.word	0x08006cf9
 8006cd0:	08006d0f 	.word	0x08006d0f
 8006cd4:	08006cff 	.word	0x08006cff
 8006cd8:	08006d0f 	.word	0x08006d0f
 8006cdc:	08006d0f 	.word	0x08006d0f
 8006ce0:	08006d0f 	.word	0x08006d0f
 8006ce4:	08006d07 	.word	0x08006d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce8:	f7fd fae0 	bl	80042ac <HAL_RCC_GetPCLK1Freq>
 8006cec:	61b8      	str	r0, [r7, #24]
        break;
 8006cee:	e013      	b.n	8006d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf0:	f7fd faf0 	bl	80042d4 <HAL_RCC_GetPCLK2Freq>
 8006cf4:	61b8      	str	r0, [r7, #24]
        break;
 8006cf6:	e00f      	b.n	8006d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf8:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <UART_SetConfig+0x4c0>)
 8006cfa:	61bb      	str	r3, [r7, #24]
        break;
 8006cfc:	e00c      	b.n	8006d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cfe:	f7fd f9e7 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8006d02:	61b8      	str	r0, [r7, #24]
        break;
 8006d04:	e008      	b.n	8006d18 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d0a:	61bb      	str	r3, [r7, #24]
        break;
 8006d0c:	e004      	b.n	8006d18 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	77bb      	strb	r3, [r7, #30]
        break;
 8006d16:	bf00      	nop
    }

    if (pclk != 0U)
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d018      	beq.n	8006d50 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	085a      	lsrs	r2, r3, #1
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	441a      	add	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	2b0f      	cmp	r3, #15
 8006d36:	d909      	bls.n	8006d4c <UART_SetConfig+0x49c>
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3e:	d205      	bcs.n	8006d4c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	60da      	str	r2, [r3, #12]
 8006d4a:	e001      	b.n	8006d50 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006d5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	40007c00 	.word	0x40007c00
 8006d6c:	40023800 	.word	0x40023800
 8006d70:	00f42400 	.word	0x00f42400

08006d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00a      	beq.n	8006d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	430a      	orrs	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00a      	beq.n	8006de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	f003 0308 	and.w	r3, r3, #8
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00a      	beq.n	8006e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	f003 0310 	and.w	r3, r3, #16
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00a      	beq.n	8006e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00a      	beq.n	8006e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d01a      	beq.n	8006e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e72:	d10a      	bne.n	8006e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	605a      	str	r2, [r3, #4]
  }
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af02      	add	r7, sp, #8
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ec8:	f7fb fbf4 	bl	80026b4 <HAL_GetTick>
 8006ecc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d10e      	bne.n	8006efa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f817 	bl	8006f1e <UART_WaitOnFlagUntilTimeout>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d001      	beq.n	8006efa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e00d      	b.n	8006f16 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2220      	movs	r2, #32
 8006efe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2220      	movs	r2, #32
 8006f04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b09c      	sub	sp, #112	; 0x70
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f2e:	e0a5      	b.n	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	f000 80a1 	beq.w	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f3a:	f7fb fbbb 	bl	80026b4 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d302      	bcc.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x32>
 8006f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d13e      	bne.n	8006fce <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f58:	e853 3f00 	ldrex	r3, [r3]
 8006f5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006f64:	667b      	str	r3, [r7, #100]	; 0x64
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1e6      	bne.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3308      	adds	r3, #8
 8006f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f94:	f023 0301 	bic.w	r3, r3, #1
 8006f98:	663b      	str	r3, [r7, #96]	; 0x60
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3308      	adds	r3, #8
 8006fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006fa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006faa:	e841 2300 	strex	r3, r2, [r1]
 8006fae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1e5      	bne.n	8006f82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006fca:	2303      	movs	r3, #3
 8006fcc:	e067      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0304 	and.w	r3, r3, #4
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d04f      	beq.n	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fe6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fea:	d147      	bne.n	800707c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ffe:	e853 3f00 	ldrex	r3, [r3]
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800700a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007018:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800701a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800701c:	e841 2300 	strex	r3, r2, [r1]
 8007020:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e6      	bne.n	8006ff6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	3308      	adds	r3, #8
 800702e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	e853 3f00 	ldrex	r3, [r3]
 8007036:	613b      	str	r3, [r7, #16]
   return(result);
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3308      	adds	r3, #8
 8007046:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007048:	623a      	str	r2, [r7, #32]
 800704a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800704c:	69f9      	ldr	r1, [r7, #28]
 800704e:	6a3a      	ldr	r2, [r7, #32]
 8007050:	e841 2300 	strex	r3, r2, [r1]
 8007054:	61bb      	str	r3, [r7, #24]
   return(result);
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1e5      	bne.n	8007028 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2220      	movs	r2, #32
 8007060:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2220      	movs	r2, #32
 8007066:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e010      	b.n	800709e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	69da      	ldr	r2, [r3, #28]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	4013      	ands	r3, r2
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	429a      	cmp	r2, r3
 800708a:	bf0c      	ite	eq
 800708c:	2301      	moveq	r3, #1
 800708e:	2300      	movne	r3, #0
 8007090:	b2db      	uxtb	r3, r3
 8007092:	461a      	mov	r2, r3
 8007094:	79fb      	ldrb	r3, [r7, #7]
 8007096:	429a      	cmp	r2, r3
 8007098:	f43f af4a 	beq.w	8006f30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3770      	adds	r7, #112	; 0x70
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b097      	sub	sp, #92	; 0x5c
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	88fa      	ldrh	r2, [r7, #6]
 80070c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070da:	d10e      	bne.n	80070fa <UART_Start_Receive_IT+0x52>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <UART_Start_Receive_IT+0x48>
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80070ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070ee:	e02d      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	22ff      	movs	r2, #255	; 0xff
 80070f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80070f8:	e028      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10d      	bne.n	800711e <UART_Start_Receive_IT+0x76>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d104      	bne.n	8007114 <UART_Start_Receive_IT+0x6c>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	22ff      	movs	r2, #255	; 0xff
 800710e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007112:	e01b      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	227f      	movs	r2, #127	; 0x7f
 8007118:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800711c:	e016      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007126:	d10d      	bne.n	8007144 <UART_Start_Receive_IT+0x9c>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d104      	bne.n	800713a <UART_Start_Receive_IT+0x92>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	227f      	movs	r2, #127	; 0x7f
 8007134:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007138:	e008      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	223f      	movs	r2, #63	; 0x3f
 800713e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007142:	e003      	b.n	800714c <UART_Start_Receive_IT+0xa4>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2200      	movs	r2, #0
 8007148:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2222      	movs	r2, #34	; 0x22
 8007158:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3308      	adds	r3, #8
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	f043 0301 	orr.w	r3, r3, #1
 8007170:	657b      	str	r3, [r7, #84]	; 0x54
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3308      	adds	r3, #8
 8007178:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800717a:	64ba      	str	r2, [r7, #72]	; 0x48
 800717c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e5      	bne.n	800715a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007196:	d107      	bne.n	80071a8 <UART_Start_Receive_IT+0x100>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d103      	bne.n	80071a8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	4a24      	ldr	r2, [pc, #144]	; (8007234 <UART_Start_Receive_IT+0x18c>)
 80071a4:	665a      	str	r2, [r3, #100]	; 0x64
 80071a6:	e002      	b.n	80071ae <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4a23      	ldr	r2, [pc, #140]	; (8007238 <UART_Start_Receive_IT+0x190>)
 80071ac:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d019      	beq.n	80071f2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c6:	e853 3f00 	ldrex	r3, [r3]
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80071d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	461a      	mov	r2, r3
 80071da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34
 80071de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e6      	bne.n	80071be <UART_Start_Receive_IT+0x116>
 80071f0:	e018      	b.n	8007224 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f043 0320 	orr.w	r3, r3, #32
 8007206:	653b      	str	r3, [r7, #80]	; 0x50
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007210:	623b      	str	r3, [r7, #32]
 8007212:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	69f9      	ldr	r1, [r7, #28]
 8007216:	6a3a      	ldr	r2, [r7, #32]
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	61bb      	str	r3, [r7, #24]
   return(result);
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e6      	bne.n	80071f2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	375c      	adds	r7, #92	; 0x5c
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	080074df 	.word	0x080074df
 8007238:	08007383 	.word	0x08007383

0800723c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b095      	sub	sp, #84	; 0x54
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724c:	e853 3f00 	ldrex	r3, [r3]
 8007250:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	461a      	mov	r2, r3
 8007260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007262:	643b      	str	r3, [r7, #64]	; 0x40
 8007264:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007266:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007268:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800726a:	e841 2300 	strex	r3, r2, [r1]
 800726e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1e6      	bne.n	8007244 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727e:	6a3b      	ldr	r3, [r7, #32]
 8007280:	e853 3f00 	ldrex	r3, [r3]
 8007284:	61fb      	str	r3, [r7, #28]
   return(result);
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	f023 0301 	bic.w	r3, r3, #1
 800728c:	64bb      	str	r3, [r7, #72]	; 0x48
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007296:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800729c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e5      	bne.n	8007276 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d118      	bne.n	80072e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	60bb      	str	r3, [r7, #8]
   return(result);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0310 	bic.w	r3, r3, #16
 80072c6:	647b      	str	r3, [r7, #68]	; 0x44
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	6979      	ldr	r1, [r7, #20]
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	613b      	str	r3, [r7, #16]
   return(result);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e6      	bne.n	80072b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80072f6:	bf00      	nop
 80072f8:	3754      	adds	r7, #84	; 0x54
 80072fa:	46bd      	mov	sp, r7
 80072fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007300:	4770      	bx	lr

08007302 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b084      	sub	sp, #16
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f7ff faaf 	bl	8006884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007326:	bf00      	nop
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b088      	sub	sp, #32
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	60bb      	str	r3, [r7, #8]
   return(result);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800734a:	61fb      	str	r3, [r7, #28]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	461a      	mov	r2, r3
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	61bb      	str	r3, [r7, #24]
 8007356:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6979      	ldr	r1, [r7, #20]
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	613b      	str	r3, [r7, #16]
   return(result);
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e6      	bne.n	8007336 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff fa7b 	bl	8006870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800737a:	bf00      	nop
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b096      	sub	sp, #88	; 0x58
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007390:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007398:	2b22      	cmp	r3, #34	; 0x22
 800739a:	f040 8094 	bne.w	80074c6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073a8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80073ac:	b2d9      	uxtb	r1, r3
 80073ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b8:	400a      	ands	r2, r1
 80073ba:	b2d2      	uxtb	r2, r2
 80073bc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	3b01      	subs	r3, #1
 80073d2:	b29a      	uxth	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d177      	bne.n	80074d6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073fa:	653b      	str	r3, [r7, #80]	; 0x50
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007404:	647b      	str	r3, [r7, #68]	; 0x44
 8007406:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800740a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e6      	bne.n	80073e6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3308      	adds	r3, #8
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	e853 3f00 	ldrex	r3, [r3]
 8007426:	623b      	str	r3, [r7, #32]
   return(result);
 8007428:	6a3b      	ldr	r3, [r7, #32]
 800742a:	f023 0301 	bic.w	r3, r3, #1
 800742e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3308      	adds	r3, #8
 8007436:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007438:	633a      	str	r2, [r7, #48]	; 0x30
 800743a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800743e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007440:	e841 2300 	strex	r3, r2, [r1]
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	2b00      	cmp	r3, #0
 800744a:	d1e5      	bne.n	8007418 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800745c:	2b01      	cmp	r3, #1
 800745e:	d12e      	bne.n	80074be <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	e853 3f00 	ldrex	r3, [r3]
 8007472:	60fb      	str	r3, [r7, #12]
   return(result);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f023 0310 	bic.w	r3, r3, #16
 800747a:	64bb      	str	r3, [r7, #72]	; 0x48
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	461a      	mov	r2, r3
 8007482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007488:	69b9      	ldr	r1, [r7, #24]
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	e841 2300 	strex	r3, r2, [r1]
 8007490:	617b      	str	r3, [r7, #20]
   return(result);
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e6      	bne.n	8007466 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	f003 0310 	and.w	r3, r3, #16
 80074a2:	2b10      	cmp	r3, #16
 80074a4:	d103      	bne.n	80074ae <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2210      	movs	r2, #16
 80074ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff f9ee 	bl	8006898 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074bc:	e00b      	b.n	80074d6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fa f9a8 	bl	8001814 <HAL_UART_RxCpltCallback>
}
 80074c4:	e007      	b.n	80074d6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	699a      	ldr	r2, [r3, #24]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f042 0208 	orr.w	r2, r2, #8
 80074d4:	619a      	str	r2, [r3, #24]
}
 80074d6:	bf00      	nop
 80074d8:	3758      	adds	r7, #88	; 0x58
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b096      	sub	sp, #88	; 0x58
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074f4:	2b22      	cmp	r3, #34	; 0x22
 80074f6:	f040 8094 	bne.w	8007622 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800750a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800750e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007512:	4013      	ands	r3, r2
 8007514:	b29a      	uxth	r2, r3
 8007516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007518:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751e:	1c9a      	adds	r2, r3, #2
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800752a:	b29b      	uxth	r3, r3
 800752c:	3b01      	subs	r3, #1
 800752e:	b29a      	uxth	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800753c:	b29b      	uxth	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d177      	bne.n	8007632 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754a:	e853 3f00 	ldrex	r3, [r3]
 800754e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	461a      	mov	r2, r3
 800755e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007560:	643b      	str	r3, [r7, #64]	; 0x40
 8007562:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007568:	e841 2300 	strex	r3, r2, [r1]
 800756c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1e6      	bne.n	8007542 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3308      	adds	r3, #8
 800757a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757c:	6a3b      	ldr	r3, [r7, #32]
 800757e:	e853 3f00 	ldrex	r3, [r3]
 8007582:	61fb      	str	r3, [r7, #28]
   return(result);
 8007584:	69fb      	ldr	r3, [r7, #28]
 8007586:	f023 0301 	bic.w	r3, r3, #1
 800758a:	64bb      	str	r3, [r7, #72]	; 0x48
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3308      	adds	r3, #8
 8007592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800759a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e5      	bne.n	8007574 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d12e      	bne.n	800761a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	e853 3f00 	ldrex	r3, [r3]
 80075ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f023 0310 	bic.w	r3, r3, #16
 80075d6:	647b      	str	r3, [r7, #68]	; 0x44
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e0:	61bb      	str	r3, [r7, #24]
 80075e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	6979      	ldr	r1, [r7, #20]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	613b      	str	r3, [r7, #16]
   return(result);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e6      	bne.n	80075c2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	f003 0310 	and.w	r3, r3, #16
 80075fe:	2b10      	cmp	r3, #16
 8007600:	d103      	bne.n	800760a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2210      	movs	r2, #16
 8007608:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007610:	4619      	mov	r1, r3
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff f940 	bl	8006898 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007618:	e00b      	b.n	8007632 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7fa f8fa 	bl	8001814 <HAL_UART_RxCpltCallback>
}
 8007620:	e007      	b.n	8007632 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	699a      	ldr	r2, [r3, #24]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f042 0208 	orr.w	r2, r2, #8
 8007630:	619a      	str	r2, [r3, #24]
}
 8007632:	bf00      	nop
 8007634:	3758      	adds	r7, #88	; 0x58
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
	...

0800763c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800763c:	b084      	sub	sp, #16
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
 8007646:	f107 001c 	add.w	r0, r7, #28
 800764a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	2b01      	cmp	r3, #1
 8007652:	d126      	bne.n	80076a2 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007658:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	68da      	ldr	r2, [r3, #12]
 8007664:	4b38      	ldr	r3, [pc, #224]	; (8007748 <USB_CoreInit+0x10c>)
 8007666:	4013      	ands	r3, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f043 0210 	orr.w	r2, r3, #16
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007686:	2b01      	cmp	r3, #1
 8007688:	d105      	bne.n	8007696 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 facc 	bl	8007c34 <USB_CoreReset>
 800769c:	4603      	mov	r3, r0
 800769e:	73fb      	strb	r3, [r7, #15]
 80076a0:	e03a      	b.n	8007718 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80076a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d126      	bne.n	80076f6 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68da      	ldr	r2, [r3, #12]
 80076b8:	4b23      	ldr	r3, [pc, #140]	; (8007748 <USB_CoreInit+0x10c>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f023 0210 	bic.w	r2, r3, #16
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80076d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d105      	bne.n	80076ea <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 faa2 	bl	8007c34 <USB_CoreReset>
 80076f0:	4603      	mov	r3, r0
 80076f2:	73fb      	strb	r3, [r7, #15]
 80076f4:	e010      	b.n	8007718 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 fa96 	bl	8007c34 <USB_CoreReset>
 8007708:	4603      	mov	r3, r0
 800770a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007710:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b01      	cmp	r3, #1
 800771c:	d10b      	bne.n	8007736 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f043 0206 	orr.w	r2, r3, #6
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f043 0220 	orr.w	r2, r3, #32
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007742:	b004      	add	sp, #16
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	ffbdffbf 	.word	0xffbdffbf

0800774c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f023 0201 	bic.w	r2, r3, #1
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr

0800776e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	460b      	mov	r3, r1
 8007778:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800778a:	78fb      	ldrb	r3, [r7, #3]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d115      	bne.n	80077bc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800779c:	2001      	movs	r0, #1
 800779e:	f7fa ff95 	bl	80026cc <HAL_Delay>
      ms++;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3301      	adds	r3, #1
 80077a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 fa35 	bl	8007c18 <USB_GetMode>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d01e      	beq.n	80077f2 <USB_SetCurrentMode+0x84>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b31      	cmp	r3, #49	; 0x31
 80077b8:	d9f0      	bls.n	800779c <USB_SetCurrentMode+0x2e>
 80077ba:	e01a      	b.n	80077f2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077bc:	78fb      	ldrb	r3, [r7, #3]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d115      	bne.n	80077ee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077ce:	2001      	movs	r0, #1
 80077d0:	f7fa ff7c 	bl	80026cc <HAL_Delay>
      ms++;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	3301      	adds	r3, #1
 80077d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa1c 	bl	8007c18 <USB_GetMode>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <USB_SetCurrentMode+0x84>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2b31      	cmp	r3, #49	; 0x31
 80077ea:	d9f0      	bls.n	80077ce <USB_SetCurrentMode+0x60>
 80077ec:	e001      	b.n	80077f2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e005      	b.n	80077fe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b32      	cmp	r3, #50	; 0x32
 80077f6:	d101      	bne.n	80077fc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007808:	b084      	sub	sp, #16
 800780a:	b580      	push	{r7, lr}
 800780c:	b086      	sub	sp, #24
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007822:	2300      	movs	r3, #0
 8007824:	613b      	str	r3, [r7, #16]
 8007826:	e009      	b.n	800783c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	3340      	adds	r3, #64	; 0x40
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	2200      	movs	r2, #0
 8007834:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	3301      	adds	r3, #1
 800783a:	613b      	str	r3, [r7, #16]
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	2b0e      	cmp	r3, #14
 8007840:	d9f2      	bls.n	8007828 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007844:	2b00      	cmp	r3, #0
 8007846:	d11c      	bne.n	8007882 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007856:	f043 0302 	orr.w	r3, r3, #2
 800785a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007860:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	e005      	b.n	800788e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007886:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007894:	461a      	mov	r2, r3
 8007896:	2300      	movs	r3, #0
 8007898:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a0:	4619      	mov	r1, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a8:	461a      	mov	r2, r3
 80078aa:	680b      	ldr	r3, [r1, #0]
 80078ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d10c      	bne.n	80078ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d104      	bne.n	80078c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078ba:	2100      	movs	r1, #0
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f971 	bl	8007ba4 <USB_SetDevSpeed>
 80078c2:	e018      	b.n	80078f6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078c4:	2101      	movs	r1, #1
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f96c 	bl	8007ba4 <USB_SetDevSpeed>
 80078cc:	e013      	b.n	80078f6 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80078ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d10c      	bne.n	80078ee <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d104      	bne.n	80078e4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078da:	2100      	movs	r1, #0
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f961 	bl	8007ba4 <USB_SetDevSpeed>
 80078e2:	e008      	b.n	80078f6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078e4:	2101      	movs	r1, #1
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f95c 	bl	8007ba4 <USB_SetDevSpeed>
 80078ec:	e003      	b.n	80078f6 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078ee:	2103      	movs	r1, #3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f957 	bl	8007ba4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078f6:	2110      	movs	r1, #16
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f8f3 	bl	8007ae4 <USB_FlushTxFifo>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f91d 	bl	8007b48 <USB_FlushRxFifo>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800791e:	461a      	mov	r2, r3
 8007920:	2300      	movs	r3, #0
 8007922:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792a:	461a      	mov	r2, r3
 800792c:	2300      	movs	r3, #0
 800792e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007936:	461a      	mov	r2, r3
 8007938:	2300      	movs	r3, #0
 800793a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800793c:	2300      	movs	r3, #0
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	e043      	b.n	80079ca <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	015a      	lsls	r2, r3, #5
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007958:	d118      	bne.n	800798c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d10a      	bne.n	8007976 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796c:	461a      	mov	r2, r3
 800796e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	e013      	b.n	800799e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007982:	461a      	mov	r2, r3
 8007984:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007988:	6013      	str	r3, [r2, #0]
 800798a:	e008      	b.n	800799e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007998:	461a      	mov	r2, r3
 800799a:	2300      	movs	r3, #0
 800799c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	015a      	lsls	r2, r3, #5
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4413      	add	r3, r2
 80079a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079aa:	461a      	mov	r2, r3
 80079ac:	2300      	movs	r3, #0
 80079ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079bc:	461a      	mov	r2, r3
 80079be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	3301      	adds	r3, #1
 80079c8:	613b      	str	r3, [r7, #16]
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d3b7      	bcc.n	8007942 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d2:	2300      	movs	r3, #0
 80079d4:	613b      	str	r3, [r7, #16]
 80079d6:	e043      	b.n	8007a60 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	015a      	lsls	r2, r3, #5
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079ee:	d118      	bne.n	8007a22 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10a      	bne.n	8007a0c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a02:	461a      	mov	r2, r3
 8007a04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	e013      	b.n	8007a34 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a18:	461a      	mov	r2, r3
 8007a1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a1e:	6013      	str	r3, [r2, #0]
 8007a20:	e008      	b.n	8007a34 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a2e:	461a      	mov	r2, r3
 8007a30:	2300      	movs	r3, #0
 8007a32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	015a      	lsls	r2, r3, #5
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a40:	461a      	mov	r2, r3
 8007a42:	2300      	movs	r3, #0
 8007a44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	015a      	lsls	r2, r3, #5
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a52:	461a      	mov	r2, r3
 8007a54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	3301      	adds	r3, #1
 8007a5e:	613b      	str	r3, [r7, #16]
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d3b7      	bcc.n	80079d8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d105      	bne.n	8007a9c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	f043 0210 	orr.w	r2, r3, #16
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	699a      	ldr	r2, [r3, #24]
 8007aa0:	4b0e      	ldr	r3, [pc, #56]	; (8007adc <USB_DevInit+0x2d4>)
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d005      	beq.n	8007aba <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	f043 0208 	orr.w	r2, r3, #8
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d105      	bne.n	8007acc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	699a      	ldr	r2, [r3, #24]
 8007ac4:	4b06      	ldr	r3, [pc, #24]	; (8007ae0 <USB_DevInit+0x2d8>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ad8:	b004      	add	sp, #16
 8007ada:	4770      	bx	lr
 8007adc:	803c3800 	.word	0x803c3800
 8007ae0:	40000004 	.word	0x40000004

08007ae4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3301      	adds	r3, #1
 8007af6:	60fb      	str	r3, [r7, #12]
 8007af8:	4a12      	ldr	r2, [pc, #72]	; (8007b44 <USB_FlushTxFifo+0x60>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d901      	bls.n	8007b02 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e01a      	b.n	8007b38 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	daf3      	bge.n	8007af2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	019b      	lsls	r3, r3, #6
 8007b12:	f043 0220 	orr.w	r2, r3, #32
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	4a08      	ldr	r2, [pc, #32]	; (8007b44 <USB_FlushTxFifo+0x60>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d901      	bls.n	8007b2a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e006      	b.n	8007b38 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0320 	and.w	r3, r3, #32
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d0f1      	beq.n	8007b1a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	00030d40 	.word	0x00030d40

08007b48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3301      	adds	r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]
 8007b5a:	4a11      	ldr	r2, [pc, #68]	; (8007ba0 <USB_FlushRxFifo+0x58>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d901      	bls.n	8007b64 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e017      	b.n	8007b94 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	daf3      	bge.n	8007b54 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2210      	movs	r2, #16
 8007b74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	4a08      	ldr	r2, [pc, #32]	; (8007ba0 <USB_FlushRxFifo+0x58>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d901      	bls.n	8007b86 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e006      	b.n	8007b94 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0310 	and.w	r3, r3, #16
 8007b8e:	2b10      	cmp	r3, #16
 8007b90:	d0f1      	beq.n	8007b76 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	00030d40 	.word	0x00030d40

08007ba4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
 8007bac:	460b      	mov	r3, r1
 8007bae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	68f9      	ldr	r1, [r7, #12]
 8007bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b085      	sub	sp, #20
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bf0:	f023 0303 	bic.w	r3, r3, #3
 8007bf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c04:	f043 0302 	orr.w	r3, r3, #2
 8007c08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3714      	adds	r7, #20
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	f003 0301 	and.w	r3, r3, #1
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	3301      	adds	r3, #1
 8007c44:	60fb      	str	r3, [r7, #12]
 8007c46:	4a13      	ldr	r2, [pc, #76]	; (8007c94 <USB_CoreReset+0x60>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d901      	bls.n	8007c50 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e01a      	b.n	8007c86 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	daf3      	bge.n	8007c40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	f043 0201 	orr.w	r2, r3, #1
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	4a09      	ldr	r2, [pc, #36]	; (8007c94 <USB_CoreReset+0x60>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d901      	bls.n	8007c78 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e006      	b.n	8007c86 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d0f1      	beq.n	8007c68 <USB_CoreReset+0x34>

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	00030d40 	.word	0x00030d40

08007c98 <__errno>:
 8007c98:	4b01      	ldr	r3, [pc, #4]	; (8007ca0 <__errno+0x8>)
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20000020 	.word	0x20000020

08007ca4 <__libc_init_array>:
 8007ca4:	b570      	push	{r4, r5, r6, lr}
 8007ca6:	4d0d      	ldr	r5, [pc, #52]	; (8007cdc <__libc_init_array+0x38>)
 8007ca8:	4c0d      	ldr	r4, [pc, #52]	; (8007ce0 <__libc_init_array+0x3c>)
 8007caa:	1b64      	subs	r4, r4, r5
 8007cac:	10a4      	asrs	r4, r4, #2
 8007cae:	2600      	movs	r6, #0
 8007cb0:	42a6      	cmp	r6, r4
 8007cb2:	d109      	bne.n	8007cc8 <__libc_init_array+0x24>
 8007cb4:	4d0b      	ldr	r5, [pc, #44]	; (8007ce4 <__libc_init_array+0x40>)
 8007cb6:	4c0c      	ldr	r4, [pc, #48]	; (8007ce8 <__libc_init_array+0x44>)
 8007cb8:	f002 fec8 	bl	800aa4c <_init>
 8007cbc:	1b64      	subs	r4, r4, r5
 8007cbe:	10a4      	asrs	r4, r4, #2
 8007cc0:	2600      	movs	r6, #0
 8007cc2:	42a6      	cmp	r6, r4
 8007cc4:	d105      	bne.n	8007cd2 <__libc_init_array+0x2e>
 8007cc6:	bd70      	pop	{r4, r5, r6, pc}
 8007cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ccc:	4798      	blx	r3
 8007cce:	3601      	adds	r6, #1
 8007cd0:	e7ee      	b.n	8007cb0 <__libc_init_array+0xc>
 8007cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd6:	4798      	blx	r3
 8007cd8:	3601      	adds	r6, #1
 8007cda:	e7f2      	b.n	8007cc2 <__libc_init_array+0x1e>
 8007cdc:	0800aeec 	.word	0x0800aeec
 8007ce0:	0800aeec 	.word	0x0800aeec
 8007ce4:	0800aeec 	.word	0x0800aeec
 8007ce8:	0800aef0 	.word	0x0800aef0

08007cec <memset>:
 8007cec:	4402      	add	r2, r0
 8007cee:	4603      	mov	r3, r0
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d100      	bne.n	8007cf6 <memset+0xa>
 8007cf4:	4770      	bx	lr
 8007cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8007cfa:	e7f9      	b.n	8007cf0 <memset+0x4>

08007cfc <__cvt>:
 8007cfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d00:	ec55 4b10 	vmov	r4, r5, d0
 8007d04:	2d00      	cmp	r5, #0
 8007d06:	460e      	mov	r6, r1
 8007d08:	4619      	mov	r1, r3
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	bfbb      	ittet	lt
 8007d0e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007d12:	461d      	movlt	r5, r3
 8007d14:	2300      	movge	r3, #0
 8007d16:	232d      	movlt	r3, #45	; 0x2d
 8007d18:	700b      	strb	r3, [r1, #0]
 8007d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d1c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007d20:	4691      	mov	r9, r2
 8007d22:	f023 0820 	bic.w	r8, r3, #32
 8007d26:	bfbc      	itt	lt
 8007d28:	4622      	movlt	r2, r4
 8007d2a:	4614      	movlt	r4, r2
 8007d2c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d30:	d005      	beq.n	8007d3e <__cvt+0x42>
 8007d32:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007d36:	d100      	bne.n	8007d3a <__cvt+0x3e>
 8007d38:	3601      	adds	r6, #1
 8007d3a:	2102      	movs	r1, #2
 8007d3c:	e000      	b.n	8007d40 <__cvt+0x44>
 8007d3e:	2103      	movs	r1, #3
 8007d40:	ab03      	add	r3, sp, #12
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	ab02      	add	r3, sp, #8
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	ec45 4b10 	vmov	d0, r4, r5
 8007d4c:	4653      	mov	r3, sl
 8007d4e:	4632      	mov	r2, r6
 8007d50:	f000 fcfe 	bl	8008750 <_dtoa_r>
 8007d54:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007d58:	4607      	mov	r7, r0
 8007d5a:	d102      	bne.n	8007d62 <__cvt+0x66>
 8007d5c:	f019 0f01 	tst.w	r9, #1
 8007d60:	d022      	beq.n	8007da8 <__cvt+0xac>
 8007d62:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007d66:	eb07 0906 	add.w	r9, r7, r6
 8007d6a:	d110      	bne.n	8007d8e <__cvt+0x92>
 8007d6c:	783b      	ldrb	r3, [r7, #0]
 8007d6e:	2b30      	cmp	r3, #48	; 0x30
 8007d70:	d10a      	bne.n	8007d88 <__cvt+0x8c>
 8007d72:	2200      	movs	r2, #0
 8007d74:	2300      	movs	r3, #0
 8007d76:	4620      	mov	r0, r4
 8007d78:	4629      	mov	r1, r5
 8007d7a:	f7f8 fecd 	bl	8000b18 <__aeabi_dcmpeq>
 8007d7e:	b918      	cbnz	r0, 8007d88 <__cvt+0x8c>
 8007d80:	f1c6 0601 	rsb	r6, r6, #1
 8007d84:	f8ca 6000 	str.w	r6, [sl]
 8007d88:	f8da 3000 	ldr.w	r3, [sl]
 8007d8c:	4499      	add	r9, r3
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2300      	movs	r3, #0
 8007d92:	4620      	mov	r0, r4
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7f8 febf 	bl	8000b18 <__aeabi_dcmpeq>
 8007d9a:	b108      	cbz	r0, 8007da0 <__cvt+0xa4>
 8007d9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007da0:	2230      	movs	r2, #48	; 0x30
 8007da2:	9b03      	ldr	r3, [sp, #12]
 8007da4:	454b      	cmp	r3, r9
 8007da6:	d307      	bcc.n	8007db8 <__cvt+0xbc>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dac:	1bdb      	subs	r3, r3, r7
 8007dae:	4638      	mov	r0, r7
 8007db0:	6013      	str	r3, [r2, #0]
 8007db2:	b004      	add	sp, #16
 8007db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007db8:	1c59      	adds	r1, r3, #1
 8007dba:	9103      	str	r1, [sp, #12]
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	e7f0      	b.n	8007da2 <__cvt+0xa6>

08007dc0 <__exponent>:
 8007dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2900      	cmp	r1, #0
 8007dc6:	bfb8      	it	lt
 8007dc8:	4249      	neglt	r1, r1
 8007dca:	f803 2b02 	strb.w	r2, [r3], #2
 8007dce:	bfb4      	ite	lt
 8007dd0:	222d      	movlt	r2, #45	; 0x2d
 8007dd2:	222b      	movge	r2, #43	; 0x2b
 8007dd4:	2909      	cmp	r1, #9
 8007dd6:	7042      	strb	r2, [r0, #1]
 8007dd8:	dd2a      	ble.n	8007e30 <__exponent+0x70>
 8007dda:	f10d 0407 	add.w	r4, sp, #7
 8007dde:	46a4      	mov	ip, r4
 8007de0:	270a      	movs	r7, #10
 8007de2:	46a6      	mov	lr, r4
 8007de4:	460a      	mov	r2, r1
 8007de6:	fb91 f6f7 	sdiv	r6, r1, r7
 8007dea:	fb07 1516 	mls	r5, r7, r6, r1
 8007dee:	3530      	adds	r5, #48	; 0x30
 8007df0:	2a63      	cmp	r2, #99	; 0x63
 8007df2:	f104 34ff 	add.w	r4, r4, #4294967295
 8007df6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	dcf1      	bgt.n	8007de2 <__exponent+0x22>
 8007dfe:	3130      	adds	r1, #48	; 0x30
 8007e00:	f1ae 0502 	sub.w	r5, lr, #2
 8007e04:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007e08:	1c44      	adds	r4, r0, #1
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	4561      	cmp	r1, ip
 8007e0e:	d30a      	bcc.n	8007e26 <__exponent+0x66>
 8007e10:	f10d 0209 	add.w	r2, sp, #9
 8007e14:	eba2 020e 	sub.w	r2, r2, lr
 8007e18:	4565      	cmp	r5, ip
 8007e1a:	bf88      	it	hi
 8007e1c:	2200      	movhi	r2, #0
 8007e1e:	4413      	add	r3, r2
 8007e20:	1a18      	subs	r0, r3, r0
 8007e22:	b003      	add	sp, #12
 8007e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e2a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007e2e:	e7ed      	b.n	8007e0c <__exponent+0x4c>
 8007e30:	2330      	movs	r3, #48	; 0x30
 8007e32:	3130      	adds	r1, #48	; 0x30
 8007e34:	7083      	strb	r3, [r0, #2]
 8007e36:	70c1      	strb	r1, [r0, #3]
 8007e38:	1d03      	adds	r3, r0, #4
 8007e3a:	e7f1      	b.n	8007e20 <__exponent+0x60>

08007e3c <_printf_float>:
 8007e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e40:	ed2d 8b02 	vpush	{d8}
 8007e44:	b08d      	sub	sp, #52	; 0x34
 8007e46:	460c      	mov	r4, r1
 8007e48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007e4c:	4616      	mov	r6, r2
 8007e4e:	461f      	mov	r7, r3
 8007e50:	4605      	mov	r5, r0
 8007e52:	f001 fa69 	bl	8009328 <_localeconv_r>
 8007e56:	f8d0 a000 	ldr.w	sl, [r0]
 8007e5a:	4650      	mov	r0, sl
 8007e5c:	f7f8 f9e0 	bl	8000220 <strlen>
 8007e60:	2300      	movs	r3, #0
 8007e62:	930a      	str	r3, [sp, #40]	; 0x28
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	9305      	str	r3, [sp, #20]
 8007e68:	f8d8 3000 	ldr.w	r3, [r8]
 8007e6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007e70:	3307      	adds	r3, #7
 8007e72:	f023 0307 	bic.w	r3, r3, #7
 8007e76:	f103 0208 	add.w	r2, r3, #8
 8007e7a:	f8c8 2000 	str.w	r2, [r8]
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007e86:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007e8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007e8e:	9307      	str	r3, [sp, #28]
 8007e90:	f8cd 8018 	str.w	r8, [sp, #24]
 8007e94:	ee08 0a10 	vmov	s16, r0
 8007e98:	4b9f      	ldr	r3, [pc, #636]	; (8008118 <_printf_float+0x2dc>)
 8007e9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea2:	f7f8 fe6b 	bl	8000b7c <__aeabi_dcmpun>
 8007ea6:	bb88      	cbnz	r0, 8007f0c <_printf_float+0xd0>
 8007ea8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eac:	4b9a      	ldr	r3, [pc, #616]	; (8008118 <_printf_float+0x2dc>)
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	f7f8 fe45 	bl	8000b40 <__aeabi_dcmple>
 8007eb6:	bb48      	cbnz	r0, 8007f0c <_printf_float+0xd0>
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2300      	movs	r3, #0
 8007ebc:	4640      	mov	r0, r8
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	f7f8 fe34 	bl	8000b2c <__aeabi_dcmplt>
 8007ec4:	b110      	cbz	r0, 8007ecc <_printf_float+0x90>
 8007ec6:	232d      	movs	r3, #45	; 0x2d
 8007ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ecc:	4b93      	ldr	r3, [pc, #588]	; (800811c <_printf_float+0x2e0>)
 8007ece:	4894      	ldr	r0, [pc, #592]	; (8008120 <_printf_float+0x2e4>)
 8007ed0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007ed4:	bf94      	ite	ls
 8007ed6:	4698      	movls	r8, r3
 8007ed8:	4680      	movhi	r8, r0
 8007eda:	2303      	movs	r3, #3
 8007edc:	6123      	str	r3, [r4, #16]
 8007ede:	9b05      	ldr	r3, [sp, #20]
 8007ee0:	f023 0204 	bic.w	r2, r3, #4
 8007ee4:	6022      	str	r2, [r4, #0]
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	9700      	str	r7, [sp, #0]
 8007eec:	4633      	mov	r3, r6
 8007eee:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	f000 f9d8 	bl	80082a8 <_printf_common>
 8007ef8:	3001      	adds	r0, #1
 8007efa:	f040 8090 	bne.w	800801e <_printf_float+0x1e2>
 8007efe:	f04f 30ff 	mov.w	r0, #4294967295
 8007f02:	b00d      	add	sp, #52	; 0x34
 8007f04:	ecbd 8b02 	vpop	{d8}
 8007f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0c:	4642      	mov	r2, r8
 8007f0e:	464b      	mov	r3, r9
 8007f10:	4640      	mov	r0, r8
 8007f12:	4649      	mov	r1, r9
 8007f14:	f7f8 fe32 	bl	8000b7c <__aeabi_dcmpun>
 8007f18:	b140      	cbz	r0, 8007f2c <_printf_float+0xf0>
 8007f1a:	464b      	mov	r3, r9
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	bfbc      	itt	lt
 8007f20:	232d      	movlt	r3, #45	; 0x2d
 8007f22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007f26:	487f      	ldr	r0, [pc, #508]	; (8008124 <_printf_float+0x2e8>)
 8007f28:	4b7f      	ldr	r3, [pc, #508]	; (8008128 <_printf_float+0x2ec>)
 8007f2a:	e7d1      	b.n	8007ed0 <_printf_float+0x94>
 8007f2c:	6863      	ldr	r3, [r4, #4]
 8007f2e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007f32:	9206      	str	r2, [sp, #24]
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	d13f      	bne.n	8007fb8 <_printf_float+0x17c>
 8007f38:	2306      	movs	r3, #6
 8007f3a:	6063      	str	r3, [r4, #4]
 8007f3c:	9b05      	ldr	r3, [sp, #20]
 8007f3e:	6861      	ldr	r1, [r4, #4]
 8007f40:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007f44:	2300      	movs	r3, #0
 8007f46:	9303      	str	r3, [sp, #12]
 8007f48:	ab0a      	add	r3, sp, #40	; 0x28
 8007f4a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007f4e:	ab09      	add	r3, sp, #36	; 0x24
 8007f50:	ec49 8b10 	vmov	d0, r8, r9
 8007f54:	9300      	str	r3, [sp, #0]
 8007f56:	6022      	str	r2, [r4, #0]
 8007f58:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	f7ff fecd 	bl	8007cfc <__cvt>
 8007f62:	9b06      	ldr	r3, [sp, #24]
 8007f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f66:	2b47      	cmp	r3, #71	; 0x47
 8007f68:	4680      	mov	r8, r0
 8007f6a:	d108      	bne.n	8007f7e <_printf_float+0x142>
 8007f6c:	1cc8      	adds	r0, r1, #3
 8007f6e:	db02      	blt.n	8007f76 <_printf_float+0x13a>
 8007f70:	6863      	ldr	r3, [r4, #4]
 8007f72:	4299      	cmp	r1, r3
 8007f74:	dd41      	ble.n	8007ffa <_printf_float+0x1be>
 8007f76:	f1ab 0b02 	sub.w	fp, fp, #2
 8007f7a:	fa5f fb8b 	uxtb.w	fp, fp
 8007f7e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007f82:	d820      	bhi.n	8007fc6 <_printf_float+0x18a>
 8007f84:	3901      	subs	r1, #1
 8007f86:	465a      	mov	r2, fp
 8007f88:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007f8c:	9109      	str	r1, [sp, #36]	; 0x24
 8007f8e:	f7ff ff17 	bl	8007dc0 <__exponent>
 8007f92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f94:	1813      	adds	r3, r2, r0
 8007f96:	2a01      	cmp	r2, #1
 8007f98:	4681      	mov	r9, r0
 8007f9a:	6123      	str	r3, [r4, #16]
 8007f9c:	dc02      	bgt.n	8007fa4 <_printf_float+0x168>
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	07d2      	lsls	r2, r2, #31
 8007fa2:	d501      	bpl.n	8007fa8 <_printf_float+0x16c>
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	6123      	str	r3, [r4, #16]
 8007fa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d09c      	beq.n	8007eea <_printf_float+0xae>
 8007fb0:	232d      	movs	r3, #45	; 0x2d
 8007fb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fb6:	e798      	b.n	8007eea <_printf_float+0xae>
 8007fb8:	9a06      	ldr	r2, [sp, #24]
 8007fba:	2a47      	cmp	r2, #71	; 0x47
 8007fbc:	d1be      	bne.n	8007f3c <_printf_float+0x100>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1bc      	bne.n	8007f3c <_printf_float+0x100>
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e7b9      	b.n	8007f3a <_printf_float+0xfe>
 8007fc6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007fca:	d118      	bne.n	8007ffe <_printf_float+0x1c2>
 8007fcc:	2900      	cmp	r1, #0
 8007fce:	6863      	ldr	r3, [r4, #4]
 8007fd0:	dd0b      	ble.n	8007fea <_printf_float+0x1ae>
 8007fd2:	6121      	str	r1, [r4, #16]
 8007fd4:	b913      	cbnz	r3, 8007fdc <_printf_float+0x1a0>
 8007fd6:	6822      	ldr	r2, [r4, #0]
 8007fd8:	07d0      	lsls	r0, r2, #31
 8007fda:	d502      	bpl.n	8007fe2 <_printf_float+0x1a6>
 8007fdc:	3301      	adds	r3, #1
 8007fde:	440b      	add	r3, r1
 8007fe0:	6123      	str	r3, [r4, #16]
 8007fe2:	65a1      	str	r1, [r4, #88]	; 0x58
 8007fe4:	f04f 0900 	mov.w	r9, #0
 8007fe8:	e7de      	b.n	8007fa8 <_printf_float+0x16c>
 8007fea:	b913      	cbnz	r3, 8007ff2 <_printf_float+0x1b6>
 8007fec:	6822      	ldr	r2, [r4, #0]
 8007fee:	07d2      	lsls	r2, r2, #31
 8007ff0:	d501      	bpl.n	8007ff6 <_printf_float+0x1ba>
 8007ff2:	3302      	adds	r3, #2
 8007ff4:	e7f4      	b.n	8007fe0 <_printf_float+0x1a4>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e7f2      	b.n	8007fe0 <_printf_float+0x1a4>
 8007ffa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008000:	4299      	cmp	r1, r3
 8008002:	db05      	blt.n	8008010 <_printf_float+0x1d4>
 8008004:	6823      	ldr	r3, [r4, #0]
 8008006:	6121      	str	r1, [r4, #16]
 8008008:	07d8      	lsls	r0, r3, #31
 800800a:	d5ea      	bpl.n	8007fe2 <_printf_float+0x1a6>
 800800c:	1c4b      	adds	r3, r1, #1
 800800e:	e7e7      	b.n	8007fe0 <_printf_float+0x1a4>
 8008010:	2900      	cmp	r1, #0
 8008012:	bfd4      	ite	le
 8008014:	f1c1 0202 	rsble	r2, r1, #2
 8008018:	2201      	movgt	r2, #1
 800801a:	4413      	add	r3, r2
 800801c:	e7e0      	b.n	8007fe0 <_printf_float+0x1a4>
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	055a      	lsls	r2, r3, #21
 8008022:	d407      	bmi.n	8008034 <_printf_float+0x1f8>
 8008024:	6923      	ldr	r3, [r4, #16]
 8008026:	4642      	mov	r2, r8
 8008028:	4631      	mov	r1, r6
 800802a:	4628      	mov	r0, r5
 800802c:	47b8      	blx	r7
 800802e:	3001      	adds	r0, #1
 8008030:	d12c      	bne.n	800808c <_printf_float+0x250>
 8008032:	e764      	b.n	8007efe <_printf_float+0xc2>
 8008034:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008038:	f240 80e0 	bls.w	80081fc <_printf_float+0x3c0>
 800803c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008040:	2200      	movs	r2, #0
 8008042:	2300      	movs	r3, #0
 8008044:	f7f8 fd68 	bl	8000b18 <__aeabi_dcmpeq>
 8008048:	2800      	cmp	r0, #0
 800804a:	d034      	beq.n	80080b6 <_printf_float+0x27a>
 800804c:	4a37      	ldr	r2, [pc, #220]	; (800812c <_printf_float+0x2f0>)
 800804e:	2301      	movs	r3, #1
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	f43f af51 	beq.w	8007efe <_printf_float+0xc2>
 800805c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008060:	429a      	cmp	r2, r3
 8008062:	db02      	blt.n	800806a <_printf_float+0x22e>
 8008064:	6823      	ldr	r3, [r4, #0]
 8008066:	07d8      	lsls	r0, r3, #31
 8008068:	d510      	bpl.n	800808c <_printf_float+0x250>
 800806a:	ee18 3a10 	vmov	r3, s16
 800806e:	4652      	mov	r2, sl
 8008070:	4631      	mov	r1, r6
 8008072:	4628      	mov	r0, r5
 8008074:	47b8      	blx	r7
 8008076:	3001      	adds	r0, #1
 8008078:	f43f af41 	beq.w	8007efe <_printf_float+0xc2>
 800807c:	f04f 0800 	mov.w	r8, #0
 8008080:	f104 091a 	add.w	r9, r4, #26
 8008084:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008086:	3b01      	subs	r3, #1
 8008088:	4543      	cmp	r3, r8
 800808a:	dc09      	bgt.n	80080a0 <_printf_float+0x264>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	079b      	lsls	r3, r3, #30
 8008090:	f100 8105 	bmi.w	800829e <_printf_float+0x462>
 8008094:	68e0      	ldr	r0, [r4, #12]
 8008096:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008098:	4298      	cmp	r0, r3
 800809a:	bfb8      	it	lt
 800809c:	4618      	movlt	r0, r3
 800809e:	e730      	b.n	8007f02 <_printf_float+0xc6>
 80080a0:	2301      	movs	r3, #1
 80080a2:	464a      	mov	r2, r9
 80080a4:	4631      	mov	r1, r6
 80080a6:	4628      	mov	r0, r5
 80080a8:	47b8      	blx	r7
 80080aa:	3001      	adds	r0, #1
 80080ac:	f43f af27 	beq.w	8007efe <_printf_float+0xc2>
 80080b0:	f108 0801 	add.w	r8, r8, #1
 80080b4:	e7e6      	b.n	8008084 <_printf_float+0x248>
 80080b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	dc39      	bgt.n	8008130 <_printf_float+0x2f4>
 80080bc:	4a1b      	ldr	r2, [pc, #108]	; (800812c <_printf_float+0x2f0>)
 80080be:	2301      	movs	r3, #1
 80080c0:	4631      	mov	r1, r6
 80080c2:	4628      	mov	r0, r5
 80080c4:	47b8      	blx	r7
 80080c6:	3001      	adds	r0, #1
 80080c8:	f43f af19 	beq.w	8007efe <_printf_float+0xc2>
 80080cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80080d0:	4313      	orrs	r3, r2
 80080d2:	d102      	bne.n	80080da <_printf_float+0x29e>
 80080d4:	6823      	ldr	r3, [r4, #0]
 80080d6:	07d9      	lsls	r1, r3, #31
 80080d8:	d5d8      	bpl.n	800808c <_printf_float+0x250>
 80080da:	ee18 3a10 	vmov	r3, s16
 80080de:	4652      	mov	r2, sl
 80080e0:	4631      	mov	r1, r6
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b8      	blx	r7
 80080e6:	3001      	adds	r0, #1
 80080e8:	f43f af09 	beq.w	8007efe <_printf_float+0xc2>
 80080ec:	f04f 0900 	mov.w	r9, #0
 80080f0:	f104 0a1a 	add.w	sl, r4, #26
 80080f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080f6:	425b      	negs	r3, r3
 80080f8:	454b      	cmp	r3, r9
 80080fa:	dc01      	bgt.n	8008100 <_printf_float+0x2c4>
 80080fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080fe:	e792      	b.n	8008026 <_printf_float+0x1ea>
 8008100:	2301      	movs	r3, #1
 8008102:	4652      	mov	r2, sl
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	f43f aef7 	beq.w	8007efe <_printf_float+0xc2>
 8008110:	f109 0901 	add.w	r9, r9, #1
 8008114:	e7ee      	b.n	80080f4 <_printf_float+0x2b8>
 8008116:	bf00      	nop
 8008118:	7fefffff 	.word	0x7fefffff
 800811c:	0800ab08 	.word	0x0800ab08
 8008120:	0800ab0c 	.word	0x0800ab0c
 8008124:	0800ab14 	.word	0x0800ab14
 8008128:	0800ab10 	.word	0x0800ab10
 800812c:	0800ab18 	.word	0x0800ab18
 8008130:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008132:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008134:	429a      	cmp	r2, r3
 8008136:	bfa8      	it	ge
 8008138:	461a      	movge	r2, r3
 800813a:	2a00      	cmp	r2, #0
 800813c:	4691      	mov	r9, r2
 800813e:	dc37      	bgt.n	80081b0 <_printf_float+0x374>
 8008140:	f04f 0b00 	mov.w	fp, #0
 8008144:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008148:	f104 021a 	add.w	r2, r4, #26
 800814c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800814e:	9305      	str	r3, [sp, #20]
 8008150:	eba3 0309 	sub.w	r3, r3, r9
 8008154:	455b      	cmp	r3, fp
 8008156:	dc33      	bgt.n	80081c0 <_printf_float+0x384>
 8008158:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800815c:	429a      	cmp	r2, r3
 800815e:	db3b      	blt.n	80081d8 <_printf_float+0x39c>
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	07da      	lsls	r2, r3, #31
 8008164:	d438      	bmi.n	80081d8 <_printf_float+0x39c>
 8008166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008168:	9b05      	ldr	r3, [sp, #20]
 800816a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	eba2 0901 	sub.w	r9, r2, r1
 8008172:	4599      	cmp	r9, r3
 8008174:	bfa8      	it	ge
 8008176:	4699      	movge	r9, r3
 8008178:	f1b9 0f00 	cmp.w	r9, #0
 800817c:	dc35      	bgt.n	80081ea <_printf_float+0x3ae>
 800817e:	f04f 0800 	mov.w	r8, #0
 8008182:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008186:	f104 0a1a 	add.w	sl, r4, #26
 800818a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800818e:	1a9b      	subs	r3, r3, r2
 8008190:	eba3 0309 	sub.w	r3, r3, r9
 8008194:	4543      	cmp	r3, r8
 8008196:	f77f af79 	ble.w	800808c <_printf_float+0x250>
 800819a:	2301      	movs	r3, #1
 800819c:	4652      	mov	r2, sl
 800819e:	4631      	mov	r1, r6
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b8      	blx	r7
 80081a4:	3001      	adds	r0, #1
 80081a6:	f43f aeaa 	beq.w	8007efe <_printf_float+0xc2>
 80081aa:	f108 0801 	add.w	r8, r8, #1
 80081ae:	e7ec      	b.n	800818a <_printf_float+0x34e>
 80081b0:	4613      	mov	r3, r2
 80081b2:	4631      	mov	r1, r6
 80081b4:	4642      	mov	r2, r8
 80081b6:	4628      	mov	r0, r5
 80081b8:	47b8      	blx	r7
 80081ba:	3001      	adds	r0, #1
 80081bc:	d1c0      	bne.n	8008140 <_printf_float+0x304>
 80081be:	e69e      	b.n	8007efe <_printf_float+0xc2>
 80081c0:	2301      	movs	r3, #1
 80081c2:	4631      	mov	r1, r6
 80081c4:	4628      	mov	r0, r5
 80081c6:	9205      	str	r2, [sp, #20]
 80081c8:	47b8      	blx	r7
 80081ca:	3001      	adds	r0, #1
 80081cc:	f43f ae97 	beq.w	8007efe <_printf_float+0xc2>
 80081d0:	9a05      	ldr	r2, [sp, #20]
 80081d2:	f10b 0b01 	add.w	fp, fp, #1
 80081d6:	e7b9      	b.n	800814c <_printf_float+0x310>
 80081d8:	ee18 3a10 	vmov	r3, s16
 80081dc:	4652      	mov	r2, sl
 80081de:	4631      	mov	r1, r6
 80081e0:	4628      	mov	r0, r5
 80081e2:	47b8      	blx	r7
 80081e4:	3001      	adds	r0, #1
 80081e6:	d1be      	bne.n	8008166 <_printf_float+0x32a>
 80081e8:	e689      	b.n	8007efe <_printf_float+0xc2>
 80081ea:	9a05      	ldr	r2, [sp, #20]
 80081ec:	464b      	mov	r3, r9
 80081ee:	4442      	add	r2, r8
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	d1c1      	bne.n	800817e <_printf_float+0x342>
 80081fa:	e680      	b.n	8007efe <_printf_float+0xc2>
 80081fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80081fe:	2a01      	cmp	r2, #1
 8008200:	dc01      	bgt.n	8008206 <_printf_float+0x3ca>
 8008202:	07db      	lsls	r3, r3, #31
 8008204:	d538      	bpl.n	8008278 <_printf_float+0x43c>
 8008206:	2301      	movs	r3, #1
 8008208:	4642      	mov	r2, r8
 800820a:	4631      	mov	r1, r6
 800820c:	4628      	mov	r0, r5
 800820e:	47b8      	blx	r7
 8008210:	3001      	adds	r0, #1
 8008212:	f43f ae74 	beq.w	8007efe <_printf_float+0xc2>
 8008216:	ee18 3a10 	vmov	r3, s16
 800821a:	4652      	mov	r2, sl
 800821c:	4631      	mov	r1, r6
 800821e:	4628      	mov	r0, r5
 8008220:	47b8      	blx	r7
 8008222:	3001      	adds	r0, #1
 8008224:	f43f ae6b 	beq.w	8007efe <_printf_float+0xc2>
 8008228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800822c:	2200      	movs	r2, #0
 800822e:	2300      	movs	r3, #0
 8008230:	f7f8 fc72 	bl	8000b18 <__aeabi_dcmpeq>
 8008234:	b9d8      	cbnz	r0, 800826e <_printf_float+0x432>
 8008236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008238:	f108 0201 	add.w	r2, r8, #1
 800823c:	3b01      	subs	r3, #1
 800823e:	4631      	mov	r1, r6
 8008240:	4628      	mov	r0, r5
 8008242:	47b8      	blx	r7
 8008244:	3001      	adds	r0, #1
 8008246:	d10e      	bne.n	8008266 <_printf_float+0x42a>
 8008248:	e659      	b.n	8007efe <_printf_float+0xc2>
 800824a:	2301      	movs	r3, #1
 800824c:	4652      	mov	r2, sl
 800824e:	4631      	mov	r1, r6
 8008250:	4628      	mov	r0, r5
 8008252:	47b8      	blx	r7
 8008254:	3001      	adds	r0, #1
 8008256:	f43f ae52 	beq.w	8007efe <_printf_float+0xc2>
 800825a:	f108 0801 	add.w	r8, r8, #1
 800825e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008260:	3b01      	subs	r3, #1
 8008262:	4543      	cmp	r3, r8
 8008264:	dcf1      	bgt.n	800824a <_printf_float+0x40e>
 8008266:	464b      	mov	r3, r9
 8008268:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800826c:	e6dc      	b.n	8008028 <_printf_float+0x1ec>
 800826e:	f04f 0800 	mov.w	r8, #0
 8008272:	f104 0a1a 	add.w	sl, r4, #26
 8008276:	e7f2      	b.n	800825e <_printf_float+0x422>
 8008278:	2301      	movs	r3, #1
 800827a:	4642      	mov	r2, r8
 800827c:	e7df      	b.n	800823e <_printf_float+0x402>
 800827e:	2301      	movs	r3, #1
 8008280:	464a      	mov	r2, r9
 8008282:	4631      	mov	r1, r6
 8008284:	4628      	mov	r0, r5
 8008286:	47b8      	blx	r7
 8008288:	3001      	adds	r0, #1
 800828a:	f43f ae38 	beq.w	8007efe <_printf_float+0xc2>
 800828e:	f108 0801 	add.w	r8, r8, #1
 8008292:	68e3      	ldr	r3, [r4, #12]
 8008294:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008296:	1a5b      	subs	r3, r3, r1
 8008298:	4543      	cmp	r3, r8
 800829a:	dcf0      	bgt.n	800827e <_printf_float+0x442>
 800829c:	e6fa      	b.n	8008094 <_printf_float+0x258>
 800829e:	f04f 0800 	mov.w	r8, #0
 80082a2:	f104 0919 	add.w	r9, r4, #25
 80082a6:	e7f4      	b.n	8008292 <_printf_float+0x456>

080082a8 <_printf_common>:
 80082a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082ac:	4616      	mov	r6, r2
 80082ae:	4699      	mov	r9, r3
 80082b0:	688a      	ldr	r2, [r1, #8]
 80082b2:	690b      	ldr	r3, [r1, #16]
 80082b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082b8:	4293      	cmp	r3, r2
 80082ba:	bfb8      	it	lt
 80082bc:	4613      	movlt	r3, r2
 80082be:	6033      	str	r3, [r6, #0]
 80082c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082c4:	4607      	mov	r7, r0
 80082c6:	460c      	mov	r4, r1
 80082c8:	b10a      	cbz	r2, 80082ce <_printf_common+0x26>
 80082ca:	3301      	adds	r3, #1
 80082cc:	6033      	str	r3, [r6, #0]
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	0699      	lsls	r1, r3, #26
 80082d2:	bf42      	ittt	mi
 80082d4:	6833      	ldrmi	r3, [r6, #0]
 80082d6:	3302      	addmi	r3, #2
 80082d8:	6033      	strmi	r3, [r6, #0]
 80082da:	6825      	ldr	r5, [r4, #0]
 80082dc:	f015 0506 	ands.w	r5, r5, #6
 80082e0:	d106      	bne.n	80082f0 <_printf_common+0x48>
 80082e2:	f104 0a19 	add.w	sl, r4, #25
 80082e6:	68e3      	ldr	r3, [r4, #12]
 80082e8:	6832      	ldr	r2, [r6, #0]
 80082ea:	1a9b      	subs	r3, r3, r2
 80082ec:	42ab      	cmp	r3, r5
 80082ee:	dc26      	bgt.n	800833e <_printf_common+0x96>
 80082f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082f4:	1e13      	subs	r3, r2, #0
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	bf18      	it	ne
 80082fa:	2301      	movne	r3, #1
 80082fc:	0692      	lsls	r2, r2, #26
 80082fe:	d42b      	bmi.n	8008358 <_printf_common+0xb0>
 8008300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008304:	4649      	mov	r1, r9
 8008306:	4638      	mov	r0, r7
 8008308:	47c0      	blx	r8
 800830a:	3001      	adds	r0, #1
 800830c:	d01e      	beq.n	800834c <_printf_common+0xa4>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	68e5      	ldr	r5, [r4, #12]
 8008312:	6832      	ldr	r2, [r6, #0]
 8008314:	f003 0306 	and.w	r3, r3, #6
 8008318:	2b04      	cmp	r3, #4
 800831a:	bf08      	it	eq
 800831c:	1aad      	subeq	r5, r5, r2
 800831e:	68a3      	ldr	r3, [r4, #8]
 8008320:	6922      	ldr	r2, [r4, #16]
 8008322:	bf0c      	ite	eq
 8008324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008328:	2500      	movne	r5, #0
 800832a:	4293      	cmp	r3, r2
 800832c:	bfc4      	itt	gt
 800832e:	1a9b      	subgt	r3, r3, r2
 8008330:	18ed      	addgt	r5, r5, r3
 8008332:	2600      	movs	r6, #0
 8008334:	341a      	adds	r4, #26
 8008336:	42b5      	cmp	r5, r6
 8008338:	d11a      	bne.n	8008370 <_printf_common+0xc8>
 800833a:	2000      	movs	r0, #0
 800833c:	e008      	b.n	8008350 <_printf_common+0xa8>
 800833e:	2301      	movs	r3, #1
 8008340:	4652      	mov	r2, sl
 8008342:	4649      	mov	r1, r9
 8008344:	4638      	mov	r0, r7
 8008346:	47c0      	blx	r8
 8008348:	3001      	adds	r0, #1
 800834a:	d103      	bne.n	8008354 <_printf_common+0xac>
 800834c:	f04f 30ff 	mov.w	r0, #4294967295
 8008350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008354:	3501      	adds	r5, #1
 8008356:	e7c6      	b.n	80082e6 <_printf_common+0x3e>
 8008358:	18e1      	adds	r1, r4, r3
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	2030      	movs	r0, #48	; 0x30
 800835e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008362:	4422      	add	r2, r4
 8008364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800836c:	3302      	adds	r3, #2
 800836e:	e7c7      	b.n	8008300 <_printf_common+0x58>
 8008370:	2301      	movs	r3, #1
 8008372:	4622      	mov	r2, r4
 8008374:	4649      	mov	r1, r9
 8008376:	4638      	mov	r0, r7
 8008378:	47c0      	blx	r8
 800837a:	3001      	adds	r0, #1
 800837c:	d0e6      	beq.n	800834c <_printf_common+0xa4>
 800837e:	3601      	adds	r6, #1
 8008380:	e7d9      	b.n	8008336 <_printf_common+0x8e>
	...

08008384 <_printf_i>:
 8008384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	460c      	mov	r4, r1
 800838a:	4691      	mov	r9, r2
 800838c:	7e27      	ldrb	r7, [r4, #24]
 800838e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008390:	2f78      	cmp	r7, #120	; 0x78
 8008392:	4680      	mov	r8, r0
 8008394:	469a      	mov	sl, r3
 8008396:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800839a:	d807      	bhi.n	80083ac <_printf_i+0x28>
 800839c:	2f62      	cmp	r7, #98	; 0x62
 800839e:	d80a      	bhi.n	80083b6 <_printf_i+0x32>
 80083a0:	2f00      	cmp	r7, #0
 80083a2:	f000 80d8 	beq.w	8008556 <_printf_i+0x1d2>
 80083a6:	2f58      	cmp	r7, #88	; 0x58
 80083a8:	f000 80a3 	beq.w	80084f2 <_printf_i+0x16e>
 80083ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80083b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083b4:	e03a      	b.n	800842c <_printf_i+0xa8>
 80083b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083ba:	2b15      	cmp	r3, #21
 80083bc:	d8f6      	bhi.n	80083ac <_printf_i+0x28>
 80083be:	a001      	add	r0, pc, #4	; (adr r0, 80083c4 <_printf_i+0x40>)
 80083c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80083c4:	0800841d 	.word	0x0800841d
 80083c8:	08008431 	.word	0x08008431
 80083cc:	080083ad 	.word	0x080083ad
 80083d0:	080083ad 	.word	0x080083ad
 80083d4:	080083ad 	.word	0x080083ad
 80083d8:	080083ad 	.word	0x080083ad
 80083dc:	08008431 	.word	0x08008431
 80083e0:	080083ad 	.word	0x080083ad
 80083e4:	080083ad 	.word	0x080083ad
 80083e8:	080083ad 	.word	0x080083ad
 80083ec:	080083ad 	.word	0x080083ad
 80083f0:	0800853d 	.word	0x0800853d
 80083f4:	08008461 	.word	0x08008461
 80083f8:	0800851f 	.word	0x0800851f
 80083fc:	080083ad 	.word	0x080083ad
 8008400:	080083ad 	.word	0x080083ad
 8008404:	0800855f 	.word	0x0800855f
 8008408:	080083ad 	.word	0x080083ad
 800840c:	08008461 	.word	0x08008461
 8008410:	080083ad 	.word	0x080083ad
 8008414:	080083ad 	.word	0x080083ad
 8008418:	08008527 	.word	0x08008527
 800841c:	680b      	ldr	r3, [r1, #0]
 800841e:	1d1a      	adds	r2, r3, #4
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	600a      	str	r2, [r1, #0]
 8008424:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800842c:	2301      	movs	r3, #1
 800842e:	e0a3      	b.n	8008578 <_printf_i+0x1f4>
 8008430:	6825      	ldr	r5, [r4, #0]
 8008432:	6808      	ldr	r0, [r1, #0]
 8008434:	062e      	lsls	r6, r5, #24
 8008436:	f100 0304 	add.w	r3, r0, #4
 800843a:	d50a      	bpl.n	8008452 <_printf_i+0xce>
 800843c:	6805      	ldr	r5, [r0, #0]
 800843e:	600b      	str	r3, [r1, #0]
 8008440:	2d00      	cmp	r5, #0
 8008442:	da03      	bge.n	800844c <_printf_i+0xc8>
 8008444:	232d      	movs	r3, #45	; 0x2d
 8008446:	426d      	negs	r5, r5
 8008448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800844c:	485e      	ldr	r0, [pc, #376]	; (80085c8 <_printf_i+0x244>)
 800844e:	230a      	movs	r3, #10
 8008450:	e019      	b.n	8008486 <_printf_i+0x102>
 8008452:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008456:	6805      	ldr	r5, [r0, #0]
 8008458:	600b      	str	r3, [r1, #0]
 800845a:	bf18      	it	ne
 800845c:	b22d      	sxthne	r5, r5
 800845e:	e7ef      	b.n	8008440 <_printf_i+0xbc>
 8008460:	680b      	ldr	r3, [r1, #0]
 8008462:	6825      	ldr	r5, [r4, #0]
 8008464:	1d18      	adds	r0, r3, #4
 8008466:	6008      	str	r0, [r1, #0]
 8008468:	0628      	lsls	r0, r5, #24
 800846a:	d501      	bpl.n	8008470 <_printf_i+0xec>
 800846c:	681d      	ldr	r5, [r3, #0]
 800846e:	e002      	b.n	8008476 <_printf_i+0xf2>
 8008470:	0669      	lsls	r1, r5, #25
 8008472:	d5fb      	bpl.n	800846c <_printf_i+0xe8>
 8008474:	881d      	ldrh	r5, [r3, #0]
 8008476:	4854      	ldr	r0, [pc, #336]	; (80085c8 <_printf_i+0x244>)
 8008478:	2f6f      	cmp	r7, #111	; 0x6f
 800847a:	bf0c      	ite	eq
 800847c:	2308      	moveq	r3, #8
 800847e:	230a      	movne	r3, #10
 8008480:	2100      	movs	r1, #0
 8008482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008486:	6866      	ldr	r6, [r4, #4]
 8008488:	60a6      	str	r6, [r4, #8]
 800848a:	2e00      	cmp	r6, #0
 800848c:	bfa2      	ittt	ge
 800848e:	6821      	ldrge	r1, [r4, #0]
 8008490:	f021 0104 	bicge.w	r1, r1, #4
 8008494:	6021      	strge	r1, [r4, #0]
 8008496:	b90d      	cbnz	r5, 800849c <_printf_i+0x118>
 8008498:	2e00      	cmp	r6, #0
 800849a:	d04d      	beq.n	8008538 <_printf_i+0x1b4>
 800849c:	4616      	mov	r6, r2
 800849e:	fbb5 f1f3 	udiv	r1, r5, r3
 80084a2:	fb03 5711 	mls	r7, r3, r1, r5
 80084a6:	5dc7      	ldrb	r7, [r0, r7]
 80084a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084ac:	462f      	mov	r7, r5
 80084ae:	42bb      	cmp	r3, r7
 80084b0:	460d      	mov	r5, r1
 80084b2:	d9f4      	bls.n	800849e <_printf_i+0x11a>
 80084b4:	2b08      	cmp	r3, #8
 80084b6:	d10b      	bne.n	80084d0 <_printf_i+0x14c>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	07df      	lsls	r7, r3, #31
 80084bc:	d508      	bpl.n	80084d0 <_printf_i+0x14c>
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	6861      	ldr	r1, [r4, #4]
 80084c2:	4299      	cmp	r1, r3
 80084c4:	bfde      	ittt	le
 80084c6:	2330      	movle	r3, #48	; 0x30
 80084c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084d0:	1b92      	subs	r2, r2, r6
 80084d2:	6122      	str	r2, [r4, #16]
 80084d4:	f8cd a000 	str.w	sl, [sp]
 80084d8:	464b      	mov	r3, r9
 80084da:	aa03      	add	r2, sp, #12
 80084dc:	4621      	mov	r1, r4
 80084de:	4640      	mov	r0, r8
 80084e0:	f7ff fee2 	bl	80082a8 <_printf_common>
 80084e4:	3001      	adds	r0, #1
 80084e6:	d14c      	bne.n	8008582 <_printf_i+0x1fe>
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	b004      	add	sp, #16
 80084ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f2:	4835      	ldr	r0, [pc, #212]	; (80085c8 <_printf_i+0x244>)
 80084f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084f8:	6823      	ldr	r3, [r4, #0]
 80084fa:	680e      	ldr	r6, [r1, #0]
 80084fc:	061f      	lsls	r7, r3, #24
 80084fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008502:	600e      	str	r6, [r1, #0]
 8008504:	d514      	bpl.n	8008530 <_printf_i+0x1ac>
 8008506:	07d9      	lsls	r1, r3, #31
 8008508:	bf44      	itt	mi
 800850a:	f043 0320 	orrmi.w	r3, r3, #32
 800850e:	6023      	strmi	r3, [r4, #0]
 8008510:	b91d      	cbnz	r5, 800851a <_printf_i+0x196>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	f023 0320 	bic.w	r3, r3, #32
 8008518:	6023      	str	r3, [r4, #0]
 800851a:	2310      	movs	r3, #16
 800851c:	e7b0      	b.n	8008480 <_printf_i+0xfc>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	f043 0320 	orr.w	r3, r3, #32
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	2378      	movs	r3, #120	; 0x78
 8008528:	4828      	ldr	r0, [pc, #160]	; (80085cc <_printf_i+0x248>)
 800852a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800852e:	e7e3      	b.n	80084f8 <_printf_i+0x174>
 8008530:	065e      	lsls	r6, r3, #25
 8008532:	bf48      	it	mi
 8008534:	b2ad      	uxthmi	r5, r5
 8008536:	e7e6      	b.n	8008506 <_printf_i+0x182>
 8008538:	4616      	mov	r6, r2
 800853a:	e7bb      	b.n	80084b4 <_printf_i+0x130>
 800853c:	680b      	ldr	r3, [r1, #0]
 800853e:	6826      	ldr	r6, [r4, #0]
 8008540:	6960      	ldr	r0, [r4, #20]
 8008542:	1d1d      	adds	r5, r3, #4
 8008544:	600d      	str	r5, [r1, #0]
 8008546:	0635      	lsls	r5, r6, #24
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	d501      	bpl.n	8008550 <_printf_i+0x1cc>
 800854c:	6018      	str	r0, [r3, #0]
 800854e:	e002      	b.n	8008556 <_printf_i+0x1d2>
 8008550:	0671      	lsls	r1, r6, #25
 8008552:	d5fb      	bpl.n	800854c <_printf_i+0x1c8>
 8008554:	8018      	strh	r0, [r3, #0]
 8008556:	2300      	movs	r3, #0
 8008558:	6123      	str	r3, [r4, #16]
 800855a:	4616      	mov	r6, r2
 800855c:	e7ba      	b.n	80084d4 <_printf_i+0x150>
 800855e:	680b      	ldr	r3, [r1, #0]
 8008560:	1d1a      	adds	r2, r3, #4
 8008562:	600a      	str	r2, [r1, #0]
 8008564:	681e      	ldr	r6, [r3, #0]
 8008566:	6862      	ldr	r2, [r4, #4]
 8008568:	2100      	movs	r1, #0
 800856a:	4630      	mov	r0, r6
 800856c:	f7f7 fe60 	bl	8000230 <memchr>
 8008570:	b108      	cbz	r0, 8008576 <_printf_i+0x1f2>
 8008572:	1b80      	subs	r0, r0, r6
 8008574:	6060      	str	r0, [r4, #4]
 8008576:	6863      	ldr	r3, [r4, #4]
 8008578:	6123      	str	r3, [r4, #16]
 800857a:	2300      	movs	r3, #0
 800857c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008580:	e7a8      	b.n	80084d4 <_printf_i+0x150>
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	4632      	mov	r2, r6
 8008586:	4649      	mov	r1, r9
 8008588:	4640      	mov	r0, r8
 800858a:	47d0      	blx	sl
 800858c:	3001      	adds	r0, #1
 800858e:	d0ab      	beq.n	80084e8 <_printf_i+0x164>
 8008590:	6823      	ldr	r3, [r4, #0]
 8008592:	079b      	lsls	r3, r3, #30
 8008594:	d413      	bmi.n	80085be <_printf_i+0x23a>
 8008596:	68e0      	ldr	r0, [r4, #12]
 8008598:	9b03      	ldr	r3, [sp, #12]
 800859a:	4298      	cmp	r0, r3
 800859c:	bfb8      	it	lt
 800859e:	4618      	movlt	r0, r3
 80085a0:	e7a4      	b.n	80084ec <_printf_i+0x168>
 80085a2:	2301      	movs	r3, #1
 80085a4:	4632      	mov	r2, r6
 80085a6:	4649      	mov	r1, r9
 80085a8:	4640      	mov	r0, r8
 80085aa:	47d0      	blx	sl
 80085ac:	3001      	adds	r0, #1
 80085ae:	d09b      	beq.n	80084e8 <_printf_i+0x164>
 80085b0:	3501      	adds	r5, #1
 80085b2:	68e3      	ldr	r3, [r4, #12]
 80085b4:	9903      	ldr	r1, [sp, #12]
 80085b6:	1a5b      	subs	r3, r3, r1
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	dcf2      	bgt.n	80085a2 <_printf_i+0x21e>
 80085bc:	e7eb      	b.n	8008596 <_printf_i+0x212>
 80085be:	2500      	movs	r5, #0
 80085c0:	f104 0619 	add.w	r6, r4, #25
 80085c4:	e7f5      	b.n	80085b2 <_printf_i+0x22e>
 80085c6:	bf00      	nop
 80085c8:	0800ab1a 	.word	0x0800ab1a
 80085cc:	0800ab2b 	.word	0x0800ab2b

080085d0 <siprintf>:
 80085d0:	b40e      	push	{r1, r2, r3}
 80085d2:	b500      	push	{lr}
 80085d4:	b09c      	sub	sp, #112	; 0x70
 80085d6:	ab1d      	add	r3, sp, #116	; 0x74
 80085d8:	9002      	str	r0, [sp, #8]
 80085da:	9006      	str	r0, [sp, #24]
 80085dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085e0:	4809      	ldr	r0, [pc, #36]	; (8008608 <siprintf+0x38>)
 80085e2:	9107      	str	r1, [sp, #28]
 80085e4:	9104      	str	r1, [sp, #16]
 80085e6:	4909      	ldr	r1, [pc, #36]	; (800860c <siprintf+0x3c>)
 80085e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ec:	9105      	str	r1, [sp, #20]
 80085ee:	6800      	ldr	r0, [r0, #0]
 80085f0:	9301      	str	r3, [sp, #4]
 80085f2:	a902      	add	r1, sp, #8
 80085f4:	f001 fb46 	bl	8009c84 <_svfiprintf_r>
 80085f8:	9b02      	ldr	r3, [sp, #8]
 80085fa:	2200      	movs	r2, #0
 80085fc:	701a      	strb	r2, [r3, #0]
 80085fe:	b01c      	add	sp, #112	; 0x70
 8008600:	f85d eb04 	ldr.w	lr, [sp], #4
 8008604:	b003      	add	sp, #12
 8008606:	4770      	bx	lr
 8008608:	20000020 	.word	0x20000020
 800860c:	ffff0208 	.word	0xffff0208

08008610 <strncmp>:
 8008610:	b510      	push	{r4, lr}
 8008612:	b16a      	cbz	r2, 8008630 <strncmp+0x20>
 8008614:	3901      	subs	r1, #1
 8008616:	1884      	adds	r4, r0, r2
 8008618:	f810 3b01 	ldrb.w	r3, [r0], #1
 800861c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008620:	4293      	cmp	r3, r2
 8008622:	d103      	bne.n	800862c <strncmp+0x1c>
 8008624:	42a0      	cmp	r0, r4
 8008626:	d001      	beq.n	800862c <strncmp+0x1c>
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1f5      	bne.n	8008618 <strncmp+0x8>
 800862c:	1a98      	subs	r0, r3, r2
 800862e:	bd10      	pop	{r4, pc}
 8008630:	4610      	mov	r0, r2
 8008632:	e7fc      	b.n	800862e <strncmp+0x1e>

08008634 <quorem>:
 8008634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008638:	6903      	ldr	r3, [r0, #16]
 800863a:	690c      	ldr	r4, [r1, #16]
 800863c:	42a3      	cmp	r3, r4
 800863e:	4607      	mov	r7, r0
 8008640:	f2c0 8081 	blt.w	8008746 <quorem+0x112>
 8008644:	3c01      	subs	r4, #1
 8008646:	f101 0814 	add.w	r8, r1, #20
 800864a:	f100 0514 	add.w	r5, r0, #20
 800864e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008658:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800865c:	3301      	adds	r3, #1
 800865e:	429a      	cmp	r2, r3
 8008660:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008664:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008668:	fbb2 f6f3 	udiv	r6, r2, r3
 800866c:	d331      	bcc.n	80086d2 <quorem+0x9e>
 800866e:	f04f 0e00 	mov.w	lr, #0
 8008672:	4640      	mov	r0, r8
 8008674:	46ac      	mov	ip, r5
 8008676:	46f2      	mov	sl, lr
 8008678:	f850 2b04 	ldr.w	r2, [r0], #4
 800867c:	b293      	uxth	r3, r2
 800867e:	fb06 e303 	mla	r3, r6, r3, lr
 8008682:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008686:	b29b      	uxth	r3, r3
 8008688:	ebaa 0303 	sub.w	r3, sl, r3
 800868c:	0c12      	lsrs	r2, r2, #16
 800868e:	f8dc a000 	ldr.w	sl, [ip]
 8008692:	fb06 e202 	mla	r2, r6, r2, lr
 8008696:	fa13 f38a 	uxtah	r3, r3, sl
 800869a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800869e:	fa1f fa82 	uxth.w	sl, r2
 80086a2:	f8dc 2000 	ldr.w	r2, [ip]
 80086a6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80086aa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086b4:	4581      	cmp	r9, r0
 80086b6:	f84c 3b04 	str.w	r3, [ip], #4
 80086ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80086be:	d2db      	bcs.n	8008678 <quorem+0x44>
 80086c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80086c4:	b92b      	cbnz	r3, 80086d2 <quorem+0x9e>
 80086c6:	9b01      	ldr	r3, [sp, #4]
 80086c8:	3b04      	subs	r3, #4
 80086ca:	429d      	cmp	r5, r3
 80086cc:	461a      	mov	r2, r3
 80086ce:	d32e      	bcc.n	800872e <quorem+0xfa>
 80086d0:	613c      	str	r4, [r7, #16]
 80086d2:	4638      	mov	r0, r7
 80086d4:	f001 f8c0 	bl	8009858 <__mcmp>
 80086d8:	2800      	cmp	r0, #0
 80086da:	db24      	blt.n	8008726 <quorem+0xf2>
 80086dc:	3601      	adds	r6, #1
 80086de:	4628      	mov	r0, r5
 80086e0:	f04f 0c00 	mov.w	ip, #0
 80086e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80086e8:	f8d0 e000 	ldr.w	lr, [r0]
 80086ec:	b293      	uxth	r3, r2
 80086ee:	ebac 0303 	sub.w	r3, ip, r3
 80086f2:	0c12      	lsrs	r2, r2, #16
 80086f4:	fa13 f38e 	uxtah	r3, r3, lr
 80086f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80086fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008700:	b29b      	uxth	r3, r3
 8008702:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008706:	45c1      	cmp	r9, r8
 8008708:	f840 3b04 	str.w	r3, [r0], #4
 800870c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008710:	d2e8      	bcs.n	80086e4 <quorem+0xb0>
 8008712:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008716:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800871a:	b922      	cbnz	r2, 8008726 <quorem+0xf2>
 800871c:	3b04      	subs	r3, #4
 800871e:	429d      	cmp	r5, r3
 8008720:	461a      	mov	r2, r3
 8008722:	d30a      	bcc.n	800873a <quorem+0x106>
 8008724:	613c      	str	r4, [r7, #16]
 8008726:	4630      	mov	r0, r6
 8008728:	b003      	add	sp, #12
 800872a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872e:	6812      	ldr	r2, [r2, #0]
 8008730:	3b04      	subs	r3, #4
 8008732:	2a00      	cmp	r2, #0
 8008734:	d1cc      	bne.n	80086d0 <quorem+0x9c>
 8008736:	3c01      	subs	r4, #1
 8008738:	e7c7      	b.n	80086ca <quorem+0x96>
 800873a:	6812      	ldr	r2, [r2, #0]
 800873c:	3b04      	subs	r3, #4
 800873e:	2a00      	cmp	r2, #0
 8008740:	d1f0      	bne.n	8008724 <quorem+0xf0>
 8008742:	3c01      	subs	r4, #1
 8008744:	e7eb      	b.n	800871e <quorem+0xea>
 8008746:	2000      	movs	r0, #0
 8008748:	e7ee      	b.n	8008728 <quorem+0xf4>
 800874a:	0000      	movs	r0, r0
 800874c:	0000      	movs	r0, r0
	...

08008750 <_dtoa_r>:
 8008750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008754:	ed2d 8b02 	vpush	{d8}
 8008758:	ec57 6b10 	vmov	r6, r7, d0
 800875c:	b095      	sub	sp, #84	; 0x54
 800875e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008760:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008764:	9105      	str	r1, [sp, #20]
 8008766:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800876a:	4604      	mov	r4, r0
 800876c:	9209      	str	r2, [sp, #36]	; 0x24
 800876e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008770:	b975      	cbnz	r5, 8008790 <_dtoa_r+0x40>
 8008772:	2010      	movs	r0, #16
 8008774:	f000 fddc 	bl	8009330 <malloc>
 8008778:	4602      	mov	r2, r0
 800877a:	6260      	str	r0, [r4, #36]	; 0x24
 800877c:	b920      	cbnz	r0, 8008788 <_dtoa_r+0x38>
 800877e:	4bb2      	ldr	r3, [pc, #712]	; (8008a48 <_dtoa_r+0x2f8>)
 8008780:	21ea      	movs	r1, #234	; 0xea
 8008782:	48b2      	ldr	r0, [pc, #712]	; (8008a4c <_dtoa_r+0x2fc>)
 8008784:	f001 fb8e 	bl	8009ea4 <__assert_func>
 8008788:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800878c:	6005      	str	r5, [r0, #0]
 800878e:	60c5      	str	r5, [r0, #12]
 8008790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008792:	6819      	ldr	r1, [r3, #0]
 8008794:	b151      	cbz	r1, 80087ac <_dtoa_r+0x5c>
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	604a      	str	r2, [r1, #4]
 800879a:	2301      	movs	r3, #1
 800879c:	4093      	lsls	r3, r2
 800879e:	608b      	str	r3, [r1, #8]
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fe1b 	bl	80093dc <_Bfree>
 80087a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
 80087ac:	1e3b      	subs	r3, r7, #0
 80087ae:	bfb9      	ittee	lt
 80087b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80087b4:	9303      	strlt	r3, [sp, #12]
 80087b6:	2300      	movge	r3, #0
 80087b8:	f8c8 3000 	strge.w	r3, [r8]
 80087bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80087c0:	4ba3      	ldr	r3, [pc, #652]	; (8008a50 <_dtoa_r+0x300>)
 80087c2:	bfbc      	itt	lt
 80087c4:	2201      	movlt	r2, #1
 80087c6:	f8c8 2000 	strlt.w	r2, [r8]
 80087ca:	ea33 0309 	bics.w	r3, r3, r9
 80087ce:	d11b      	bne.n	8008808 <_dtoa_r+0xb8>
 80087d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80087d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80087dc:	4333      	orrs	r3, r6
 80087de:	f000 857a 	beq.w	80092d6 <_dtoa_r+0xb86>
 80087e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087e4:	b963      	cbnz	r3, 8008800 <_dtoa_r+0xb0>
 80087e6:	4b9b      	ldr	r3, [pc, #620]	; (8008a54 <_dtoa_r+0x304>)
 80087e8:	e024      	b.n	8008834 <_dtoa_r+0xe4>
 80087ea:	4b9b      	ldr	r3, [pc, #620]	; (8008a58 <_dtoa_r+0x308>)
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	3308      	adds	r3, #8
 80087f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	9800      	ldr	r0, [sp, #0]
 80087f6:	b015      	add	sp, #84	; 0x54
 80087f8:	ecbd 8b02 	vpop	{d8}
 80087fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008800:	4b94      	ldr	r3, [pc, #592]	; (8008a54 <_dtoa_r+0x304>)
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	3303      	adds	r3, #3
 8008806:	e7f3      	b.n	80087f0 <_dtoa_r+0xa0>
 8008808:	ed9d 7b02 	vldr	d7, [sp, #8]
 800880c:	2200      	movs	r2, #0
 800880e:	ec51 0b17 	vmov	r0, r1, d7
 8008812:	2300      	movs	r3, #0
 8008814:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008818:	f7f8 f97e 	bl	8000b18 <__aeabi_dcmpeq>
 800881c:	4680      	mov	r8, r0
 800881e:	b158      	cbz	r0, 8008838 <_dtoa_r+0xe8>
 8008820:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008822:	2301      	movs	r3, #1
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 8551 	beq.w	80092d0 <_dtoa_r+0xb80>
 800882e:	488b      	ldr	r0, [pc, #556]	; (8008a5c <_dtoa_r+0x30c>)
 8008830:	6018      	str	r0, [r3, #0]
 8008832:	1e43      	subs	r3, r0, #1
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	e7dd      	b.n	80087f4 <_dtoa_r+0xa4>
 8008838:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800883c:	aa12      	add	r2, sp, #72	; 0x48
 800883e:	a913      	add	r1, sp, #76	; 0x4c
 8008840:	4620      	mov	r0, r4
 8008842:	f001 f8ad 	bl	80099a0 <__d2b>
 8008846:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800884a:	4683      	mov	fp, r0
 800884c:	2d00      	cmp	r5, #0
 800884e:	d07c      	beq.n	800894a <_dtoa_r+0x1fa>
 8008850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008852:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800885a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800885e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008862:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800886a:	4b7d      	ldr	r3, [pc, #500]	; (8008a60 <_dtoa_r+0x310>)
 800886c:	2200      	movs	r2, #0
 800886e:	4630      	mov	r0, r6
 8008870:	4639      	mov	r1, r7
 8008872:	f7f7 fd31 	bl	80002d8 <__aeabi_dsub>
 8008876:	a36e      	add	r3, pc, #440	; (adr r3, 8008a30 <_dtoa_r+0x2e0>)
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f7f7 fee4 	bl	8000648 <__aeabi_dmul>
 8008880:	a36d      	add	r3, pc, #436	; (adr r3, 8008a38 <_dtoa_r+0x2e8>)
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	f7f7 fd29 	bl	80002dc <__adddf3>
 800888a:	4606      	mov	r6, r0
 800888c:	4628      	mov	r0, r5
 800888e:	460f      	mov	r7, r1
 8008890:	f7f7 fe70 	bl	8000574 <__aeabi_i2d>
 8008894:	a36a      	add	r3, pc, #424	; (adr r3, 8008a40 <_dtoa_r+0x2f0>)
 8008896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800889a:	f7f7 fed5 	bl	8000648 <__aeabi_dmul>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4630      	mov	r0, r6
 80088a4:	4639      	mov	r1, r7
 80088a6:	f7f7 fd19 	bl	80002dc <__adddf3>
 80088aa:	4606      	mov	r6, r0
 80088ac:	460f      	mov	r7, r1
 80088ae:	f7f8 f97b 	bl	8000ba8 <__aeabi_d2iz>
 80088b2:	2200      	movs	r2, #0
 80088b4:	4682      	mov	sl, r0
 80088b6:	2300      	movs	r3, #0
 80088b8:	4630      	mov	r0, r6
 80088ba:	4639      	mov	r1, r7
 80088bc:	f7f8 f936 	bl	8000b2c <__aeabi_dcmplt>
 80088c0:	b148      	cbz	r0, 80088d6 <_dtoa_r+0x186>
 80088c2:	4650      	mov	r0, sl
 80088c4:	f7f7 fe56 	bl	8000574 <__aeabi_i2d>
 80088c8:	4632      	mov	r2, r6
 80088ca:	463b      	mov	r3, r7
 80088cc:	f7f8 f924 	bl	8000b18 <__aeabi_dcmpeq>
 80088d0:	b908      	cbnz	r0, 80088d6 <_dtoa_r+0x186>
 80088d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088d6:	f1ba 0f16 	cmp.w	sl, #22
 80088da:	d854      	bhi.n	8008986 <_dtoa_r+0x236>
 80088dc:	4b61      	ldr	r3, [pc, #388]	; (8008a64 <_dtoa_r+0x314>)
 80088de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80088e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088ea:	f7f8 f91f 	bl	8000b2c <__aeabi_dcmplt>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d04b      	beq.n	800898a <_dtoa_r+0x23a>
 80088f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088f6:	2300      	movs	r3, #0
 80088f8:	930e      	str	r3, [sp, #56]	; 0x38
 80088fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80088fc:	1b5d      	subs	r5, r3, r5
 80088fe:	1e6b      	subs	r3, r5, #1
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	bf43      	ittte	mi
 8008904:	2300      	movmi	r3, #0
 8008906:	f1c5 0801 	rsbmi	r8, r5, #1
 800890a:	9304      	strmi	r3, [sp, #16]
 800890c:	f04f 0800 	movpl.w	r8, #0
 8008910:	f1ba 0f00 	cmp.w	sl, #0
 8008914:	db3b      	blt.n	800898e <_dtoa_r+0x23e>
 8008916:	9b04      	ldr	r3, [sp, #16]
 8008918:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800891c:	4453      	add	r3, sl
 800891e:	9304      	str	r3, [sp, #16]
 8008920:	2300      	movs	r3, #0
 8008922:	9306      	str	r3, [sp, #24]
 8008924:	9b05      	ldr	r3, [sp, #20]
 8008926:	2b09      	cmp	r3, #9
 8008928:	d869      	bhi.n	80089fe <_dtoa_r+0x2ae>
 800892a:	2b05      	cmp	r3, #5
 800892c:	bfc4      	itt	gt
 800892e:	3b04      	subgt	r3, #4
 8008930:	9305      	strgt	r3, [sp, #20]
 8008932:	9b05      	ldr	r3, [sp, #20]
 8008934:	f1a3 0302 	sub.w	r3, r3, #2
 8008938:	bfcc      	ite	gt
 800893a:	2500      	movgt	r5, #0
 800893c:	2501      	movle	r5, #1
 800893e:	2b03      	cmp	r3, #3
 8008940:	d869      	bhi.n	8008a16 <_dtoa_r+0x2c6>
 8008942:	e8df f003 	tbb	[pc, r3]
 8008946:	4e2c      	.short	0x4e2c
 8008948:	5a4c      	.short	0x5a4c
 800894a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800894e:	441d      	add	r5, r3
 8008950:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008954:	2b20      	cmp	r3, #32
 8008956:	bfc1      	itttt	gt
 8008958:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800895c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008960:	fa09 f303 	lslgt.w	r3, r9, r3
 8008964:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008968:	bfda      	itte	le
 800896a:	f1c3 0320 	rsble	r3, r3, #32
 800896e:	fa06 f003 	lslle.w	r0, r6, r3
 8008972:	4318      	orrgt	r0, r3
 8008974:	f7f7 fdee 	bl	8000554 <__aeabi_ui2d>
 8008978:	2301      	movs	r3, #1
 800897a:	4606      	mov	r6, r0
 800897c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008980:	3d01      	subs	r5, #1
 8008982:	9310      	str	r3, [sp, #64]	; 0x40
 8008984:	e771      	b.n	800886a <_dtoa_r+0x11a>
 8008986:	2301      	movs	r3, #1
 8008988:	e7b6      	b.n	80088f8 <_dtoa_r+0x1a8>
 800898a:	900e      	str	r0, [sp, #56]	; 0x38
 800898c:	e7b5      	b.n	80088fa <_dtoa_r+0x1aa>
 800898e:	f1ca 0300 	rsb	r3, sl, #0
 8008992:	9306      	str	r3, [sp, #24]
 8008994:	2300      	movs	r3, #0
 8008996:	eba8 080a 	sub.w	r8, r8, sl
 800899a:	930d      	str	r3, [sp, #52]	; 0x34
 800899c:	e7c2      	b.n	8008924 <_dtoa_r+0x1d4>
 800899e:	2300      	movs	r3, #0
 80089a0:	9308      	str	r3, [sp, #32]
 80089a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	dc39      	bgt.n	8008a1c <_dtoa_r+0x2cc>
 80089a8:	f04f 0901 	mov.w	r9, #1
 80089ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80089b0:	464b      	mov	r3, r9
 80089b2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80089b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80089b8:	2200      	movs	r2, #0
 80089ba:	6042      	str	r2, [r0, #4]
 80089bc:	2204      	movs	r2, #4
 80089be:	f102 0614 	add.w	r6, r2, #20
 80089c2:	429e      	cmp	r6, r3
 80089c4:	6841      	ldr	r1, [r0, #4]
 80089c6:	d92f      	bls.n	8008a28 <_dtoa_r+0x2d8>
 80089c8:	4620      	mov	r0, r4
 80089ca:	f000 fcc7 	bl	800935c <_Balloc>
 80089ce:	9000      	str	r0, [sp, #0]
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d14b      	bne.n	8008a6c <_dtoa_r+0x31c>
 80089d4:	4b24      	ldr	r3, [pc, #144]	; (8008a68 <_dtoa_r+0x318>)
 80089d6:	4602      	mov	r2, r0
 80089d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80089dc:	e6d1      	b.n	8008782 <_dtoa_r+0x32>
 80089de:	2301      	movs	r3, #1
 80089e0:	e7de      	b.n	80089a0 <_dtoa_r+0x250>
 80089e2:	2300      	movs	r3, #0
 80089e4:	9308      	str	r3, [sp, #32]
 80089e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e8:	eb0a 0903 	add.w	r9, sl, r3
 80089ec:	f109 0301 	add.w	r3, r9, #1
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	bfb8      	it	lt
 80089f6:	2301      	movlt	r3, #1
 80089f8:	e7dd      	b.n	80089b6 <_dtoa_r+0x266>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e7f2      	b.n	80089e4 <_dtoa_r+0x294>
 80089fe:	2501      	movs	r5, #1
 8008a00:	2300      	movs	r3, #0
 8008a02:	9305      	str	r3, [sp, #20]
 8008a04:	9508      	str	r5, [sp, #32]
 8008a06:	f04f 39ff 	mov.w	r9, #4294967295
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a10:	2312      	movs	r3, #18
 8008a12:	9209      	str	r2, [sp, #36]	; 0x24
 8008a14:	e7cf      	b.n	80089b6 <_dtoa_r+0x266>
 8008a16:	2301      	movs	r3, #1
 8008a18:	9308      	str	r3, [sp, #32]
 8008a1a:	e7f4      	b.n	8008a06 <_dtoa_r+0x2b6>
 8008a1c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008a20:	f8cd 9004 	str.w	r9, [sp, #4]
 8008a24:	464b      	mov	r3, r9
 8008a26:	e7c6      	b.n	80089b6 <_dtoa_r+0x266>
 8008a28:	3101      	adds	r1, #1
 8008a2a:	6041      	str	r1, [r0, #4]
 8008a2c:	0052      	lsls	r2, r2, #1
 8008a2e:	e7c6      	b.n	80089be <_dtoa_r+0x26e>
 8008a30:	636f4361 	.word	0x636f4361
 8008a34:	3fd287a7 	.word	0x3fd287a7
 8008a38:	8b60c8b3 	.word	0x8b60c8b3
 8008a3c:	3fc68a28 	.word	0x3fc68a28
 8008a40:	509f79fb 	.word	0x509f79fb
 8008a44:	3fd34413 	.word	0x3fd34413
 8008a48:	0800ab49 	.word	0x0800ab49
 8008a4c:	0800ab60 	.word	0x0800ab60
 8008a50:	7ff00000 	.word	0x7ff00000
 8008a54:	0800ab45 	.word	0x0800ab45
 8008a58:	0800ab3c 	.word	0x0800ab3c
 8008a5c:	0800ab19 	.word	0x0800ab19
 8008a60:	3ff80000 	.word	0x3ff80000
 8008a64:	0800ac58 	.word	0x0800ac58
 8008a68:	0800abbf 	.word	0x0800abbf
 8008a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a6e:	9a00      	ldr	r2, [sp, #0]
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	9b01      	ldr	r3, [sp, #4]
 8008a74:	2b0e      	cmp	r3, #14
 8008a76:	f200 80ad 	bhi.w	8008bd4 <_dtoa_r+0x484>
 8008a7a:	2d00      	cmp	r5, #0
 8008a7c:	f000 80aa 	beq.w	8008bd4 <_dtoa_r+0x484>
 8008a80:	f1ba 0f00 	cmp.w	sl, #0
 8008a84:	dd36      	ble.n	8008af4 <_dtoa_r+0x3a4>
 8008a86:	4ac3      	ldr	r2, [pc, #780]	; (8008d94 <_dtoa_r+0x644>)
 8008a88:	f00a 030f 	and.w	r3, sl, #15
 8008a8c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008a90:	ed93 7b00 	vldr	d7, [r3]
 8008a94:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008a98:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008a9c:	eeb0 8a47 	vmov.f32	s16, s14
 8008aa0:	eef0 8a67 	vmov.f32	s17, s15
 8008aa4:	d016      	beq.n	8008ad4 <_dtoa_r+0x384>
 8008aa6:	4bbc      	ldr	r3, [pc, #752]	; (8008d98 <_dtoa_r+0x648>)
 8008aa8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008aac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ab0:	f7f7 fef4 	bl	800089c <__aeabi_ddiv>
 8008ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ab8:	f007 070f 	and.w	r7, r7, #15
 8008abc:	2503      	movs	r5, #3
 8008abe:	4eb6      	ldr	r6, [pc, #728]	; (8008d98 <_dtoa_r+0x648>)
 8008ac0:	b957      	cbnz	r7, 8008ad8 <_dtoa_r+0x388>
 8008ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ac6:	ec53 2b18 	vmov	r2, r3, d8
 8008aca:	f7f7 fee7 	bl	800089c <__aeabi_ddiv>
 8008ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ad2:	e029      	b.n	8008b28 <_dtoa_r+0x3d8>
 8008ad4:	2502      	movs	r5, #2
 8008ad6:	e7f2      	b.n	8008abe <_dtoa_r+0x36e>
 8008ad8:	07f9      	lsls	r1, r7, #31
 8008ada:	d508      	bpl.n	8008aee <_dtoa_r+0x39e>
 8008adc:	ec51 0b18 	vmov	r0, r1, d8
 8008ae0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008ae4:	f7f7 fdb0 	bl	8000648 <__aeabi_dmul>
 8008ae8:	ec41 0b18 	vmov	d8, r0, r1
 8008aec:	3501      	adds	r5, #1
 8008aee:	107f      	asrs	r7, r7, #1
 8008af0:	3608      	adds	r6, #8
 8008af2:	e7e5      	b.n	8008ac0 <_dtoa_r+0x370>
 8008af4:	f000 80a6 	beq.w	8008c44 <_dtoa_r+0x4f4>
 8008af8:	f1ca 0600 	rsb	r6, sl, #0
 8008afc:	4ba5      	ldr	r3, [pc, #660]	; (8008d94 <_dtoa_r+0x644>)
 8008afe:	4fa6      	ldr	r7, [pc, #664]	; (8008d98 <_dtoa_r+0x648>)
 8008b00:	f006 020f 	and.w	r2, r6, #15
 8008b04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008b10:	f7f7 fd9a 	bl	8000648 <__aeabi_dmul>
 8008b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b18:	1136      	asrs	r6, r6, #4
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2502      	movs	r5, #2
 8008b1e:	2e00      	cmp	r6, #0
 8008b20:	f040 8085 	bne.w	8008c2e <_dtoa_r+0x4de>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1d2      	bne.n	8008ace <_dtoa_r+0x37e>
 8008b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 808c 	beq.w	8008c48 <_dtoa_r+0x4f8>
 8008b30:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b34:	4b99      	ldr	r3, [pc, #612]	; (8008d9c <_dtoa_r+0x64c>)
 8008b36:	2200      	movs	r2, #0
 8008b38:	4630      	mov	r0, r6
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	f7f7 fff6 	bl	8000b2c <__aeabi_dcmplt>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	f000 8081 	beq.w	8008c48 <_dtoa_r+0x4f8>
 8008b46:	9b01      	ldr	r3, [sp, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d07d      	beq.n	8008c48 <_dtoa_r+0x4f8>
 8008b4c:	f1b9 0f00 	cmp.w	r9, #0
 8008b50:	dd3c      	ble.n	8008bcc <_dtoa_r+0x47c>
 8008b52:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008b56:	9307      	str	r3, [sp, #28]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4b91      	ldr	r3, [pc, #580]	; (8008da0 <_dtoa_r+0x650>)
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	4639      	mov	r1, r7
 8008b60:	f7f7 fd72 	bl	8000648 <__aeabi_dmul>
 8008b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b68:	3501      	adds	r5, #1
 8008b6a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008b6e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b72:	4628      	mov	r0, r5
 8008b74:	f7f7 fcfe 	bl	8000574 <__aeabi_i2d>
 8008b78:	4632      	mov	r2, r6
 8008b7a:	463b      	mov	r3, r7
 8008b7c:	f7f7 fd64 	bl	8000648 <__aeabi_dmul>
 8008b80:	4b88      	ldr	r3, [pc, #544]	; (8008da4 <_dtoa_r+0x654>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	f7f7 fbaa 	bl	80002dc <__adddf3>
 8008b88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b90:	9303      	str	r3, [sp, #12]
 8008b92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d15c      	bne.n	8008c52 <_dtoa_r+0x502>
 8008b98:	4b83      	ldr	r3, [pc, #524]	; (8008da8 <_dtoa_r+0x658>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	f7f7 fb9a 	bl	80002d8 <__aeabi_dsub>
 8008ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ba8:	4606      	mov	r6, r0
 8008baa:	460f      	mov	r7, r1
 8008bac:	f7f7 ffdc 	bl	8000b68 <__aeabi_dcmpgt>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	f040 8296 	bne.w	80090e2 <_dtoa_r+0x992>
 8008bb6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008bba:	4630      	mov	r0, r6
 8008bbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bc0:	4639      	mov	r1, r7
 8008bc2:	f7f7 ffb3 	bl	8000b2c <__aeabi_dcmplt>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f040 8288 	bne.w	80090dc <_dtoa_r+0x98c>
 8008bcc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008bd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bd4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f2c0 8158 	blt.w	8008e8c <_dtoa_r+0x73c>
 8008bdc:	f1ba 0f0e 	cmp.w	sl, #14
 8008be0:	f300 8154 	bgt.w	8008e8c <_dtoa_r+0x73c>
 8008be4:	4b6b      	ldr	r3, [pc, #428]	; (8008d94 <_dtoa_r+0x644>)
 8008be6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008bea:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f280 80e3 	bge.w	8008dbc <_dtoa_r+0x66c>
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f300 80df 	bgt.w	8008dbc <_dtoa_r+0x66c>
 8008bfe:	f040 826d 	bne.w	80090dc <_dtoa_r+0x98c>
 8008c02:	4b69      	ldr	r3, [pc, #420]	; (8008da8 <_dtoa_r+0x658>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	4640      	mov	r0, r8
 8008c08:	4649      	mov	r1, r9
 8008c0a:	f7f7 fd1d 	bl	8000648 <__aeabi_dmul>
 8008c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c12:	f7f7 ff9f 	bl	8000b54 <__aeabi_dcmpge>
 8008c16:	9e01      	ldr	r6, [sp, #4]
 8008c18:	4637      	mov	r7, r6
 8008c1a:	2800      	cmp	r0, #0
 8008c1c:	f040 8243 	bne.w	80090a6 <_dtoa_r+0x956>
 8008c20:	9d00      	ldr	r5, [sp, #0]
 8008c22:	2331      	movs	r3, #49	; 0x31
 8008c24:	f805 3b01 	strb.w	r3, [r5], #1
 8008c28:	f10a 0a01 	add.w	sl, sl, #1
 8008c2c:	e23f      	b.n	80090ae <_dtoa_r+0x95e>
 8008c2e:	07f2      	lsls	r2, r6, #31
 8008c30:	d505      	bpl.n	8008c3e <_dtoa_r+0x4ee>
 8008c32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c36:	f7f7 fd07 	bl	8000648 <__aeabi_dmul>
 8008c3a:	3501      	adds	r5, #1
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	1076      	asrs	r6, r6, #1
 8008c40:	3708      	adds	r7, #8
 8008c42:	e76c      	b.n	8008b1e <_dtoa_r+0x3ce>
 8008c44:	2502      	movs	r5, #2
 8008c46:	e76f      	b.n	8008b28 <_dtoa_r+0x3d8>
 8008c48:	9b01      	ldr	r3, [sp, #4]
 8008c4a:	f8cd a01c 	str.w	sl, [sp, #28]
 8008c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8008c50:	e78d      	b.n	8008b6e <_dtoa_r+0x41e>
 8008c52:	9900      	ldr	r1, [sp, #0]
 8008c54:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008c56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c58:	4b4e      	ldr	r3, [pc, #312]	; (8008d94 <_dtoa_r+0x644>)
 8008c5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c5e:	4401      	add	r1, r0
 8008c60:	9102      	str	r1, [sp, #8]
 8008c62:	9908      	ldr	r1, [sp, #32]
 8008c64:	eeb0 8a47 	vmov.f32	s16, s14
 8008c68:	eef0 8a67 	vmov.f32	s17, s15
 8008c6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c70:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008c74:	2900      	cmp	r1, #0
 8008c76:	d045      	beq.n	8008d04 <_dtoa_r+0x5b4>
 8008c78:	494c      	ldr	r1, [pc, #304]	; (8008dac <_dtoa_r+0x65c>)
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	f7f7 fe0e 	bl	800089c <__aeabi_ddiv>
 8008c80:	ec53 2b18 	vmov	r2, r3, d8
 8008c84:	f7f7 fb28 	bl	80002d8 <__aeabi_dsub>
 8008c88:	9d00      	ldr	r5, [sp, #0]
 8008c8a:	ec41 0b18 	vmov	d8, r0, r1
 8008c8e:	4639      	mov	r1, r7
 8008c90:	4630      	mov	r0, r6
 8008c92:	f7f7 ff89 	bl	8000ba8 <__aeabi_d2iz>
 8008c96:	900c      	str	r0, [sp, #48]	; 0x30
 8008c98:	f7f7 fc6c 	bl	8000574 <__aeabi_i2d>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4630      	mov	r0, r6
 8008ca2:	4639      	mov	r1, r7
 8008ca4:	f7f7 fb18 	bl	80002d8 <__aeabi_dsub>
 8008ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008caa:	3330      	adds	r3, #48	; 0x30
 8008cac:	f805 3b01 	strb.w	r3, [r5], #1
 8008cb0:	ec53 2b18 	vmov	r2, r3, d8
 8008cb4:	4606      	mov	r6, r0
 8008cb6:	460f      	mov	r7, r1
 8008cb8:	f7f7 ff38 	bl	8000b2c <__aeabi_dcmplt>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	d165      	bne.n	8008d8c <_dtoa_r+0x63c>
 8008cc0:	4632      	mov	r2, r6
 8008cc2:	463b      	mov	r3, r7
 8008cc4:	4935      	ldr	r1, [pc, #212]	; (8008d9c <_dtoa_r+0x64c>)
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	f7f7 fb06 	bl	80002d8 <__aeabi_dsub>
 8008ccc:	ec53 2b18 	vmov	r2, r3, d8
 8008cd0:	f7f7 ff2c 	bl	8000b2c <__aeabi_dcmplt>
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	f040 80b9 	bne.w	8008e4c <_dtoa_r+0x6fc>
 8008cda:	9b02      	ldr	r3, [sp, #8]
 8008cdc:	429d      	cmp	r5, r3
 8008cde:	f43f af75 	beq.w	8008bcc <_dtoa_r+0x47c>
 8008ce2:	4b2f      	ldr	r3, [pc, #188]	; (8008da0 <_dtoa_r+0x650>)
 8008ce4:	ec51 0b18 	vmov	r0, r1, d8
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f7f7 fcad 	bl	8000648 <__aeabi_dmul>
 8008cee:	4b2c      	ldr	r3, [pc, #176]	; (8008da0 <_dtoa_r+0x650>)
 8008cf0:	ec41 0b18 	vmov	d8, r0, r1
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	4630      	mov	r0, r6
 8008cf8:	4639      	mov	r1, r7
 8008cfa:	f7f7 fca5 	bl	8000648 <__aeabi_dmul>
 8008cfe:	4606      	mov	r6, r0
 8008d00:	460f      	mov	r7, r1
 8008d02:	e7c4      	b.n	8008c8e <_dtoa_r+0x53e>
 8008d04:	ec51 0b17 	vmov	r0, r1, d7
 8008d08:	f7f7 fc9e 	bl	8000648 <__aeabi_dmul>
 8008d0c:	9b02      	ldr	r3, [sp, #8]
 8008d0e:	9d00      	ldr	r5, [sp, #0]
 8008d10:	930c      	str	r3, [sp, #48]	; 0x30
 8008d12:	ec41 0b18 	vmov	d8, r0, r1
 8008d16:	4639      	mov	r1, r7
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7f7 ff45 	bl	8000ba8 <__aeabi_d2iz>
 8008d1e:	9011      	str	r0, [sp, #68]	; 0x44
 8008d20:	f7f7 fc28 	bl	8000574 <__aeabi_i2d>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	f7f7 fad4 	bl	80002d8 <__aeabi_dsub>
 8008d30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d32:	3330      	adds	r3, #48	; 0x30
 8008d34:	f805 3b01 	strb.w	r3, [r5], #1
 8008d38:	9b02      	ldr	r3, [sp, #8]
 8008d3a:	429d      	cmp	r5, r3
 8008d3c:	4606      	mov	r6, r0
 8008d3e:	460f      	mov	r7, r1
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	d134      	bne.n	8008db0 <_dtoa_r+0x660>
 8008d46:	4b19      	ldr	r3, [pc, #100]	; (8008dac <_dtoa_r+0x65c>)
 8008d48:	ec51 0b18 	vmov	r0, r1, d8
 8008d4c:	f7f7 fac6 	bl	80002dc <__adddf3>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	4630      	mov	r0, r6
 8008d56:	4639      	mov	r1, r7
 8008d58:	f7f7 ff06 	bl	8000b68 <__aeabi_dcmpgt>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d175      	bne.n	8008e4c <_dtoa_r+0x6fc>
 8008d60:	ec53 2b18 	vmov	r2, r3, d8
 8008d64:	4911      	ldr	r1, [pc, #68]	; (8008dac <_dtoa_r+0x65c>)
 8008d66:	2000      	movs	r0, #0
 8008d68:	f7f7 fab6 	bl	80002d8 <__aeabi_dsub>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4630      	mov	r0, r6
 8008d72:	4639      	mov	r1, r7
 8008d74:	f7f7 feda 	bl	8000b2c <__aeabi_dcmplt>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	f43f af27 	beq.w	8008bcc <_dtoa_r+0x47c>
 8008d7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d80:	1e6b      	subs	r3, r5, #1
 8008d82:	930c      	str	r3, [sp, #48]	; 0x30
 8008d84:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008d88:	2b30      	cmp	r3, #48	; 0x30
 8008d8a:	d0f8      	beq.n	8008d7e <_dtoa_r+0x62e>
 8008d8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008d90:	e04a      	b.n	8008e28 <_dtoa_r+0x6d8>
 8008d92:	bf00      	nop
 8008d94:	0800ac58 	.word	0x0800ac58
 8008d98:	0800ac30 	.word	0x0800ac30
 8008d9c:	3ff00000 	.word	0x3ff00000
 8008da0:	40240000 	.word	0x40240000
 8008da4:	401c0000 	.word	0x401c0000
 8008da8:	40140000 	.word	0x40140000
 8008dac:	3fe00000 	.word	0x3fe00000
 8008db0:	4baf      	ldr	r3, [pc, #700]	; (8009070 <_dtoa_r+0x920>)
 8008db2:	f7f7 fc49 	bl	8000648 <__aeabi_dmul>
 8008db6:	4606      	mov	r6, r0
 8008db8:	460f      	mov	r7, r1
 8008dba:	e7ac      	b.n	8008d16 <_dtoa_r+0x5c6>
 8008dbc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008dc0:	9d00      	ldr	r5, [sp, #0]
 8008dc2:	4642      	mov	r2, r8
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	4630      	mov	r0, r6
 8008dc8:	4639      	mov	r1, r7
 8008dca:	f7f7 fd67 	bl	800089c <__aeabi_ddiv>
 8008dce:	f7f7 feeb 	bl	8000ba8 <__aeabi_d2iz>
 8008dd2:	9002      	str	r0, [sp, #8]
 8008dd4:	f7f7 fbce 	bl	8000574 <__aeabi_i2d>
 8008dd8:	4642      	mov	r2, r8
 8008dda:	464b      	mov	r3, r9
 8008ddc:	f7f7 fc34 	bl	8000648 <__aeabi_dmul>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4630      	mov	r0, r6
 8008de6:	4639      	mov	r1, r7
 8008de8:	f7f7 fa76 	bl	80002d8 <__aeabi_dsub>
 8008dec:	9e02      	ldr	r6, [sp, #8]
 8008dee:	9f01      	ldr	r7, [sp, #4]
 8008df0:	3630      	adds	r6, #48	; 0x30
 8008df2:	f805 6b01 	strb.w	r6, [r5], #1
 8008df6:	9e00      	ldr	r6, [sp, #0]
 8008df8:	1bae      	subs	r6, r5, r6
 8008dfa:	42b7      	cmp	r7, r6
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	460b      	mov	r3, r1
 8008e00:	d137      	bne.n	8008e72 <_dtoa_r+0x722>
 8008e02:	f7f7 fa6b 	bl	80002dc <__adddf3>
 8008e06:	4642      	mov	r2, r8
 8008e08:	464b      	mov	r3, r9
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	460f      	mov	r7, r1
 8008e0e:	f7f7 feab 	bl	8000b68 <__aeabi_dcmpgt>
 8008e12:	b9c8      	cbnz	r0, 8008e48 <_dtoa_r+0x6f8>
 8008e14:	4642      	mov	r2, r8
 8008e16:	464b      	mov	r3, r9
 8008e18:	4630      	mov	r0, r6
 8008e1a:	4639      	mov	r1, r7
 8008e1c:	f7f7 fe7c 	bl	8000b18 <__aeabi_dcmpeq>
 8008e20:	b110      	cbz	r0, 8008e28 <_dtoa_r+0x6d8>
 8008e22:	9b02      	ldr	r3, [sp, #8]
 8008e24:	07d9      	lsls	r1, r3, #31
 8008e26:	d40f      	bmi.n	8008e48 <_dtoa_r+0x6f8>
 8008e28:	4620      	mov	r0, r4
 8008e2a:	4659      	mov	r1, fp
 8008e2c:	f000 fad6 	bl	80093dc <_Bfree>
 8008e30:	2300      	movs	r3, #0
 8008e32:	702b      	strb	r3, [r5, #0]
 8008e34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008e36:	f10a 0001 	add.w	r0, sl, #1
 8008e3a:	6018      	str	r0, [r3, #0]
 8008e3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f43f acd8 	beq.w	80087f4 <_dtoa_r+0xa4>
 8008e44:	601d      	str	r5, [r3, #0]
 8008e46:	e4d5      	b.n	80087f4 <_dtoa_r+0xa4>
 8008e48:	f8cd a01c 	str.w	sl, [sp, #28]
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	461d      	mov	r5, r3
 8008e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e54:	2a39      	cmp	r2, #57	; 0x39
 8008e56:	d108      	bne.n	8008e6a <_dtoa_r+0x71a>
 8008e58:	9a00      	ldr	r2, [sp, #0]
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d1f7      	bne.n	8008e4e <_dtoa_r+0x6fe>
 8008e5e:	9a07      	ldr	r2, [sp, #28]
 8008e60:	9900      	ldr	r1, [sp, #0]
 8008e62:	3201      	adds	r2, #1
 8008e64:	9207      	str	r2, [sp, #28]
 8008e66:	2230      	movs	r2, #48	; 0x30
 8008e68:	700a      	strb	r2, [r1, #0]
 8008e6a:	781a      	ldrb	r2, [r3, #0]
 8008e6c:	3201      	adds	r2, #1
 8008e6e:	701a      	strb	r2, [r3, #0]
 8008e70:	e78c      	b.n	8008d8c <_dtoa_r+0x63c>
 8008e72:	4b7f      	ldr	r3, [pc, #508]	; (8009070 <_dtoa_r+0x920>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	f7f7 fbe7 	bl	8000648 <__aeabi_dmul>
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	4606      	mov	r6, r0
 8008e80:	460f      	mov	r7, r1
 8008e82:	f7f7 fe49 	bl	8000b18 <__aeabi_dcmpeq>
 8008e86:	2800      	cmp	r0, #0
 8008e88:	d09b      	beq.n	8008dc2 <_dtoa_r+0x672>
 8008e8a:	e7cd      	b.n	8008e28 <_dtoa_r+0x6d8>
 8008e8c:	9a08      	ldr	r2, [sp, #32]
 8008e8e:	2a00      	cmp	r2, #0
 8008e90:	f000 80c4 	beq.w	800901c <_dtoa_r+0x8cc>
 8008e94:	9a05      	ldr	r2, [sp, #20]
 8008e96:	2a01      	cmp	r2, #1
 8008e98:	f300 80a8 	bgt.w	8008fec <_dtoa_r+0x89c>
 8008e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e9e:	2a00      	cmp	r2, #0
 8008ea0:	f000 80a0 	beq.w	8008fe4 <_dtoa_r+0x894>
 8008ea4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008ea8:	9e06      	ldr	r6, [sp, #24]
 8008eaa:	4645      	mov	r5, r8
 8008eac:	9a04      	ldr	r2, [sp, #16]
 8008eae:	2101      	movs	r1, #1
 8008eb0:	441a      	add	r2, r3
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	4498      	add	r8, r3
 8008eb6:	9204      	str	r2, [sp, #16]
 8008eb8:	f000 fb4c 	bl	8009554 <__i2b>
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	2d00      	cmp	r5, #0
 8008ec0:	dd0b      	ble.n	8008eda <_dtoa_r+0x78a>
 8008ec2:	9b04      	ldr	r3, [sp, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	dd08      	ble.n	8008eda <_dtoa_r+0x78a>
 8008ec8:	42ab      	cmp	r3, r5
 8008eca:	9a04      	ldr	r2, [sp, #16]
 8008ecc:	bfa8      	it	ge
 8008ece:	462b      	movge	r3, r5
 8008ed0:	eba8 0803 	sub.w	r8, r8, r3
 8008ed4:	1aed      	subs	r5, r5, r3
 8008ed6:	1ad3      	subs	r3, r2, r3
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	9b06      	ldr	r3, [sp, #24]
 8008edc:	b1fb      	cbz	r3, 8008f1e <_dtoa_r+0x7ce>
 8008ede:	9b08      	ldr	r3, [sp, #32]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 809f 	beq.w	8009024 <_dtoa_r+0x8d4>
 8008ee6:	2e00      	cmp	r6, #0
 8008ee8:	dd11      	ble.n	8008f0e <_dtoa_r+0x7be>
 8008eea:	4639      	mov	r1, r7
 8008eec:	4632      	mov	r2, r6
 8008eee:	4620      	mov	r0, r4
 8008ef0:	f000 fbec 	bl	80096cc <__pow5mult>
 8008ef4:	465a      	mov	r2, fp
 8008ef6:	4601      	mov	r1, r0
 8008ef8:	4607      	mov	r7, r0
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 fb40 	bl	8009580 <__multiply>
 8008f00:	4659      	mov	r1, fp
 8008f02:	9007      	str	r0, [sp, #28]
 8008f04:	4620      	mov	r0, r4
 8008f06:	f000 fa69 	bl	80093dc <_Bfree>
 8008f0a:	9b07      	ldr	r3, [sp, #28]
 8008f0c:	469b      	mov	fp, r3
 8008f0e:	9b06      	ldr	r3, [sp, #24]
 8008f10:	1b9a      	subs	r2, r3, r6
 8008f12:	d004      	beq.n	8008f1e <_dtoa_r+0x7ce>
 8008f14:	4659      	mov	r1, fp
 8008f16:	4620      	mov	r0, r4
 8008f18:	f000 fbd8 	bl	80096cc <__pow5mult>
 8008f1c:	4683      	mov	fp, r0
 8008f1e:	2101      	movs	r1, #1
 8008f20:	4620      	mov	r0, r4
 8008f22:	f000 fb17 	bl	8009554 <__i2b>
 8008f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	dd7c      	ble.n	8009028 <_dtoa_r+0x8d8>
 8008f2e:	461a      	mov	r2, r3
 8008f30:	4601      	mov	r1, r0
 8008f32:	4620      	mov	r0, r4
 8008f34:	f000 fbca 	bl	80096cc <__pow5mult>
 8008f38:	9b05      	ldr	r3, [sp, #20]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	4606      	mov	r6, r0
 8008f3e:	dd76      	ble.n	800902e <_dtoa_r+0x8de>
 8008f40:	2300      	movs	r3, #0
 8008f42:	9306      	str	r3, [sp, #24]
 8008f44:	6933      	ldr	r3, [r6, #16]
 8008f46:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008f4a:	6918      	ldr	r0, [r3, #16]
 8008f4c:	f000 fab2 	bl	80094b4 <__hi0bits>
 8008f50:	f1c0 0020 	rsb	r0, r0, #32
 8008f54:	9b04      	ldr	r3, [sp, #16]
 8008f56:	4418      	add	r0, r3
 8008f58:	f010 001f 	ands.w	r0, r0, #31
 8008f5c:	f000 8086 	beq.w	800906c <_dtoa_r+0x91c>
 8008f60:	f1c0 0320 	rsb	r3, r0, #32
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	dd7f      	ble.n	8009068 <_dtoa_r+0x918>
 8008f68:	f1c0 001c 	rsb	r0, r0, #28
 8008f6c:	9b04      	ldr	r3, [sp, #16]
 8008f6e:	4403      	add	r3, r0
 8008f70:	4480      	add	r8, r0
 8008f72:	4405      	add	r5, r0
 8008f74:	9304      	str	r3, [sp, #16]
 8008f76:	f1b8 0f00 	cmp.w	r8, #0
 8008f7a:	dd05      	ble.n	8008f88 <_dtoa_r+0x838>
 8008f7c:	4659      	mov	r1, fp
 8008f7e:	4642      	mov	r2, r8
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 fbfd 	bl	8009780 <__lshift>
 8008f86:	4683      	mov	fp, r0
 8008f88:	9b04      	ldr	r3, [sp, #16]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	dd05      	ble.n	8008f9a <_dtoa_r+0x84a>
 8008f8e:	4631      	mov	r1, r6
 8008f90:	461a      	mov	r2, r3
 8008f92:	4620      	mov	r0, r4
 8008f94:	f000 fbf4 	bl	8009780 <__lshift>
 8008f98:	4606      	mov	r6, r0
 8008f9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d069      	beq.n	8009074 <_dtoa_r+0x924>
 8008fa0:	4631      	mov	r1, r6
 8008fa2:	4658      	mov	r0, fp
 8008fa4:	f000 fc58 	bl	8009858 <__mcmp>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	da63      	bge.n	8009074 <_dtoa_r+0x924>
 8008fac:	2300      	movs	r3, #0
 8008fae:	4659      	mov	r1, fp
 8008fb0:	220a      	movs	r2, #10
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 fa34 	bl	8009420 <__multadd>
 8008fb8:	9b08      	ldr	r3, [sp, #32]
 8008fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008fbe:	4683      	mov	fp, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 818f 	beq.w	80092e4 <_dtoa_r+0xb94>
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	2300      	movs	r3, #0
 8008fca:	220a      	movs	r2, #10
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f000 fa27 	bl	8009420 <__multadd>
 8008fd2:	f1b9 0f00 	cmp.w	r9, #0
 8008fd6:	4607      	mov	r7, r0
 8008fd8:	f300 808e 	bgt.w	80090f8 <_dtoa_r+0x9a8>
 8008fdc:	9b05      	ldr	r3, [sp, #20]
 8008fde:	2b02      	cmp	r3, #2
 8008fe0:	dc50      	bgt.n	8009084 <_dtoa_r+0x934>
 8008fe2:	e089      	b.n	80090f8 <_dtoa_r+0x9a8>
 8008fe4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008fe6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008fea:	e75d      	b.n	8008ea8 <_dtoa_r+0x758>
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	1e5e      	subs	r6, r3, #1
 8008ff0:	9b06      	ldr	r3, [sp, #24]
 8008ff2:	42b3      	cmp	r3, r6
 8008ff4:	bfbf      	itttt	lt
 8008ff6:	9b06      	ldrlt	r3, [sp, #24]
 8008ff8:	9606      	strlt	r6, [sp, #24]
 8008ffa:	1af2      	sublt	r2, r6, r3
 8008ffc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008ffe:	bfb6      	itet	lt
 8009000:	189b      	addlt	r3, r3, r2
 8009002:	1b9e      	subge	r6, r3, r6
 8009004:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	bfb8      	it	lt
 800900a:	2600      	movlt	r6, #0
 800900c:	2b00      	cmp	r3, #0
 800900e:	bfb5      	itete	lt
 8009010:	eba8 0503 	sublt.w	r5, r8, r3
 8009014:	9b01      	ldrge	r3, [sp, #4]
 8009016:	2300      	movlt	r3, #0
 8009018:	4645      	movge	r5, r8
 800901a:	e747      	b.n	8008eac <_dtoa_r+0x75c>
 800901c:	9e06      	ldr	r6, [sp, #24]
 800901e:	9f08      	ldr	r7, [sp, #32]
 8009020:	4645      	mov	r5, r8
 8009022:	e74c      	b.n	8008ebe <_dtoa_r+0x76e>
 8009024:	9a06      	ldr	r2, [sp, #24]
 8009026:	e775      	b.n	8008f14 <_dtoa_r+0x7c4>
 8009028:	9b05      	ldr	r3, [sp, #20]
 800902a:	2b01      	cmp	r3, #1
 800902c:	dc18      	bgt.n	8009060 <_dtoa_r+0x910>
 800902e:	9b02      	ldr	r3, [sp, #8]
 8009030:	b9b3      	cbnz	r3, 8009060 <_dtoa_r+0x910>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009038:	b9a3      	cbnz	r3, 8009064 <_dtoa_r+0x914>
 800903a:	9b03      	ldr	r3, [sp, #12]
 800903c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009040:	0d1b      	lsrs	r3, r3, #20
 8009042:	051b      	lsls	r3, r3, #20
 8009044:	b12b      	cbz	r3, 8009052 <_dtoa_r+0x902>
 8009046:	9b04      	ldr	r3, [sp, #16]
 8009048:	3301      	adds	r3, #1
 800904a:	9304      	str	r3, [sp, #16]
 800904c:	f108 0801 	add.w	r8, r8, #1
 8009050:	2301      	movs	r3, #1
 8009052:	9306      	str	r3, [sp, #24]
 8009054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009056:	2b00      	cmp	r3, #0
 8009058:	f47f af74 	bne.w	8008f44 <_dtoa_r+0x7f4>
 800905c:	2001      	movs	r0, #1
 800905e:	e779      	b.n	8008f54 <_dtoa_r+0x804>
 8009060:	2300      	movs	r3, #0
 8009062:	e7f6      	b.n	8009052 <_dtoa_r+0x902>
 8009064:	9b02      	ldr	r3, [sp, #8]
 8009066:	e7f4      	b.n	8009052 <_dtoa_r+0x902>
 8009068:	d085      	beq.n	8008f76 <_dtoa_r+0x826>
 800906a:	4618      	mov	r0, r3
 800906c:	301c      	adds	r0, #28
 800906e:	e77d      	b.n	8008f6c <_dtoa_r+0x81c>
 8009070:	40240000 	.word	0x40240000
 8009074:	9b01      	ldr	r3, [sp, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	dc38      	bgt.n	80090ec <_dtoa_r+0x99c>
 800907a:	9b05      	ldr	r3, [sp, #20]
 800907c:	2b02      	cmp	r3, #2
 800907e:	dd35      	ble.n	80090ec <_dtoa_r+0x99c>
 8009080:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009084:	f1b9 0f00 	cmp.w	r9, #0
 8009088:	d10d      	bne.n	80090a6 <_dtoa_r+0x956>
 800908a:	4631      	mov	r1, r6
 800908c:	464b      	mov	r3, r9
 800908e:	2205      	movs	r2, #5
 8009090:	4620      	mov	r0, r4
 8009092:	f000 f9c5 	bl	8009420 <__multadd>
 8009096:	4601      	mov	r1, r0
 8009098:	4606      	mov	r6, r0
 800909a:	4658      	mov	r0, fp
 800909c:	f000 fbdc 	bl	8009858 <__mcmp>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	f73f adbd 	bgt.w	8008c20 <_dtoa_r+0x4d0>
 80090a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a8:	9d00      	ldr	r5, [sp, #0]
 80090aa:	ea6f 0a03 	mvn.w	sl, r3
 80090ae:	f04f 0800 	mov.w	r8, #0
 80090b2:	4631      	mov	r1, r6
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 f991 	bl	80093dc <_Bfree>
 80090ba:	2f00      	cmp	r7, #0
 80090bc:	f43f aeb4 	beq.w	8008e28 <_dtoa_r+0x6d8>
 80090c0:	f1b8 0f00 	cmp.w	r8, #0
 80090c4:	d005      	beq.n	80090d2 <_dtoa_r+0x982>
 80090c6:	45b8      	cmp	r8, r7
 80090c8:	d003      	beq.n	80090d2 <_dtoa_r+0x982>
 80090ca:	4641      	mov	r1, r8
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 f985 	bl	80093dc <_Bfree>
 80090d2:	4639      	mov	r1, r7
 80090d4:	4620      	mov	r0, r4
 80090d6:	f000 f981 	bl	80093dc <_Bfree>
 80090da:	e6a5      	b.n	8008e28 <_dtoa_r+0x6d8>
 80090dc:	2600      	movs	r6, #0
 80090de:	4637      	mov	r7, r6
 80090e0:	e7e1      	b.n	80090a6 <_dtoa_r+0x956>
 80090e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80090e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80090e8:	4637      	mov	r7, r6
 80090ea:	e599      	b.n	8008c20 <_dtoa_r+0x4d0>
 80090ec:	9b08      	ldr	r3, [sp, #32]
 80090ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 80fd 	beq.w	80092f2 <_dtoa_r+0xba2>
 80090f8:	2d00      	cmp	r5, #0
 80090fa:	dd05      	ble.n	8009108 <_dtoa_r+0x9b8>
 80090fc:	4639      	mov	r1, r7
 80090fe:	462a      	mov	r2, r5
 8009100:	4620      	mov	r0, r4
 8009102:	f000 fb3d 	bl	8009780 <__lshift>
 8009106:	4607      	mov	r7, r0
 8009108:	9b06      	ldr	r3, [sp, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d05c      	beq.n	80091c8 <_dtoa_r+0xa78>
 800910e:	6879      	ldr	r1, [r7, #4]
 8009110:	4620      	mov	r0, r4
 8009112:	f000 f923 	bl	800935c <_Balloc>
 8009116:	4605      	mov	r5, r0
 8009118:	b928      	cbnz	r0, 8009126 <_dtoa_r+0x9d6>
 800911a:	4b80      	ldr	r3, [pc, #512]	; (800931c <_dtoa_r+0xbcc>)
 800911c:	4602      	mov	r2, r0
 800911e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009122:	f7ff bb2e 	b.w	8008782 <_dtoa_r+0x32>
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	3202      	adds	r2, #2
 800912a:	0092      	lsls	r2, r2, #2
 800912c:	f107 010c 	add.w	r1, r7, #12
 8009130:	300c      	adds	r0, #12
 8009132:	f000 f905 	bl	8009340 <memcpy>
 8009136:	2201      	movs	r2, #1
 8009138:	4629      	mov	r1, r5
 800913a:	4620      	mov	r0, r4
 800913c:	f000 fb20 	bl	8009780 <__lshift>
 8009140:	9b00      	ldr	r3, [sp, #0]
 8009142:	3301      	adds	r3, #1
 8009144:	9301      	str	r3, [sp, #4]
 8009146:	9b00      	ldr	r3, [sp, #0]
 8009148:	444b      	add	r3, r9
 800914a:	9307      	str	r3, [sp, #28]
 800914c:	9b02      	ldr	r3, [sp, #8]
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	46b8      	mov	r8, r7
 8009154:	9306      	str	r3, [sp, #24]
 8009156:	4607      	mov	r7, r0
 8009158:	9b01      	ldr	r3, [sp, #4]
 800915a:	4631      	mov	r1, r6
 800915c:	3b01      	subs	r3, #1
 800915e:	4658      	mov	r0, fp
 8009160:	9302      	str	r3, [sp, #8]
 8009162:	f7ff fa67 	bl	8008634 <quorem>
 8009166:	4603      	mov	r3, r0
 8009168:	3330      	adds	r3, #48	; 0x30
 800916a:	9004      	str	r0, [sp, #16]
 800916c:	4641      	mov	r1, r8
 800916e:	4658      	mov	r0, fp
 8009170:	9308      	str	r3, [sp, #32]
 8009172:	f000 fb71 	bl	8009858 <__mcmp>
 8009176:	463a      	mov	r2, r7
 8009178:	4681      	mov	r9, r0
 800917a:	4631      	mov	r1, r6
 800917c:	4620      	mov	r0, r4
 800917e:	f000 fb87 	bl	8009890 <__mdiff>
 8009182:	68c2      	ldr	r2, [r0, #12]
 8009184:	9b08      	ldr	r3, [sp, #32]
 8009186:	4605      	mov	r5, r0
 8009188:	bb02      	cbnz	r2, 80091cc <_dtoa_r+0xa7c>
 800918a:	4601      	mov	r1, r0
 800918c:	4658      	mov	r0, fp
 800918e:	f000 fb63 	bl	8009858 <__mcmp>
 8009192:	9b08      	ldr	r3, [sp, #32]
 8009194:	4602      	mov	r2, r0
 8009196:	4629      	mov	r1, r5
 8009198:	4620      	mov	r0, r4
 800919a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800919e:	f000 f91d 	bl	80093dc <_Bfree>
 80091a2:	9b05      	ldr	r3, [sp, #20]
 80091a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091a6:	9d01      	ldr	r5, [sp, #4]
 80091a8:	ea43 0102 	orr.w	r1, r3, r2
 80091ac:	9b06      	ldr	r3, [sp, #24]
 80091ae:	430b      	orrs	r3, r1
 80091b0:	9b08      	ldr	r3, [sp, #32]
 80091b2:	d10d      	bne.n	80091d0 <_dtoa_r+0xa80>
 80091b4:	2b39      	cmp	r3, #57	; 0x39
 80091b6:	d029      	beq.n	800920c <_dtoa_r+0xabc>
 80091b8:	f1b9 0f00 	cmp.w	r9, #0
 80091bc:	dd01      	ble.n	80091c2 <_dtoa_r+0xa72>
 80091be:	9b04      	ldr	r3, [sp, #16]
 80091c0:	3331      	adds	r3, #49	; 0x31
 80091c2:	9a02      	ldr	r2, [sp, #8]
 80091c4:	7013      	strb	r3, [r2, #0]
 80091c6:	e774      	b.n	80090b2 <_dtoa_r+0x962>
 80091c8:	4638      	mov	r0, r7
 80091ca:	e7b9      	b.n	8009140 <_dtoa_r+0x9f0>
 80091cc:	2201      	movs	r2, #1
 80091ce:	e7e2      	b.n	8009196 <_dtoa_r+0xa46>
 80091d0:	f1b9 0f00 	cmp.w	r9, #0
 80091d4:	db06      	blt.n	80091e4 <_dtoa_r+0xa94>
 80091d6:	9905      	ldr	r1, [sp, #20]
 80091d8:	ea41 0909 	orr.w	r9, r1, r9
 80091dc:	9906      	ldr	r1, [sp, #24]
 80091de:	ea59 0101 	orrs.w	r1, r9, r1
 80091e2:	d120      	bne.n	8009226 <_dtoa_r+0xad6>
 80091e4:	2a00      	cmp	r2, #0
 80091e6:	ddec      	ble.n	80091c2 <_dtoa_r+0xa72>
 80091e8:	4659      	mov	r1, fp
 80091ea:	2201      	movs	r2, #1
 80091ec:	4620      	mov	r0, r4
 80091ee:	9301      	str	r3, [sp, #4]
 80091f0:	f000 fac6 	bl	8009780 <__lshift>
 80091f4:	4631      	mov	r1, r6
 80091f6:	4683      	mov	fp, r0
 80091f8:	f000 fb2e 	bl	8009858 <__mcmp>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	9b01      	ldr	r3, [sp, #4]
 8009200:	dc02      	bgt.n	8009208 <_dtoa_r+0xab8>
 8009202:	d1de      	bne.n	80091c2 <_dtoa_r+0xa72>
 8009204:	07da      	lsls	r2, r3, #31
 8009206:	d5dc      	bpl.n	80091c2 <_dtoa_r+0xa72>
 8009208:	2b39      	cmp	r3, #57	; 0x39
 800920a:	d1d8      	bne.n	80091be <_dtoa_r+0xa6e>
 800920c:	9a02      	ldr	r2, [sp, #8]
 800920e:	2339      	movs	r3, #57	; 0x39
 8009210:	7013      	strb	r3, [r2, #0]
 8009212:	462b      	mov	r3, r5
 8009214:	461d      	mov	r5, r3
 8009216:	3b01      	subs	r3, #1
 8009218:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800921c:	2a39      	cmp	r2, #57	; 0x39
 800921e:	d050      	beq.n	80092c2 <_dtoa_r+0xb72>
 8009220:	3201      	adds	r2, #1
 8009222:	701a      	strb	r2, [r3, #0]
 8009224:	e745      	b.n	80090b2 <_dtoa_r+0x962>
 8009226:	2a00      	cmp	r2, #0
 8009228:	dd03      	ble.n	8009232 <_dtoa_r+0xae2>
 800922a:	2b39      	cmp	r3, #57	; 0x39
 800922c:	d0ee      	beq.n	800920c <_dtoa_r+0xabc>
 800922e:	3301      	adds	r3, #1
 8009230:	e7c7      	b.n	80091c2 <_dtoa_r+0xa72>
 8009232:	9a01      	ldr	r2, [sp, #4]
 8009234:	9907      	ldr	r1, [sp, #28]
 8009236:	f802 3c01 	strb.w	r3, [r2, #-1]
 800923a:	428a      	cmp	r2, r1
 800923c:	d02a      	beq.n	8009294 <_dtoa_r+0xb44>
 800923e:	4659      	mov	r1, fp
 8009240:	2300      	movs	r3, #0
 8009242:	220a      	movs	r2, #10
 8009244:	4620      	mov	r0, r4
 8009246:	f000 f8eb 	bl	8009420 <__multadd>
 800924a:	45b8      	cmp	r8, r7
 800924c:	4683      	mov	fp, r0
 800924e:	f04f 0300 	mov.w	r3, #0
 8009252:	f04f 020a 	mov.w	r2, #10
 8009256:	4641      	mov	r1, r8
 8009258:	4620      	mov	r0, r4
 800925a:	d107      	bne.n	800926c <_dtoa_r+0xb1c>
 800925c:	f000 f8e0 	bl	8009420 <__multadd>
 8009260:	4680      	mov	r8, r0
 8009262:	4607      	mov	r7, r0
 8009264:	9b01      	ldr	r3, [sp, #4]
 8009266:	3301      	adds	r3, #1
 8009268:	9301      	str	r3, [sp, #4]
 800926a:	e775      	b.n	8009158 <_dtoa_r+0xa08>
 800926c:	f000 f8d8 	bl	8009420 <__multadd>
 8009270:	4639      	mov	r1, r7
 8009272:	4680      	mov	r8, r0
 8009274:	2300      	movs	r3, #0
 8009276:	220a      	movs	r2, #10
 8009278:	4620      	mov	r0, r4
 800927a:	f000 f8d1 	bl	8009420 <__multadd>
 800927e:	4607      	mov	r7, r0
 8009280:	e7f0      	b.n	8009264 <_dtoa_r+0xb14>
 8009282:	f1b9 0f00 	cmp.w	r9, #0
 8009286:	9a00      	ldr	r2, [sp, #0]
 8009288:	bfcc      	ite	gt
 800928a:	464d      	movgt	r5, r9
 800928c:	2501      	movle	r5, #1
 800928e:	4415      	add	r5, r2
 8009290:	f04f 0800 	mov.w	r8, #0
 8009294:	4659      	mov	r1, fp
 8009296:	2201      	movs	r2, #1
 8009298:	4620      	mov	r0, r4
 800929a:	9301      	str	r3, [sp, #4]
 800929c:	f000 fa70 	bl	8009780 <__lshift>
 80092a0:	4631      	mov	r1, r6
 80092a2:	4683      	mov	fp, r0
 80092a4:	f000 fad8 	bl	8009858 <__mcmp>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	dcb2      	bgt.n	8009212 <_dtoa_r+0xac2>
 80092ac:	d102      	bne.n	80092b4 <_dtoa_r+0xb64>
 80092ae:	9b01      	ldr	r3, [sp, #4]
 80092b0:	07db      	lsls	r3, r3, #31
 80092b2:	d4ae      	bmi.n	8009212 <_dtoa_r+0xac2>
 80092b4:	462b      	mov	r3, r5
 80092b6:	461d      	mov	r5, r3
 80092b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092bc:	2a30      	cmp	r2, #48	; 0x30
 80092be:	d0fa      	beq.n	80092b6 <_dtoa_r+0xb66>
 80092c0:	e6f7      	b.n	80090b2 <_dtoa_r+0x962>
 80092c2:	9a00      	ldr	r2, [sp, #0]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d1a5      	bne.n	8009214 <_dtoa_r+0xac4>
 80092c8:	f10a 0a01 	add.w	sl, sl, #1
 80092cc:	2331      	movs	r3, #49	; 0x31
 80092ce:	e779      	b.n	80091c4 <_dtoa_r+0xa74>
 80092d0:	4b13      	ldr	r3, [pc, #76]	; (8009320 <_dtoa_r+0xbd0>)
 80092d2:	f7ff baaf 	b.w	8008834 <_dtoa_r+0xe4>
 80092d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f47f aa86 	bne.w	80087ea <_dtoa_r+0x9a>
 80092de:	4b11      	ldr	r3, [pc, #68]	; (8009324 <_dtoa_r+0xbd4>)
 80092e0:	f7ff baa8 	b.w	8008834 <_dtoa_r+0xe4>
 80092e4:	f1b9 0f00 	cmp.w	r9, #0
 80092e8:	dc03      	bgt.n	80092f2 <_dtoa_r+0xba2>
 80092ea:	9b05      	ldr	r3, [sp, #20]
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	f73f aec9 	bgt.w	8009084 <_dtoa_r+0x934>
 80092f2:	9d00      	ldr	r5, [sp, #0]
 80092f4:	4631      	mov	r1, r6
 80092f6:	4658      	mov	r0, fp
 80092f8:	f7ff f99c 	bl	8008634 <quorem>
 80092fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009300:	f805 3b01 	strb.w	r3, [r5], #1
 8009304:	9a00      	ldr	r2, [sp, #0]
 8009306:	1aaa      	subs	r2, r5, r2
 8009308:	4591      	cmp	r9, r2
 800930a:	ddba      	ble.n	8009282 <_dtoa_r+0xb32>
 800930c:	4659      	mov	r1, fp
 800930e:	2300      	movs	r3, #0
 8009310:	220a      	movs	r2, #10
 8009312:	4620      	mov	r0, r4
 8009314:	f000 f884 	bl	8009420 <__multadd>
 8009318:	4683      	mov	fp, r0
 800931a:	e7eb      	b.n	80092f4 <_dtoa_r+0xba4>
 800931c:	0800abbf 	.word	0x0800abbf
 8009320:	0800ab18 	.word	0x0800ab18
 8009324:	0800ab3c 	.word	0x0800ab3c

08009328 <_localeconv_r>:
 8009328:	4800      	ldr	r0, [pc, #0]	; (800932c <_localeconv_r+0x4>)
 800932a:	4770      	bx	lr
 800932c:	20000174 	.word	0x20000174

08009330 <malloc>:
 8009330:	4b02      	ldr	r3, [pc, #8]	; (800933c <malloc+0xc>)
 8009332:	4601      	mov	r1, r0
 8009334:	6818      	ldr	r0, [r3, #0]
 8009336:	f000 bbef 	b.w	8009b18 <_malloc_r>
 800933a:	bf00      	nop
 800933c:	20000020 	.word	0x20000020

08009340 <memcpy>:
 8009340:	440a      	add	r2, r1
 8009342:	4291      	cmp	r1, r2
 8009344:	f100 33ff 	add.w	r3, r0, #4294967295
 8009348:	d100      	bne.n	800934c <memcpy+0xc>
 800934a:	4770      	bx	lr
 800934c:	b510      	push	{r4, lr}
 800934e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009356:	4291      	cmp	r1, r2
 8009358:	d1f9      	bne.n	800934e <memcpy+0xe>
 800935a:	bd10      	pop	{r4, pc}

0800935c <_Balloc>:
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009360:	4604      	mov	r4, r0
 8009362:	460d      	mov	r5, r1
 8009364:	b976      	cbnz	r6, 8009384 <_Balloc+0x28>
 8009366:	2010      	movs	r0, #16
 8009368:	f7ff ffe2 	bl	8009330 <malloc>
 800936c:	4602      	mov	r2, r0
 800936e:	6260      	str	r0, [r4, #36]	; 0x24
 8009370:	b920      	cbnz	r0, 800937c <_Balloc+0x20>
 8009372:	4b18      	ldr	r3, [pc, #96]	; (80093d4 <_Balloc+0x78>)
 8009374:	4818      	ldr	r0, [pc, #96]	; (80093d8 <_Balloc+0x7c>)
 8009376:	2166      	movs	r1, #102	; 0x66
 8009378:	f000 fd94 	bl	8009ea4 <__assert_func>
 800937c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009380:	6006      	str	r6, [r0, #0]
 8009382:	60c6      	str	r6, [r0, #12]
 8009384:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009386:	68f3      	ldr	r3, [r6, #12]
 8009388:	b183      	cbz	r3, 80093ac <_Balloc+0x50>
 800938a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009392:	b9b8      	cbnz	r0, 80093c4 <_Balloc+0x68>
 8009394:	2101      	movs	r1, #1
 8009396:	fa01 f605 	lsl.w	r6, r1, r5
 800939a:	1d72      	adds	r2, r6, #5
 800939c:	0092      	lsls	r2, r2, #2
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 fb5a 	bl	8009a58 <_calloc_r>
 80093a4:	b160      	cbz	r0, 80093c0 <_Balloc+0x64>
 80093a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093aa:	e00e      	b.n	80093ca <_Balloc+0x6e>
 80093ac:	2221      	movs	r2, #33	; 0x21
 80093ae:	2104      	movs	r1, #4
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 fb51 	bl	8009a58 <_calloc_r>
 80093b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093b8:	60f0      	str	r0, [r6, #12]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d1e4      	bne.n	800938a <_Balloc+0x2e>
 80093c0:	2000      	movs	r0, #0
 80093c2:	bd70      	pop	{r4, r5, r6, pc}
 80093c4:	6802      	ldr	r2, [r0, #0]
 80093c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093ca:	2300      	movs	r3, #0
 80093cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093d0:	e7f7      	b.n	80093c2 <_Balloc+0x66>
 80093d2:	bf00      	nop
 80093d4:	0800ab49 	.word	0x0800ab49
 80093d8:	0800abd0 	.word	0x0800abd0

080093dc <_Bfree>:
 80093dc:	b570      	push	{r4, r5, r6, lr}
 80093de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093e0:	4605      	mov	r5, r0
 80093e2:	460c      	mov	r4, r1
 80093e4:	b976      	cbnz	r6, 8009404 <_Bfree+0x28>
 80093e6:	2010      	movs	r0, #16
 80093e8:	f7ff ffa2 	bl	8009330 <malloc>
 80093ec:	4602      	mov	r2, r0
 80093ee:	6268      	str	r0, [r5, #36]	; 0x24
 80093f0:	b920      	cbnz	r0, 80093fc <_Bfree+0x20>
 80093f2:	4b09      	ldr	r3, [pc, #36]	; (8009418 <_Bfree+0x3c>)
 80093f4:	4809      	ldr	r0, [pc, #36]	; (800941c <_Bfree+0x40>)
 80093f6:	218a      	movs	r1, #138	; 0x8a
 80093f8:	f000 fd54 	bl	8009ea4 <__assert_func>
 80093fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009400:	6006      	str	r6, [r0, #0]
 8009402:	60c6      	str	r6, [r0, #12]
 8009404:	b13c      	cbz	r4, 8009416 <_Bfree+0x3a>
 8009406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009408:	6862      	ldr	r2, [r4, #4]
 800940a:	68db      	ldr	r3, [r3, #12]
 800940c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009410:	6021      	str	r1, [r4, #0]
 8009412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	0800ab49 	.word	0x0800ab49
 800941c:	0800abd0 	.word	0x0800abd0

08009420 <__multadd>:
 8009420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009424:	690e      	ldr	r6, [r1, #16]
 8009426:	4607      	mov	r7, r0
 8009428:	4698      	mov	r8, r3
 800942a:	460c      	mov	r4, r1
 800942c:	f101 0014 	add.w	r0, r1, #20
 8009430:	2300      	movs	r3, #0
 8009432:	6805      	ldr	r5, [r0, #0]
 8009434:	b2a9      	uxth	r1, r5
 8009436:	fb02 8101 	mla	r1, r2, r1, r8
 800943a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800943e:	0c2d      	lsrs	r5, r5, #16
 8009440:	fb02 c505 	mla	r5, r2, r5, ip
 8009444:	b289      	uxth	r1, r1
 8009446:	3301      	adds	r3, #1
 8009448:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800944c:	429e      	cmp	r6, r3
 800944e:	f840 1b04 	str.w	r1, [r0], #4
 8009452:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8009456:	dcec      	bgt.n	8009432 <__multadd+0x12>
 8009458:	f1b8 0f00 	cmp.w	r8, #0
 800945c:	d022      	beq.n	80094a4 <__multadd+0x84>
 800945e:	68a3      	ldr	r3, [r4, #8]
 8009460:	42b3      	cmp	r3, r6
 8009462:	dc19      	bgt.n	8009498 <__multadd+0x78>
 8009464:	6861      	ldr	r1, [r4, #4]
 8009466:	4638      	mov	r0, r7
 8009468:	3101      	adds	r1, #1
 800946a:	f7ff ff77 	bl	800935c <_Balloc>
 800946e:	4605      	mov	r5, r0
 8009470:	b928      	cbnz	r0, 800947e <__multadd+0x5e>
 8009472:	4602      	mov	r2, r0
 8009474:	4b0d      	ldr	r3, [pc, #52]	; (80094ac <__multadd+0x8c>)
 8009476:	480e      	ldr	r0, [pc, #56]	; (80094b0 <__multadd+0x90>)
 8009478:	21b5      	movs	r1, #181	; 0xb5
 800947a:	f000 fd13 	bl	8009ea4 <__assert_func>
 800947e:	6922      	ldr	r2, [r4, #16]
 8009480:	3202      	adds	r2, #2
 8009482:	f104 010c 	add.w	r1, r4, #12
 8009486:	0092      	lsls	r2, r2, #2
 8009488:	300c      	adds	r0, #12
 800948a:	f7ff ff59 	bl	8009340 <memcpy>
 800948e:	4621      	mov	r1, r4
 8009490:	4638      	mov	r0, r7
 8009492:	f7ff ffa3 	bl	80093dc <_Bfree>
 8009496:	462c      	mov	r4, r5
 8009498:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800949c:	3601      	adds	r6, #1
 800949e:	f8c3 8014 	str.w	r8, [r3, #20]
 80094a2:	6126      	str	r6, [r4, #16]
 80094a4:	4620      	mov	r0, r4
 80094a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094aa:	bf00      	nop
 80094ac:	0800abbf 	.word	0x0800abbf
 80094b0:	0800abd0 	.word	0x0800abd0

080094b4 <__hi0bits>:
 80094b4:	0c03      	lsrs	r3, r0, #16
 80094b6:	041b      	lsls	r3, r3, #16
 80094b8:	b9d3      	cbnz	r3, 80094f0 <__hi0bits+0x3c>
 80094ba:	0400      	lsls	r0, r0, #16
 80094bc:	2310      	movs	r3, #16
 80094be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80094c2:	bf04      	itt	eq
 80094c4:	0200      	lsleq	r0, r0, #8
 80094c6:	3308      	addeq	r3, #8
 80094c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094cc:	bf04      	itt	eq
 80094ce:	0100      	lsleq	r0, r0, #4
 80094d0:	3304      	addeq	r3, #4
 80094d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094d6:	bf04      	itt	eq
 80094d8:	0080      	lsleq	r0, r0, #2
 80094da:	3302      	addeq	r3, #2
 80094dc:	2800      	cmp	r0, #0
 80094de:	db05      	blt.n	80094ec <__hi0bits+0x38>
 80094e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094e4:	f103 0301 	add.w	r3, r3, #1
 80094e8:	bf08      	it	eq
 80094ea:	2320      	moveq	r3, #32
 80094ec:	4618      	mov	r0, r3
 80094ee:	4770      	bx	lr
 80094f0:	2300      	movs	r3, #0
 80094f2:	e7e4      	b.n	80094be <__hi0bits+0xa>

080094f4 <__lo0bits>:
 80094f4:	6803      	ldr	r3, [r0, #0]
 80094f6:	f013 0207 	ands.w	r2, r3, #7
 80094fa:	4601      	mov	r1, r0
 80094fc:	d00b      	beq.n	8009516 <__lo0bits+0x22>
 80094fe:	07da      	lsls	r2, r3, #31
 8009500:	d424      	bmi.n	800954c <__lo0bits+0x58>
 8009502:	0798      	lsls	r0, r3, #30
 8009504:	bf49      	itett	mi
 8009506:	085b      	lsrmi	r3, r3, #1
 8009508:	089b      	lsrpl	r3, r3, #2
 800950a:	2001      	movmi	r0, #1
 800950c:	600b      	strmi	r3, [r1, #0]
 800950e:	bf5c      	itt	pl
 8009510:	600b      	strpl	r3, [r1, #0]
 8009512:	2002      	movpl	r0, #2
 8009514:	4770      	bx	lr
 8009516:	b298      	uxth	r0, r3
 8009518:	b9b0      	cbnz	r0, 8009548 <__lo0bits+0x54>
 800951a:	0c1b      	lsrs	r3, r3, #16
 800951c:	2010      	movs	r0, #16
 800951e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009522:	bf04      	itt	eq
 8009524:	0a1b      	lsreq	r3, r3, #8
 8009526:	3008      	addeq	r0, #8
 8009528:	071a      	lsls	r2, r3, #28
 800952a:	bf04      	itt	eq
 800952c:	091b      	lsreq	r3, r3, #4
 800952e:	3004      	addeq	r0, #4
 8009530:	079a      	lsls	r2, r3, #30
 8009532:	bf04      	itt	eq
 8009534:	089b      	lsreq	r3, r3, #2
 8009536:	3002      	addeq	r0, #2
 8009538:	07da      	lsls	r2, r3, #31
 800953a:	d403      	bmi.n	8009544 <__lo0bits+0x50>
 800953c:	085b      	lsrs	r3, r3, #1
 800953e:	f100 0001 	add.w	r0, r0, #1
 8009542:	d005      	beq.n	8009550 <__lo0bits+0x5c>
 8009544:	600b      	str	r3, [r1, #0]
 8009546:	4770      	bx	lr
 8009548:	4610      	mov	r0, r2
 800954a:	e7e8      	b.n	800951e <__lo0bits+0x2a>
 800954c:	2000      	movs	r0, #0
 800954e:	4770      	bx	lr
 8009550:	2020      	movs	r0, #32
 8009552:	4770      	bx	lr

08009554 <__i2b>:
 8009554:	b510      	push	{r4, lr}
 8009556:	460c      	mov	r4, r1
 8009558:	2101      	movs	r1, #1
 800955a:	f7ff feff 	bl	800935c <_Balloc>
 800955e:	4602      	mov	r2, r0
 8009560:	b928      	cbnz	r0, 800956e <__i2b+0x1a>
 8009562:	4b05      	ldr	r3, [pc, #20]	; (8009578 <__i2b+0x24>)
 8009564:	4805      	ldr	r0, [pc, #20]	; (800957c <__i2b+0x28>)
 8009566:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800956a:	f000 fc9b 	bl	8009ea4 <__assert_func>
 800956e:	2301      	movs	r3, #1
 8009570:	6144      	str	r4, [r0, #20]
 8009572:	6103      	str	r3, [r0, #16]
 8009574:	bd10      	pop	{r4, pc}
 8009576:	bf00      	nop
 8009578:	0800abbf 	.word	0x0800abbf
 800957c:	0800abd0 	.word	0x0800abd0

08009580 <__multiply>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	4614      	mov	r4, r2
 8009586:	690a      	ldr	r2, [r1, #16]
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	429a      	cmp	r2, r3
 800958c:	bfb8      	it	lt
 800958e:	460b      	movlt	r3, r1
 8009590:	460d      	mov	r5, r1
 8009592:	bfbc      	itt	lt
 8009594:	4625      	movlt	r5, r4
 8009596:	461c      	movlt	r4, r3
 8009598:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800959c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80095a0:	68ab      	ldr	r3, [r5, #8]
 80095a2:	6869      	ldr	r1, [r5, #4]
 80095a4:	eb0a 0709 	add.w	r7, sl, r9
 80095a8:	42bb      	cmp	r3, r7
 80095aa:	b085      	sub	sp, #20
 80095ac:	bfb8      	it	lt
 80095ae:	3101      	addlt	r1, #1
 80095b0:	f7ff fed4 	bl	800935c <_Balloc>
 80095b4:	b930      	cbnz	r0, 80095c4 <__multiply+0x44>
 80095b6:	4602      	mov	r2, r0
 80095b8:	4b42      	ldr	r3, [pc, #264]	; (80096c4 <__multiply+0x144>)
 80095ba:	4843      	ldr	r0, [pc, #268]	; (80096c8 <__multiply+0x148>)
 80095bc:	f240 115d 	movw	r1, #349	; 0x15d
 80095c0:	f000 fc70 	bl	8009ea4 <__assert_func>
 80095c4:	f100 0614 	add.w	r6, r0, #20
 80095c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80095cc:	4633      	mov	r3, r6
 80095ce:	2200      	movs	r2, #0
 80095d0:	4543      	cmp	r3, r8
 80095d2:	d31e      	bcc.n	8009612 <__multiply+0x92>
 80095d4:	f105 0c14 	add.w	ip, r5, #20
 80095d8:	f104 0314 	add.w	r3, r4, #20
 80095dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80095e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80095e4:	9202      	str	r2, [sp, #8]
 80095e6:	ebac 0205 	sub.w	r2, ip, r5
 80095ea:	3a15      	subs	r2, #21
 80095ec:	f022 0203 	bic.w	r2, r2, #3
 80095f0:	3204      	adds	r2, #4
 80095f2:	f105 0115 	add.w	r1, r5, #21
 80095f6:	458c      	cmp	ip, r1
 80095f8:	bf38      	it	cc
 80095fa:	2204      	movcc	r2, #4
 80095fc:	9201      	str	r2, [sp, #4]
 80095fe:	9a02      	ldr	r2, [sp, #8]
 8009600:	9303      	str	r3, [sp, #12]
 8009602:	429a      	cmp	r2, r3
 8009604:	d808      	bhi.n	8009618 <__multiply+0x98>
 8009606:	2f00      	cmp	r7, #0
 8009608:	dc55      	bgt.n	80096b6 <__multiply+0x136>
 800960a:	6107      	str	r7, [r0, #16]
 800960c:	b005      	add	sp, #20
 800960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009612:	f843 2b04 	str.w	r2, [r3], #4
 8009616:	e7db      	b.n	80095d0 <__multiply+0x50>
 8009618:	f8b3 a000 	ldrh.w	sl, [r3]
 800961c:	f1ba 0f00 	cmp.w	sl, #0
 8009620:	d020      	beq.n	8009664 <__multiply+0xe4>
 8009622:	f105 0e14 	add.w	lr, r5, #20
 8009626:	46b1      	mov	r9, r6
 8009628:	2200      	movs	r2, #0
 800962a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800962e:	f8d9 b000 	ldr.w	fp, [r9]
 8009632:	b2a1      	uxth	r1, r4
 8009634:	fa1f fb8b 	uxth.w	fp, fp
 8009638:	fb0a b101 	mla	r1, sl, r1, fp
 800963c:	4411      	add	r1, r2
 800963e:	f8d9 2000 	ldr.w	r2, [r9]
 8009642:	0c24      	lsrs	r4, r4, #16
 8009644:	0c12      	lsrs	r2, r2, #16
 8009646:	fb0a 2404 	mla	r4, sl, r4, r2
 800964a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800964e:	b289      	uxth	r1, r1
 8009650:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009654:	45f4      	cmp	ip, lr
 8009656:	f849 1b04 	str.w	r1, [r9], #4
 800965a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800965e:	d8e4      	bhi.n	800962a <__multiply+0xaa>
 8009660:	9901      	ldr	r1, [sp, #4]
 8009662:	5072      	str	r2, [r6, r1]
 8009664:	9a03      	ldr	r2, [sp, #12]
 8009666:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800966a:	3304      	adds	r3, #4
 800966c:	f1b9 0f00 	cmp.w	r9, #0
 8009670:	d01f      	beq.n	80096b2 <__multiply+0x132>
 8009672:	6834      	ldr	r4, [r6, #0]
 8009674:	f105 0114 	add.w	r1, r5, #20
 8009678:	46b6      	mov	lr, r6
 800967a:	f04f 0a00 	mov.w	sl, #0
 800967e:	880a      	ldrh	r2, [r1, #0]
 8009680:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009684:	fb09 b202 	mla	r2, r9, r2, fp
 8009688:	4492      	add	sl, r2
 800968a:	b2a4      	uxth	r4, r4
 800968c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009690:	f84e 4b04 	str.w	r4, [lr], #4
 8009694:	f851 4b04 	ldr.w	r4, [r1], #4
 8009698:	f8be 2000 	ldrh.w	r2, [lr]
 800969c:	0c24      	lsrs	r4, r4, #16
 800969e:	fb09 2404 	mla	r4, r9, r4, r2
 80096a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80096a6:	458c      	cmp	ip, r1
 80096a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80096ac:	d8e7      	bhi.n	800967e <__multiply+0xfe>
 80096ae:	9a01      	ldr	r2, [sp, #4]
 80096b0:	50b4      	str	r4, [r6, r2]
 80096b2:	3604      	adds	r6, #4
 80096b4:	e7a3      	b.n	80095fe <__multiply+0x7e>
 80096b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d1a5      	bne.n	800960a <__multiply+0x8a>
 80096be:	3f01      	subs	r7, #1
 80096c0:	e7a1      	b.n	8009606 <__multiply+0x86>
 80096c2:	bf00      	nop
 80096c4:	0800abbf 	.word	0x0800abbf
 80096c8:	0800abd0 	.word	0x0800abd0

080096cc <__pow5mult>:
 80096cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d0:	4615      	mov	r5, r2
 80096d2:	f012 0203 	ands.w	r2, r2, #3
 80096d6:	4606      	mov	r6, r0
 80096d8:	460f      	mov	r7, r1
 80096da:	d007      	beq.n	80096ec <__pow5mult+0x20>
 80096dc:	4c25      	ldr	r4, [pc, #148]	; (8009774 <__pow5mult+0xa8>)
 80096de:	3a01      	subs	r2, #1
 80096e0:	2300      	movs	r3, #0
 80096e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096e6:	f7ff fe9b 	bl	8009420 <__multadd>
 80096ea:	4607      	mov	r7, r0
 80096ec:	10ad      	asrs	r5, r5, #2
 80096ee:	d03d      	beq.n	800976c <__pow5mult+0xa0>
 80096f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096f2:	b97c      	cbnz	r4, 8009714 <__pow5mult+0x48>
 80096f4:	2010      	movs	r0, #16
 80096f6:	f7ff fe1b 	bl	8009330 <malloc>
 80096fa:	4602      	mov	r2, r0
 80096fc:	6270      	str	r0, [r6, #36]	; 0x24
 80096fe:	b928      	cbnz	r0, 800970c <__pow5mult+0x40>
 8009700:	4b1d      	ldr	r3, [pc, #116]	; (8009778 <__pow5mult+0xac>)
 8009702:	481e      	ldr	r0, [pc, #120]	; (800977c <__pow5mult+0xb0>)
 8009704:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009708:	f000 fbcc 	bl	8009ea4 <__assert_func>
 800970c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009710:	6004      	str	r4, [r0, #0]
 8009712:	60c4      	str	r4, [r0, #12]
 8009714:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800971c:	b94c      	cbnz	r4, 8009732 <__pow5mult+0x66>
 800971e:	f240 2171 	movw	r1, #625	; 0x271
 8009722:	4630      	mov	r0, r6
 8009724:	f7ff ff16 	bl	8009554 <__i2b>
 8009728:	2300      	movs	r3, #0
 800972a:	f8c8 0008 	str.w	r0, [r8, #8]
 800972e:	4604      	mov	r4, r0
 8009730:	6003      	str	r3, [r0, #0]
 8009732:	f04f 0900 	mov.w	r9, #0
 8009736:	07eb      	lsls	r3, r5, #31
 8009738:	d50a      	bpl.n	8009750 <__pow5mult+0x84>
 800973a:	4639      	mov	r1, r7
 800973c:	4622      	mov	r2, r4
 800973e:	4630      	mov	r0, r6
 8009740:	f7ff ff1e 	bl	8009580 <__multiply>
 8009744:	4639      	mov	r1, r7
 8009746:	4680      	mov	r8, r0
 8009748:	4630      	mov	r0, r6
 800974a:	f7ff fe47 	bl	80093dc <_Bfree>
 800974e:	4647      	mov	r7, r8
 8009750:	106d      	asrs	r5, r5, #1
 8009752:	d00b      	beq.n	800976c <__pow5mult+0xa0>
 8009754:	6820      	ldr	r0, [r4, #0]
 8009756:	b938      	cbnz	r0, 8009768 <__pow5mult+0x9c>
 8009758:	4622      	mov	r2, r4
 800975a:	4621      	mov	r1, r4
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff ff0f 	bl	8009580 <__multiply>
 8009762:	6020      	str	r0, [r4, #0]
 8009764:	f8c0 9000 	str.w	r9, [r0]
 8009768:	4604      	mov	r4, r0
 800976a:	e7e4      	b.n	8009736 <__pow5mult+0x6a>
 800976c:	4638      	mov	r0, r7
 800976e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009772:	bf00      	nop
 8009774:	0800ad20 	.word	0x0800ad20
 8009778:	0800ab49 	.word	0x0800ab49
 800977c:	0800abd0 	.word	0x0800abd0

08009780 <__lshift>:
 8009780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009784:	460c      	mov	r4, r1
 8009786:	6849      	ldr	r1, [r1, #4]
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800978e:	68a3      	ldr	r3, [r4, #8]
 8009790:	4607      	mov	r7, r0
 8009792:	4691      	mov	r9, r2
 8009794:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009798:	f108 0601 	add.w	r6, r8, #1
 800979c:	42b3      	cmp	r3, r6
 800979e:	db0b      	blt.n	80097b8 <__lshift+0x38>
 80097a0:	4638      	mov	r0, r7
 80097a2:	f7ff fddb 	bl	800935c <_Balloc>
 80097a6:	4605      	mov	r5, r0
 80097a8:	b948      	cbnz	r0, 80097be <__lshift+0x3e>
 80097aa:	4602      	mov	r2, r0
 80097ac:	4b28      	ldr	r3, [pc, #160]	; (8009850 <__lshift+0xd0>)
 80097ae:	4829      	ldr	r0, [pc, #164]	; (8009854 <__lshift+0xd4>)
 80097b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80097b4:	f000 fb76 	bl	8009ea4 <__assert_func>
 80097b8:	3101      	adds	r1, #1
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	e7ee      	b.n	800979c <__lshift+0x1c>
 80097be:	2300      	movs	r3, #0
 80097c0:	f100 0114 	add.w	r1, r0, #20
 80097c4:	f100 0210 	add.w	r2, r0, #16
 80097c8:	4618      	mov	r0, r3
 80097ca:	4553      	cmp	r3, sl
 80097cc:	db33      	blt.n	8009836 <__lshift+0xb6>
 80097ce:	6920      	ldr	r0, [r4, #16]
 80097d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097d4:	f104 0314 	add.w	r3, r4, #20
 80097d8:	f019 091f 	ands.w	r9, r9, #31
 80097dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097e4:	d02b      	beq.n	800983e <__lshift+0xbe>
 80097e6:	f1c9 0e20 	rsb	lr, r9, #32
 80097ea:	468a      	mov	sl, r1
 80097ec:	2200      	movs	r2, #0
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	fa00 f009 	lsl.w	r0, r0, r9
 80097f4:	4302      	orrs	r2, r0
 80097f6:	f84a 2b04 	str.w	r2, [sl], #4
 80097fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fe:	459c      	cmp	ip, r3
 8009800:	fa22 f20e 	lsr.w	r2, r2, lr
 8009804:	d8f3      	bhi.n	80097ee <__lshift+0x6e>
 8009806:	ebac 0304 	sub.w	r3, ip, r4
 800980a:	3b15      	subs	r3, #21
 800980c:	f023 0303 	bic.w	r3, r3, #3
 8009810:	3304      	adds	r3, #4
 8009812:	f104 0015 	add.w	r0, r4, #21
 8009816:	4584      	cmp	ip, r0
 8009818:	bf38      	it	cc
 800981a:	2304      	movcc	r3, #4
 800981c:	50ca      	str	r2, [r1, r3]
 800981e:	b10a      	cbz	r2, 8009824 <__lshift+0xa4>
 8009820:	f108 0602 	add.w	r6, r8, #2
 8009824:	3e01      	subs	r6, #1
 8009826:	4638      	mov	r0, r7
 8009828:	612e      	str	r6, [r5, #16]
 800982a:	4621      	mov	r1, r4
 800982c:	f7ff fdd6 	bl	80093dc <_Bfree>
 8009830:	4628      	mov	r0, r5
 8009832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009836:	f842 0f04 	str.w	r0, [r2, #4]!
 800983a:	3301      	adds	r3, #1
 800983c:	e7c5      	b.n	80097ca <__lshift+0x4a>
 800983e:	3904      	subs	r1, #4
 8009840:	f853 2b04 	ldr.w	r2, [r3], #4
 8009844:	f841 2f04 	str.w	r2, [r1, #4]!
 8009848:	459c      	cmp	ip, r3
 800984a:	d8f9      	bhi.n	8009840 <__lshift+0xc0>
 800984c:	e7ea      	b.n	8009824 <__lshift+0xa4>
 800984e:	bf00      	nop
 8009850:	0800abbf 	.word	0x0800abbf
 8009854:	0800abd0 	.word	0x0800abd0

08009858 <__mcmp>:
 8009858:	b530      	push	{r4, r5, lr}
 800985a:	6902      	ldr	r2, [r0, #16]
 800985c:	690c      	ldr	r4, [r1, #16]
 800985e:	1b12      	subs	r2, r2, r4
 8009860:	d10e      	bne.n	8009880 <__mcmp+0x28>
 8009862:	f100 0314 	add.w	r3, r0, #20
 8009866:	3114      	adds	r1, #20
 8009868:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800986c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009870:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009874:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009878:	42a5      	cmp	r5, r4
 800987a:	d003      	beq.n	8009884 <__mcmp+0x2c>
 800987c:	d305      	bcc.n	800988a <__mcmp+0x32>
 800987e:	2201      	movs	r2, #1
 8009880:	4610      	mov	r0, r2
 8009882:	bd30      	pop	{r4, r5, pc}
 8009884:	4283      	cmp	r3, r0
 8009886:	d3f3      	bcc.n	8009870 <__mcmp+0x18>
 8009888:	e7fa      	b.n	8009880 <__mcmp+0x28>
 800988a:	f04f 32ff 	mov.w	r2, #4294967295
 800988e:	e7f7      	b.n	8009880 <__mcmp+0x28>

08009890 <__mdiff>:
 8009890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	460c      	mov	r4, r1
 8009896:	4606      	mov	r6, r0
 8009898:	4611      	mov	r1, r2
 800989a:	4620      	mov	r0, r4
 800989c:	4617      	mov	r7, r2
 800989e:	f7ff ffdb 	bl	8009858 <__mcmp>
 80098a2:	1e05      	subs	r5, r0, #0
 80098a4:	d110      	bne.n	80098c8 <__mdiff+0x38>
 80098a6:	4629      	mov	r1, r5
 80098a8:	4630      	mov	r0, r6
 80098aa:	f7ff fd57 	bl	800935c <_Balloc>
 80098ae:	b930      	cbnz	r0, 80098be <__mdiff+0x2e>
 80098b0:	4b39      	ldr	r3, [pc, #228]	; (8009998 <__mdiff+0x108>)
 80098b2:	4602      	mov	r2, r0
 80098b4:	f240 2132 	movw	r1, #562	; 0x232
 80098b8:	4838      	ldr	r0, [pc, #224]	; (800999c <__mdiff+0x10c>)
 80098ba:	f000 faf3 	bl	8009ea4 <__assert_func>
 80098be:	2301      	movs	r3, #1
 80098c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c8:	bfa4      	itt	ge
 80098ca:	463b      	movge	r3, r7
 80098cc:	4627      	movge	r7, r4
 80098ce:	4630      	mov	r0, r6
 80098d0:	6879      	ldr	r1, [r7, #4]
 80098d2:	bfa6      	itte	ge
 80098d4:	461c      	movge	r4, r3
 80098d6:	2500      	movge	r5, #0
 80098d8:	2501      	movlt	r5, #1
 80098da:	f7ff fd3f 	bl	800935c <_Balloc>
 80098de:	b920      	cbnz	r0, 80098ea <__mdiff+0x5a>
 80098e0:	4b2d      	ldr	r3, [pc, #180]	; (8009998 <__mdiff+0x108>)
 80098e2:	4602      	mov	r2, r0
 80098e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098e8:	e7e6      	b.n	80098b8 <__mdiff+0x28>
 80098ea:	693e      	ldr	r6, [r7, #16]
 80098ec:	60c5      	str	r5, [r0, #12]
 80098ee:	6925      	ldr	r5, [r4, #16]
 80098f0:	f107 0114 	add.w	r1, r7, #20
 80098f4:	f104 0914 	add.w	r9, r4, #20
 80098f8:	f100 0e14 	add.w	lr, r0, #20
 80098fc:	f107 0210 	add.w	r2, r7, #16
 8009900:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009904:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009908:	46f2      	mov	sl, lr
 800990a:	2700      	movs	r7, #0
 800990c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009910:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009914:	fa1f f883 	uxth.w	r8, r3
 8009918:	fa17 f78b 	uxtah	r7, r7, fp
 800991c:	0c1b      	lsrs	r3, r3, #16
 800991e:	eba7 0808 	sub.w	r8, r7, r8
 8009922:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009926:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800992a:	fa1f f888 	uxth.w	r8, r8
 800992e:	141f      	asrs	r7, r3, #16
 8009930:	454d      	cmp	r5, r9
 8009932:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009936:	f84a 3b04 	str.w	r3, [sl], #4
 800993a:	d8e7      	bhi.n	800990c <__mdiff+0x7c>
 800993c:	1b2b      	subs	r3, r5, r4
 800993e:	3b15      	subs	r3, #21
 8009940:	f023 0303 	bic.w	r3, r3, #3
 8009944:	3304      	adds	r3, #4
 8009946:	3415      	adds	r4, #21
 8009948:	42a5      	cmp	r5, r4
 800994a:	bf38      	it	cc
 800994c:	2304      	movcc	r3, #4
 800994e:	4419      	add	r1, r3
 8009950:	4473      	add	r3, lr
 8009952:	469e      	mov	lr, r3
 8009954:	460d      	mov	r5, r1
 8009956:	4565      	cmp	r5, ip
 8009958:	d30e      	bcc.n	8009978 <__mdiff+0xe8>
 800995a:	f10c 0203 	add.w	r2, ip, #3
 800995e:	1a52      	subs	r2, r2, r1
 8009960:	f022 0203 	bic.w	r2, r2, #3
 8009964:	3903      	subs	r1, #3
 8009966:	458c      	cmp	ip, r1
 8009968:	bf38      	it	cc
 800996a:	2200      	movcc	r2, #0
 800996c:	441a      	add	r2, r3
 800996e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009972:	b17b      	cbz	r3, 8009994 <__mdiff+0x104>
 8009974:	6106      	str	r6, [r0, #16]
 8009976:	e7a5      	b.n	80098c4 <__mdiff+0x34>
 8009978:	f855 8b04 	ldr.w	r8, [r5], #4
 800997c:	fa17 f488 	uxtah	r4, r7, r8
 8009980:	1422      	asrs	r2, r4, #16
 8009982:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009986:	b2a4      	uxth	r4, r4
 8009988:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800998c:	f84e 4b04 	str.w	r4, [lr], #4
 8009990:	1417      	asrs	r7, r2, #16
 8009992:	e7e0      	b.n	8009956 <__mdiff+0xc6>
 8009994:	3e01      	subs	r6, #1
 8009996:	e7ea      	b.n	800996e <__mdiff+0xde>
 8009998:	0800abbf 	.word	0x0800abbf
 800999c:	0800abd0 	.word	0x0800abd0

080099a0 <__d2b>:
 80099a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099a4:	4689      	mov	r9, r1
 80099a6:	2101      	movs	r1, #1
 80099a8:	ec57 6b10 	vmov	r6, r7, d0
 80099ac:	4690      	mov	r8, r2
 80099ae:	f7ff fcd5 	bl	800935c <_Balloc>
 80099b2:	4604      	mov	r4, r0
 80099b4:	b930      	cbnz	r0, 80099c4 <__d2b+0x24>
 80099b6:	4602      	mov	r2, r0
 80099b8:	4b25      	ldr	r3, [pc, #148]	; (8009a50 <__d2b+0xb0>)
 80099ba:	4826      	ldr	r0, [pc, #152]	; (8009a54 <__d2b+0xb4>)
 80099bc:	f240 310a 	movw	r1, #778	; 0x30a
 80099c0:	f000 fa70 	bl	8009ea4 <__assert_func>
 80099c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099cc:	bb35      	cbnz	r5, 8009a1c <__d2b+0x7c>
 80099ce:	2e00      	cmp	r6, #0
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	d028      	beq.n	8009a26 <__d2b+0x86>
 80099d4:	4668      	mov	r0, sp
 80099d6:	9600      	str	r6, [sp, #0]
 80099d8:	f7ff fd8c 	bl	80094f4 <__lo0bits>
 80099dc:	9900      	ldr	r1, [sp, #0]
 80099de:	b300      	cbz	r0, 8009a22 <__d2b+0x82>
 80099e0:	9a01      	ldr	r2, [sp, #4]
 80099e2:	f1c0 0320 	rsb	r3, r0, #32
 80099e6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ea:	430b      	orrs	r3, r1
 80099ec:	40c2      	lsrs	r2, r0
 80099ee:	6163      	str	r3, [r4, #20]
 80099f0:	9201      	str	r2, [sp, #4]
 80099f2:	9b01      	ldr	r3, [sp, #4]
 80099f4:	61a3      	str	r3, [r4, #24]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bf14      	ite	ne
 80099fa:	2202      	movne	r2, #2
 80099fc:	2201      	moveq	r2, #1
 80099fe:	6122      	str	r2, [r4, #16]
 8009a00:	b1d5      	cbz	r5, 8009a38 <__d2b+0x98>
 8009a02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009a06:	4405      	add	r5, r0
 8009a08:	f8c9 5000 	str.w	r5, [r9]
 8009a0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009a10:	f8c8 0000 	str.w	r0, [r8]
 8009a14:	4620      	mov	r0, r4
 8009a16:	b003      	add	sp, #12
 8009a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a20:	e7d5      	b.n	80099ce <__d2b+0x2e>
 8009a22:	6161      	str	r1, [r4, #20]
 8009a24:	e7e5      	b.n	80099f2 <__d2b+0x52>
 8009a26:	a801      	add	r0, sp, #4
 8009a28:	f7ff fd64 	bl	80094f4 <__lo0bits>
 8009a2c:	9b01      	ldr	r3, [sp, #4]
 8009a2e:	6163      	str	r3, [r4, #20]
 8009a30:	2201      	movs	r2, #1
 8009a32:	6122      	str	r2, [r4, #16]
 8009a34:	3020      	adds	r0, #32
 8009a36:	e7e3      	b.n	8009a00 <__d2b+0x60>
 8009a38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a40:	f8c9 0000 	str.w	r0, [r9]
 8009a44:	6918      	ldr	r0, [r3, #16]
 8009a46:	f7ff fd35 	bl	80094b4 <__hi0bits>
 8009a4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a4e:	e7df      	b.n	8009a10 <__d2b+0x70>
 8009a50:	0800abbf 	.word	0x0800abbf
 8009a54:	0800abd0 	.word	0x0800abd0

08009a58 <_calloc_r>:
 8009a58:	b513      	push	{r0, r1, r4, lr}
 8009a5a:	434a      	muls	r2, r1
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	9201      	str	r2, [sp, #4]
 8009a60:	f000 f85a 	bl	8009b18 <_malloc_r>
 8009a64:	4604      	mov	r4, r0
 8009a66:	b118      	cbz	r0, 8009a70 <_calloc_r+0x18>
 8009a68:	9a01      	ldr	r2, [sp, #4]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	f7fe f93e 	bl	8007cec <memset>
 8009a70:	4620      	mov	r0, r4
 8009a72:	b002      	add	sp, #8
 8009a74:	bd10      	pop	{r4, pc}
	...

08009a78 <_free_r>:
 8009a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a7a:	2900      	cmp	r1, #0
 8009a7c:	d048      	beq.n	8009b10 <_free_r+0x98>
 8009a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a82:	9001      	str	r0, [sp, #4]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f1a1 0404 	sub.w	r4, r1, #4
 8009a8a:	bfb8      	it	lt
 8009a8c:	18e4      	addlt	r4, r4, r3
 8009a8e:	f000 fa65 	bl	8009f5c <__malloc_lock>
 8009a92:	4a20      	ldr	r2, [pc, #128]	; (8009b14 <_free_r+0x9c>)
 8009a94:	9801      	ldr	r0, [sp, #4]
 8009a96:	6813      	ldr	r3, [r2, #0]
 8009a98:	4615      	mov	r5, r2
 8009a9a:	b933      	cbnz	r3, 8009aaa <_free_r+0x32>
 8009a9c:	6063      	str	r3, [r4, #4]
 8009a9e:	6014      	str	r4, [r2, #0]
 8009aa0:	b003      	add	sp, #12
 8009aa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009aa6:	f000 ba5f 	b.w	8009f68 <__malloc_unlock>
 8009aaa:	42a3      	cmp	r3, r4
 8009aac:	d90b      	bls.n	8009ac6 <_free_r+0x4e>
 8009aae:	6821      	ldr	r1, [r4, #0]
 8009ab0:	1862      	adds	r2, r4, r1
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	bf04      	itt	eq
 8009ab6:	681a      	ldreq	r2, [r3, #0]
 8009ab8:	685b      	ldreq	r3, [r3, #4]
 8009aba:	6063      	str	r3, [r4, #4]
 8009abc:	bf04      	itt	eq
 8009abe:	1852      	addeq	r2, r2, r1
 8009ac0:	6022      	streq	r2, [r4, #0]
 8009ac2:	602c      	str	r4, [r5, #0]
 8009ac4:	e7ec      	b.n	8009aa0 <_free_r+0x28>
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	b10b      	cbz	r3, 8009ad0 <_free_r+0x58>
 8009acc:	42a3      	cmp	r3, r4
 8009ace:	d9fa      	bls.n	8009ac6 <_free_r+0x4e>
 8009ad0:	6811      	ldr	r1, [r2, #0]
 8009ad2:	1855      	adds	r5, r2, r1
 8009ad4:	42a5      	cmp	r5, r4
 8009ad6:	d10b      	bne.n	8009af0 <_free_r+0x78>
 8009ad8:	6824      	ldr	r4, [r4, #0]
 8009ada:	4421      	add	r1, r4
 8009adc:	1854      	adds	r4, r2, r1
 8009ade:	42a3      	cmp	r3, r4
 8009ae0:	6011      	str	r1, [r2, #0]
 8009ae2:	d1dd      	bne.n	8009aa0 <_free_r+0x28>
 8009ae4:	681c      	ldr	r4, [r3, #0]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	6053      	str	r3, [r2, #4]
 8009aea:	4421      	add	r1, r4
 8009aec:	6011      	str	r1, [r2, #0]
 8009aee:	e7d7      	b.n	8009aa0 <_free_r+0x28>
 8009af0:	d902      	bls.n	8009af8 <_free_r+0x80>
 8009af2:	230c      	movs	r3, #12
 8009af4:	6003      	str	r3, [r0, #0]
 8009af6:	e7d3      	b.n	8009aa0 <_free_r+0x28>
 8009af8:	6825      	ldr	r5, [r4, #0]
 8009afa:	1961      	adds	r1, r4, r5
 8009afc:	428b      	cmp	r3, r1
 8009afe:	bf04      	itt	eq
 8009b00:	6819      	ldreq	r1, [r3, #0]
 8009b02:	685b      	ldreq	r3, [r3, #4]
 8009b04:	6063      	str	r3, [r4, #4]
 8009b06:	bf04      	itt	eq
 8009b08:	1949      	addeq	r1, r1, r5
 8009b0a:	6021      	streq	r1, [r4, #0]
 8009b0c:	6054      	str	r4, [r2, #4]
 8009b0e:	e7c7      	b.n	8009aa0 <_free_r+0x28>
 8009b10:	b003      	add	sp, #12
 8009b12:	bd30      	pop	{r4, r5, pc}
 8009b14:	20000214 	.word	0x20000214

08009b18 <_malloc_r>:
 8009b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1a:	1ccd      	adds	r5, r1, #3
 8009b1c:	f025 0503 	bic.w	r5, r5, #3
 8009b20:	3508      	adds	r5, #8
 8009b22:	2d0c      	cmp	r5, #12
 8009b24:	bf38      	it	cc
 8009b26:	250c      	movcc	r5, #12
 8009b28:	2d00      	cmp	r5, #0
 8009b2a:	4606      	mov	r6, r0
 8009b2c:	db01      	blt.n	8009b32 <_malloc_r+0x1a>
 8009b2e:	42a9      	cmp	r1, r5
 8009b30:	d903      	bls.n	8009b3a <_malloc_r+0x22>
 8009b32:	230c      	movs	r3, #12
 8009b34:	6033      	str	r3, [r6, #0]
 8009b36:	2000      	movs	r0, #0
 8009b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b3a:	f000 fa0f 	bl	8009f5c <__malloc_lock>
 8009b3e:	4921      	ldr	r1, [pc, #132]	; (8009bc4 <_malloc_r+0xac>)
 8009b40:	680a      	ldr	r2, [r1, #0]
 8009b42:	4614      	mov	r4, r2
 8009b44:	b99c      	cbnz	r4, 8009b6e <_malloc_r+0x56>
 8009b46:	4f20      	ldr	r7, [pc, #128]	; (8009bc8 <_malloc_r+0xb0>)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	b923      	cbnz	r3, 8009b56 <_malloc_r+0x3e>
 8009b4c:	4621      	mov	r1, r4
 8009b4e:	4630      	mov	r0, r6
 8009b50:	f000 f998 	bl	8009e84 <_sbrk_r>
 8009b54:	6038      	str	r0, [r7, #0]
 8009b56:	4629      	mov	r1, r5
 8009b58:	4630      	mov	r0, r6
 8009b5a:	f000 f993 	bl	8009e84 <_sbrk_r>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	d123      	bne.n	8009baa <_malloc_r+0x92>
 8009b62:	230c      	movs	r3, #12
 8009b64:	6033      	str	r3, [r6, #0]
 8009b66:	4630      	mov	r0, r6
 8009b68:	f000 f9fe 	bl	8009f68 <__malloc_unlock>
 8009b6c:	e7e3      	b.n	8009b36 <_malloc_r+0x1e>
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	1b5b      	subs	r3, r3, r5
 8009b72:	d417      	bmi.n	8009ba4 <_malloc_r+0x8c>
 8009b74:	2b0b      	cmp	r3, #11
 8009b76:	d903      	bls.n	8009b80 <_malloc_r+0x68>
 8009b78:	6023      	str	r3, [r4, #0]
 8009b7a:	441c      	add	r4, r3
 8009b7c:	6025      	str	r5, [r4, #0]
 8009b7e:	e004      	b.n	8009b8a <_malloc_r+0x72>
 8009b80:	6863      	ldr	r3, [r4, #4]
 8009b82:	42a2      	cmp	r2, r4
 8009b84:	bf0c      	ite	eq
 8009b86:	600b      	streq	r3, [r1, #0]
 8009b88:	6053      	strne	r3, [r2, #4]
 8009b8a:	4630      	mov	r0, r6
 8009b8c:	f000 f9ec 	bl	8009f68 <__malloc_unlock>
 8009b90:	f104 000b 	add.w	r0, r4, #11
 8009b94:	1d23      	adds	r3, r4, #4
 8009b96:	f020 0007 	bic.w	r0, r0, #7
 8009b9a:	1ac2      	subs	r2, r0, r3
 8009b9c:	d0cc      	beq.n	8009b38 <_malloc_r+0x20>
 8009b9e:	1a1b      	subs	r3, r3, r0
 8009ba0:	50a3      	str	r3, [r4, r2]
 8009ba2:	e7c9      	b.n	8009b38 <_malloc_r+0x20>
 8009ba4:	4622      	mov	r2, r4
 8009ba6:	6864      	ldr	r4, [r4, #4]
 8009ba8:	e7cc      	b.n	8009b44 <_malloc_r+0x2c>
 8009baa:	1cc4      	adds	r4, r0, #3
 8009bac:	f024 0403 	bic.w	r4, r4, #3
 8009bb0:	42a0      	cmp	r0, r4
 8009bb2:	d0e3      	beq.n	8009b7c <_malloc_r+0x64>
 8009bb4:	1a21      	subs	r1, r4, r0
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	f000 f964 	bl	8009e84 <_sbrk_r>
 8009bbc:	3001      	adds	r0, #1
 8009bbe:	d1dd      	bne.n	8009b7c <_malloc_r+0x64>
 8009bc0:	e7cf      	b.n	8009b62 <_malloc_r+0x4a>
 8009bc2:	bf00      	nop
 8009bc4:	20000214 	.word	0x20000214
 8009bc8:	20000218 	.word	0x20000218

08009bcc <__ssputs_r>:
 8009bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd0:	688e      	ldr	r6, [r1, #8]
 8009bd2:	429e      	cmp	r6, r3
 8009bd4:	4682      	mov	sl, r0
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	4690      	mov	r8, r2
 8009bda:	461f      	mov	r7, r3
 8009bdc:	d838      	bhi.n	8009c50 <__ssputs_r+0x84>
 8009bde:	898a      	ldrh	r2, [r1, #12]
 8009be0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009be4:	d032      	beq.n	8009c4c <__ssputs_r+0x80>
 8009be6:	6825      	ldr	r5, [r4, #0]
 8009be8:	6909      	ldr	r1, [r1, #16]
 8009bea:	eba5 0901 	sub.w	r9, r5, r1
 8009bee:	6965      	ldr	r5, [r4, #20]
 8009bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	444b      	add	r3, r9
 8009bfc:	106d      	asrs	r5, r5, #1
 8009bfe:	429d      	cmp	r5, r3
 8009c00:	bf38      	it	cc
 8009c02:	461d      	movcc	r5, r3
 8009c04:	0553      	lsls	r3, r2, #21
 8009c06:	d531      	bpl.n	8009c6c <__ssputs_r+0xa0>
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7ff ff85 	bl	8009b18 <_malloc_r>
 8009c0e:	4606      	mov	r6, r0
 8009c10:	b950      	cbnz	r0, 8009c28 <__ssputs_r+0x5c>
 8009c12:	230c      	movs	r3, #12
 8009c14:	f8ca 3000 	str.w	r3, [sl]
 8009c18:	89a3      	ldrh	r3, [r4, #12]
 8009c1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c1e:	81a3      	strh	r3, [r4, #12]
 8009c20:	f04f 30ff 	mov.w	r0, #4294967295
 8009c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c28:	6921      	ldr	r1, [r4, #16]
 8009c2a:	464a      	mov	r2, r9
 8009c2c:	f7ff fb88 	bl	8009340 <memcpy>
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c3a:	81a3      	strh	r3, [r4, #12]
 8009c3c:	6126      	str	r6, [r4, #16]
 8009c3e:	6165      	str	r5, [r4, #20]
 8009c40:	444e      	add	r6, r9
 8009c42:	eba5 0509 	sub.w	r5, r5, r9
 8009c46:	6026      	str	r6, [r4, #0]
 8009c48:	60a5      	str	r5, [r4, #8]
 8009c4a:	463e      	mov	r6, r7
 8009c4c:	42be      	cmp	r6, r7
 8009c4e:	d900      	bls.n	8009c52 <__ssputs_r+0x86>
 8009c50:	463e      	mov	r6, r7
 8009c52:	4632      	mov	r2, r6
 8009c54:	6820      	ldr	r0, [r4, #0]
 8009c56:	4641      	mov	r1, r8
 8009c58:	f000 f966 	bl	8009f28 <memmove>
 8009c5c:	68a3      	ldr	r3, [r4, #8]
 8009c5e:	6822      	ldr	r2, [r4, #0]
 8009c60:	1b9b      	subs	r3, r3, r6
 8009c62:	4432      	add	r2, r6
 8009c64:	60a3      	str	r3, [r4, #8]
 8009c66:	6022      	str	r2, [r4, #0]
 8009c68:	2000      	movs	r0, #0
 8009c6a:	e7db      	b.n	8009c24 <__ssputs_r+0x58>
 8009c6c:	462a      	mov	r2, r5
 8009c6e:	f000 f981 	bl	8009f74 <_realloc_r>
 8009c72:	4606      	mov	r6, r0
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d1e1      	bne.n	8009c3c <__ssputs_r+0x70>
 8009c78:	6921      	ldr	r1, [r4, #16]
 8009c7a:	4650      	mov	r0, sl
 8009c7c:	f7ff fefc 	bl	8009a78 <_free_r>
 8009c80:	e7c7      	b.n	8009c12 <__ssputs_r+0x46>
	...

08009c84 <_svfiprintf_r>:
 8009c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c88:	4698      	mov	r8, r3
 8009c8a:	898b      	ldrh	r3, [r1, #12]
 8009c8c:	061b      	lsls	r3, r3, #24
 8009c8e:	b09d      	sub	sp, #116	; 0x74
 8009c90:	4607      	mov	r7, r0
 8009c92:	460d      	mov	r5, r1
 8009c94:	4614      	mov	r4, r2
 8009c96:	d50e      	bpl.n	8009cb6 <_svfiprintf_r+0x32>
 8009c98:	690b      	ldr	r3, [r1, #16]
 8009c9a:	b963      	cbnz	r3, 8009cb6 <_svfiprintf_r+0x32>
 8009c9c:	2140      	movs	r1, #64	; 0x40
 8009c9e:	f7ff ff3b 	bl	8009b18 <_malloc_r>
 8009ca2:	6028      	str	r0, [r5, #0]
 8009ca4:	6128      	str	r0, [r5, #16]
 8009ca6:	b920      	cbnz	r0, 8009cb2 <_svfiprintf_r+0x2e>
 8009ca8:	230c      	movs	r3, #12
 8009caa:	603b      	str	r3, [r7, #0]
 8009cac:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb0:	e0d1      	b.n	8009e56 <_svfiprintf_r+0x1d2>
 8009cb2:	2340      	movs	r3, #64	; 0x40
 8009cb4:	616b      	str	r3, [r5, #20]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cba:	2320      	movs	r3, #32
 8009cbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cc4:	2330      	movs	r3, #48	; 0x30
 8009cc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e70 <_svfiprintf_r+0x1ec>
 8009cca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cce:	f04f 0901 	mov.w	r9, #1
 8009cd2:	4623      	mov	r3, r4
 8009cd4:	469a      	mov	sl, r3
 8009cd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cda:	b10a      	cbz	r2, 8009ce0 <_svfiprintf_r+0x5c>
 8009cdc:	2a25      	cmp	r2, #37	; 0x25
 8009cde:	d1f9      	bne.n	8009cd4 <_svfiprintf_r+0x50>
 8009ce0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ce4:	d00b      	beq.n	8009cfe <_svfiprintf_r+0x7a>
 8009ce6:	465b      	mov	r3, fp
 8009ce8:	4622      	mov	r2, r4
 8009cea:	4629      	mov	r1, r5
 8009cec:	4638      	mov	r0, r7
 8009cee:	f7ff ff6d 	bl	8009bcc <__ssputs_r>
 8009cf2:	3001      	adds	r0, #1
 8009cf4:	f000 80aa 	beq.w	8009e4c <_svfiprintf_r+0x1c8>
 8009cf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cfa:	445a      	add	r2, fp
 8009cfc:	9209      	str	r2, [sp, #36]	; 0x24
 8009cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	f000 80a2 	beq.w	8009e4c <_svfiprintf_r+0x1c8>
 8009d08:	2300      	movs	r3, #0
 8009d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d12:	f10a 0a01 	add.w	sl, sl, #1
 8009d16:	9304      	str	r3, [sp, #16]
 8009d18:	9307      	str	r3, [sp, #28]
 8009d1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d1e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d20:	4654      	mov	r4, sl
 8009d22:	2205      	movs	r2, #5
 8009d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d28:	4851      	ldr	r0, [pc, #324]	; (8009e70 <_svfiprintf_r+0x1ec>)
 8009d2a:	f7f6 fa81 	bl	8000230 <memchr>
 8009d2e:	9a04      	ldr	r2, [sp, #16]
 8009d30:	b9d8      	cbnz	r0, 8009d6a <_svfiprintf_r+0xe6>
 8009d32:	06d0      	lsls	r0, r2, #27
 8009d34:	bf44      	itt	mi
 8009d36:	2320      	movmi	r3, #32
 8009d38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d3c:	0711      	lsls	r1, r2, #28
 8009d3e:	bf44      	itt	mi
 8009d40:	232b      	movmi	r3, #43	; 0x2b
 8009d42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d46:	f89a 3000 	ldrb.w	r3, [sl]
 8009d4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d4c:	d015      	beq.n	8009d7a <_svfiprintf_r+0xf6>
 8009d4e:	9a07      	ldr	r2, [sp, #28]
 8009d50:	4654      	mov	r4, sl
 8009d52:	2000      	movs	r0, #0
 8009d54:	f04f 0c0a 	mov.w	ip, #10
 8009d58:	4621      	mov	r1, r4
 8009d5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d5e:	3b30      	subs	r3, #48	; 0x30
 8009d60:	2b09      	cmp	r3, #9
 8009d62:	d94e      	bls.n	8009e02 <_svfiprintf_r+0x17e>
 8009d64:	b1b0      	cbz	r0, 8009d94 <_svfiprintf_r+0x110>
 8009d66:	9207      	str	r2, [sp, #28]
 8009d68:	e014      	b.n	8009d94 <_svfiprintf_r+0x110>
 8009d6a:	eba0 0308 	sub.w	r3, r0, r8
 8009d6e:	fa09 f303 	lsl.w	r3, r9, r3
 8009d72:	4313      	orrs	r3, r2
 8009d74:	9304      	str	r3, [sp, #16]
 8009d76:	46a2      	mov	sl, r4
 8009d78:	e7d2      	b.n	8009d20 <_svfiprintf_r+0x9c>
 8009d7a:	9b03      	ldr	r3, [sp, #12]
 8009d7c:	1d19      	adds	r1, r3, #4
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	9103      	str	r1, [sp, #12]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	bfbb      	ittet	lt
 8009d86:	425b      	neglt	r3, r3
 8009d88:	f042 0202 	orrlt.w	r2, r2, #2
 8009d8c:	9307      	strge	r3, [sp, #28]
 8009d8e:	9307      	strlt	r3, [sp, #28]
 8009d90:	bfb8      	it	lt
 8009d92:	9204      	strlt	r2, [sp, #16]
 8009d94:	7823      	ldrb	r3, [r4, #0]
 8009d96:	2b2e      	cmp	r3, #46	; 0x2e
 8009d98:	d10c      	bne.n	8009db4 <_svfiprintf_r+0x130>
 8009d9a:	7863      	ldrb	r3, [r4, #1]
 8009d9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009d9e:	d135      	bne.n	8009e0c <_svfiprintf_r+0x188>
 8009da0:	9b03      	ldr	r3, [sp, #12]
 8009da2:	1d1a      	adds	r2, r3, #4
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	9203      	str	r2, [sp, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	bfb8      	it	lt
 8009dac:	f04f 33ff 	movlt.w	r3, #4294967295
 8009db0:	3402      	adds	r4, #2
 8009db2:	9305      	str	r3, [sp, #20]
 8009db4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e80 <_svfiprintf_r+0x1fc>
 8009db8:	7821      	ldrb	r1, [r4, #0]
 8009dba:	2203      	movs	r2, #3
 8009dbc:	4650      	mov	r0, sl
 8009dbe:	f7f6 fa37 	bl	8000230 <memchr>
 8009dc2:	b140      	cbz	r0, 8009dd6 <_svfiprintf_r+0x152>
 8009dc4:	2340      	movs	r3, #64	; 0x40
 8009dc6:	eba0 000a 	sub.w	r0, r0, sl
 8009dca:	fa03 f000 	lsl.w	r0, r3, r0
 8009dce:	9b04      	ldr	r3, [sp, #16]
 8009dd0:	4303      	orrs	r3, r0
 8009dd2:	3401      	adds	r4, #1
 8009dd4:	9304      	str	r3, [sp, #16]
 8009dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dda:	4826      	ldr	r0, [pc, #152]	; (8009e74 <_svfiprintf_r+0x1f0>)
 8009ddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009de0:	2206      	movs	r2, #6
 8009de2:	f7f6 fa25 	bl	8000230 <memchr>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d038      	beq.n	8009e5c <_svfiprintf_r+0x1d8>
 8009dea:	4b23      	ldr	r3, [pc, #140]	; (8009e78 <_svfiprintf_r+0x1f4>)
 8009dec:	bb1b      	cbnz	r3, 8009e36 <_svfiprintf_r+0x1b2>
 8009dee:	9b03      	ldr	r3, [sp, #12]
 8009df0:	3307      	adds	r3, #7
 8009df2:	f023 0307 	bic.w	r3, r3, #7
 8009df6:	3308      	adds	r3, #8
 8009df8:	9303      	str	r3, [sp, #12]
 8009dfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dfc:	4433      	add	r3, r6
 8009dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8009e00:	e767      	b.n	8009cd2 <_svfiprintf_r+0x4e>
 8009e02:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e06:	460c      	mov	r4, r1
 8009e08:	2001      	movs	r0, #1
 8009e0a:	e7a5      	b.n	8009d58 <_svfiprintf_r+0xd4>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	3401      	adds	r4, #1
 8009e10:	9305      	str	r3, [sp, #20]
 8009e12:	4619      	mov	r1, r3
 8009e14:	f04f 0c0a 	mov.w	ip, #10
 8009e18:	4620      	mov	r0, r4
 8009e1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e1e:	3a30      	subs	r2, #48	; 0x30
 8009e20:	2a09      	cmp	r2, #9
 8009e22:	d903      	bls.n	8009e2c <_svfiprintf_r+0x1a8>
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d0c5      	beq.n	8009db4 <_svfiprintf_r+0x130>
 8009e28:	9105      	str	r1, [sp, #20]
 8009e2a:	e7c3      	b.n	8009db4 <_svfiprintf_r+0x130>
 8009e2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e30:	4604      	mov	r4, r0
 8009e32:	2301      	movs	r3, #1
 8009e34:	e7f0      	b.n	8009e18 <_svfiprintf_r+0x194>
 8009e36:	ab03      	add	r3, sp, #12
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <_svfiprintf_r+0x1f8>)
 8009e3e:	a904      	add	r1, sp, #16
 8009e40:	4638      	mov	r0, r7
 8009e42:	f7fd fffb 	bl	8007e3c <_printf_float>
 8009e46:	1c42      	adds	r2, r0, #1
 8009e48:	4606      	mov	r6, r0
 8009e4a:	d1d6      	bne.n	8009dfa <_svfiprintf_r+0x176>
 8009e4c:	89ab      	ldrh	r3, [r5, #12]
 8009e4e:	065b      	lsls	r3, r3, #25
 8009e50:	f53f af2c 	bmi.w	8009cac <_svfiprintf_r+0x28>
 8009e54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e56:	b01d      	add	sp, #116	; 0x74
 8009e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e5c:	ab03      	add	r3, sp, #12
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	462a      	mov	r2, r5
 8009e62:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <_svfiprintf_r+0x1f8>)
 8009e64:	a904      	add	r1, sp, #16
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7fe fa8c 	bl	8008384 <_printf_i>
 8009e6c:	e7eb      	b.n	8009e46 <_svfiprintf_r+0x1c2>
 8009e6e:	bf00      	nop
 8009e70:	0800ad2c 	.word	0x0800ad2c
 8009e74:	0800ad36 	.word	0x0800ad36
 8009e78:	08007e3d 	.word	0x08007e3d
 8009e7c:	08009bcd 	.word	0x08009bcd
 8009e80:	0800ad32 	.word	0x0800ad32

08009e84 <_sbrk_r>:
 8009e84:	b538      	push	{r3, r4, r5, lr}
 8009e86:	4d06      	ldr	r5, [pc, #24]	; (8009ea0 <_sbrk_r+0x1c>)
 8009e88:	2300      	movs	r3, #0
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	4608      	mov	r0, r1
 8009e8e:	602b      	str	r3, [r5, #0]
 8009e90:	f7f7 fffa 	bl	8001e88 <_sbrk>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d102      	bne.n	8009e9e <_sbrk_r+0x1a>
 8009e98:	682b      	ldr	r3, [r5, #0]
 8009e9a:	b103      	cbz	r3, 8009e9e <_sbrk_r+0x1a>
 8009e9c:	6023      	str	r3, [r4, #0]
 8009e9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ea0:	20000920 	.word	0x20000920

08009ea4 <__assert_func>:
 8009ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ea6:	4614      	mov	r4, r2
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	4b09      	ldr	r3, [pc, #36]	; (8009ed0 <__assert_func+0x2c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4605      	mov	r5, r0
 8009eb0:	68d8      	ldr	r0, [r3, #12]
 8009eb2:	b14c      	cbz	r4, 8009ec8 <__assert_func+0x24>
 8009eb4:	4b07      	ldr	r3, [pc, #28]	; (8009ed4 <__assert_func+0x30>)
 8009eb6:	9100      	str	r1, [sp, #0]
 8009eb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ebc:	4906      	ldr	r1, [pc, #24]	; (8009ed8 <__assert_func+0x34>)
 8009ebe:	462b      	mov	r3, r5
 8009ec0:	f000 f80e 	bl	8009ee0 <fiprintf>
 8009ec4:	f000 faa4 	bl	800a410 <abort>
 8009ec8:	4b04      	ldr	r3, [pc, #16]	; (8009edc <__assert_func+0x38>)
 8009eca:	461c      	mov	r4, r3
 8009ecc:	e7f3      	b.n	8009eb6 <__assert_func+0x12>
 8009ece:	bf00      	nop
 8009ed0:	20000020 	.word	0x20000020
 8009ed4:	0800ad3d 	.word	0x0800ad3d
 8009ed8:	0800ad4a 	.word	0x0800ad4a
 8009edc:	0800ad78 	.word	0x0800ad78

08009ee0 <fiprintf>:
 8009ee0:	b40e      	push	{r1, r2, r3}
 8009ee2:	b503      	push	{r0, r1, lr}
 8009ee4:	4601      	mov	r1, r0
 8009ee6:	ab03      	add	r3, sp, #12
 8009ee8:	4805      	ldr	r0, [pc, #20]	; (8009f00 <fiprintf+0x20>)
 8009eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eee:	6800      	ldr	r0, [r0, #0]
 8009ef0:	9301      	str	r3, [sp, #4]
 8009ef2:	f000 f88f 	bl	800a014 <_vfiprintf_r>
 8009ef6:	b002      	add	sp, #8
 8009ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009efc:	b003      	add	sp, #12
 8009efe:	4770      	bx	lr
 8009f00:	20000020 	.word	0x20000020

08009f04 <__ascii_mbtowc>:
 8009f04:	b082      	sub	sp, #8
 8009f06:	b901      	cbnz	r1, 8009f0a <__ascii_mbtowc+0x6>
 8009f08:	a901      	add	r1, sp, #4
 8009f0a:	b142      	cbz	r2, 8009f1e <__ascii_mbtowc+0x1a>
 8009f0c:	b14b      	cbz	r3, 8009f22 <__ascii_mbtowc+0x1e>
 8009f0e:	7813      	ldrb	r3, [r2, #0]
 8009f10:	600b      	str	r3, [r1, #0]
 8009f12:	7812      	ldrb	r2, [r2, #0]
 8009f14:	1e10      	subs	r0, r2, #0
 8009f16:	bf18      	it	ne
 8009f18:	2001      	movne	r0, #1
 8009f1a:	b002      	add	sp, #8
 8009f1c:	4770      	bx	lr
 8009f1e:	4610      	mov	r0, r2
 8009f20:	e7fb      	b.n	8009f1a <__ascii_mbtowc+0x16>
 8009f22:	f06f 0001 	mvn.w	r0, #1
 8009f26:	e7f8      	b.n	8009f1a <__ascii_mbtowc+0x16>

08009f28 <memmove>:
 8009f28:	4288      	cmp	r0, r1
 8009f2a:	b510      	push	{r4, lr}
 8009f2c:	eb01 0402 	add.w	r4, r1, r2
 8009f30:	d902      	bls.n	8009f38 <memmove+0x10>
 8009f32:	4284      	cmp	r4, r0
 8009f34:	4623      	mov	r3, r4
 8009f36:	d807      	bhi.n	8009f48 <memmove+0x20>
 8009f38:	1e43      	subs	r3, r0, #1
 8009f3a:	42a1      	cmp	r1, r4
 8009f3c:	d008      	beq.n	8009f50 <memmove+0x28>
 8009f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f46:	e7f8      	b.n	8009f3a <memmove+0x12>
 8009f48:	4402      	add	r2, r0
 8009f4a:	4601      	mov	r1, r0
 8009f4c:	428a      	cmp	r2, r1
 8009f4e:	d100      	bne.n	8009f52 <memmove+0x2a>
 8009f50:	bd10      	pop	{r4, pc}
 8009f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f5a:	e7f7      	b.n	8009f4c <memmove+0x24>

08009f5c <__malloc_lock>:
 8009f5c:	4801      	ldr	r0, [pc, #4]	; (8009f64 <__malloc_lock+0x8>)
 8009f5e:	f000 bc17 	b.w	800a790 <__retarget_lock_acquire_recursive>
 8009f62:	bf00      	nop
 8009f64:	20000928 	.word	0x20000928

08009f68 <__malloc_unlock>:
 8009f68:	4801      	ldr	r0, [pc, #4]	; (8009f70 <__malloc_unlock+0x8>)
 8009f6a:	f000 bc12 	b.w	800a792 <__retarget_lock_release_recursive>
 8009f6e:	bf00      	nop
 8009f70:	20000928 	.word	0x20000928

08009f74 <_realloc_r>:
 8009f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f76:	4607      	mov	r7, r0
 8009f78:	4614      	mov	r4, r2
 8009f7a:	460e      	mov	r6, r1
 8009f7c:	b921      	cbnz	r1, 8009f88 <_realloc_r+0x14>
 8009f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009f82:	4611      	mov	r1, r2
 8009f84:	f7ff bdc8 	b.w	8009b18 <_malloc_r>
 8009f88:	b922      	cbnz	r2, 8009f94 <_realloc_r+0x20>
 8009f8a:	f7ff fd75 	bl	8009a78 <_free_r>
 8009f8e:	4625      	mov	r5, r4
 8009f90:	4628      	mov	r0, r5
 8009f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f94:	f000 fc62 	bl	800a85c <_malloc_usable_size_r>
 8009f98:	42a0      	cmp	r0, r4
 8009f9a:	d20f      	bcs.n	8009fbc <_realloc_r+0x48>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	f7ff fdba 	bl	8009b18 <_malloc_r>
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d0f2      	beq.n	8009f90 <_realloc_r+0x1c>
 8009faa:	4631      	mov	r1, r6
 8009fac:	4622      	mov	r2, r4
 8009fae:	f7ff f9c7 	bl	8009340 <memcpy>
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	4638      	mov	r0, r7
 8009fb6:	f7ff fd5f 	bl	8009a78 <_free_r>
 8009fba:	e7e9      	b.n	8009f90 <_realloc_r+0x1c>
 8009fbc:	4635      	mov	r5, r6
 8009fbe:	e7e7      	b.n	8009f90 <_realloc_r+0x1c>

08009fc0 <__sfputc_r>:
 8009fc0:	6893      	ldr	r3, [r2, #8]
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	b410      	push	{r4}
 8009fc8:	6093      	str	r3, [r2, #8]
 8009fca:	da08      	bge.n	8009fde <__sfputc_r+0x1e>
 8009fcc:	6994      	ldr	r4, [r2, #24]
 8009fce:	42a3      	cmp	r3, r4
 8009fd0:	db01      	blt.n	8009fd6 <__sfputc_r+0x16>
 8009fd2:	290a      	cmp	r1, #10
 8009fd4:	d103      	bne.n	8009fde <__sfputc_r+0x1e>
 8009fd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fda:	f000 b94b 	b.w	800a274 <__swbuf_r>
 8009fde:	6813      	ldr	r3, [r2, #0]
 8009fe0:	1c58      	adds	r0, r3, #1
 8009fe2:	6010      	str	r0, [r2, #0]
 8009fe4:	7019      	strb	r1, [r3, #0]
 8009fe6:	4608      	mov	r0, r1
 8009fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <__sfputs_r>:
 8009fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	460f      	mov	r7, r1
 8009ff4:	4614      	mov	r4, r2
 8009ff6:	18d5      	adds	r5, r2, r3
 8009ff8:	42ac      	cmp	r4, r5
 8009ffa:	d101      	bne.n	800a000 <__sfputs_r+0x12>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	e007      	b.n	800a010 <__sfputs_r+0x22>
 800a000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a004:	463a      	mov	r2, r7
 800a006:	4630      	mov	r0, r6
 800a008:	f7ff ffda 	bl	8009fc0 <__sfputc_r>
 800a00c:	1c43      	adds	r3, r0, #1
 800a00e:	d1f3      	bne.n	8009ff8 <__sfputs_r+0xa>
 800a010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a014 <_vfiprintf_r>:
 800a014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	460d      	mov	r5, r1
 800a01a:	b09d      	sub	sp, #116	; 0x74
 800a01c:	4614      	mov	r4, r2
 800a01e:	4698      	mov	r8, r3
 800a020:	4606      	mov	r6, r0
 800a022:	b118      	cbz	r0, 800a02c <_vfiprintf_r+0x18>
 800a024:	6983      	ldr	r3, [r0, #24]
 800a026:	b90b      	cbnz	r3, 800a02c <_vfiprintf_r+0x18>
 800a028:	f000 fb14 	bl	800a654 <__sinit>
 800a02c:	4b89      	ldr	r3, [pc, #548]	; (800a254 <_vfiprintf_r+0x240>)
 800a02e:	429d      	cmp	r5, r3
 800a030:	d11b      	bne.n	800a06a <_vfiprintf_r+0x56>
 800a032:	6875      	ldr	r5, [r6, #4]
 800a034:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a036:	07d9      	lsls	r1, r3, #31
 800a038:	d405      	bmi.n	800a046 <_vfiprintf_r+0x32>
 800a03a:	89ab      	ldrh	r3, [r5, #12]
 800a03c:	059a      	lsls	r2, r3, #22
 800a03e:	d402      	bmi.n	800a046 <_vfiprintf_r+0x32>
 800a040:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a042:	f000 fba5 	bl	800a790 <__retarget_lock_acquire_recursive>
 800a046:	89ab      	ldrh	r3, [r5, #12]
 800a048:	071b      	lsls	r3, r3, #28
 800a04a:	d501      	bpl.n	800a050 <_vfiprintf_r+0x3c>
 800a04c:	692b      	ldr	r3, [r5, #16]
 800a04e:	b9eb      	cbnz	r3, 800a08c <_vfiprintf_r+0x78>
 800a050:	4629      	mov	r1, r5
 800a052:	4630      	mov	r0, r6
 800a054:	f000 f96e 	bl	800a334 <__swsetup_r>
 800a058:	b1c0      	cbz	r0, 800a08c <_vfiprintf_r+0x78>
 800a05a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a05c:	07dc      	lsls	r4, r3, #31
 800a05e:	d50e      	bpl.n	800a07e <_vfiprintf_r+0x6a>
 800a060:	f04f 30ff 	mov.w	r0, #4294967295
 800a064:	b01d      	add	sp, #116	; 0x74
 800a066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06a:	4b7b      	ldr	r3, [pc, #492]	; (800a258 <_vfiprintf_r+0x244>)
 800a06c:	429d      	cmp	r5, r3
 800a06e:	d101      	bne.n	800a074 <_vfiprintf_r+0x60>
 800a070:	68b5      	ldr	r5, [r6, #8]
 800a072:	e7df      	b.n	800a034 <_vfiprintf_r+0x20>
 800a074:	4b79      	ldr	r3, [pc, #484]	; (800a25c <_vfiprintf_r+0x248>)
 800a076:	429d      	cmp	r5, r3
 800a078:	bf08      	it	eq
 800a07a:	68f5      	ldreq	r5, [r6, #12]
 800a07c:	e7da      	b.n	800a034 <_vfiprintf_r+0x20>
 800a07e:	89ab      	ldrh	r3, [r5, #12]
 800a080:	0598      	lsls	r0, r3, #22
 800a082:	d4ed      	bmi.n	800a060 <_vfiprintf_r+0x4c>
 800a084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a086:	f000 fb84 	bl	800a792 <__retarget_lock_release_recursive>
 800a08a:	e7e9      	b.n	800a060 <_vfiprintf_r+0x4c>
 800a08c:	2300      	movs	r3, #0
 800a08e:	9309      	str	r3, [sp, #36]	; 0x24
 800a090:	2320      	movs	r3, #32
 800a092:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a096:	f8cd 800c 	str.w	r8, [sp, #12]
 800a09a:	2330      	movs	r3, #48	; 0x30
 800a09c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a260 <_vfiprintf_r+0x24c>
 800a0a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0a4:	f04f 0901 	mov.w	r9, #1
 800a0a8:	4623      	mov	r3, r4
 800a0aa:	469a      	mov	sl, r3
 800a0ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b0:	b10a      	cbz	r2, 800a0b6 <_vfiprintf_r+0xa2>
 800a0b2:	2a25      	cmp	r2, #37	; 0x25
 800a0b4:	d1f9      	bne.n	800a0aa <_vfiprintf_r+0x96>
 800a0b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a0ba:	d00b      	beq.n	800a0d4 <_vfiprintf_r+0xc0>
 800a0bc:	465b      	mov	r3, fp
 800a0be:	4622      	mov	r2, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	4630      	mov	r0, r6
 800a0c4:	f7ff ff93 	bl	8009fee <__sfputs_r>
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	f000 80aa 	beq.w	800a222 <_vfiprintf_r+0x20e>
 800a0ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0d0:	445a      	add	r2, fp
 800a0d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f000 80a2 	beq.w	800a222 <_vfiprintf_r+0x20e>
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0e8:	f10a 0a01 	add.w	sl, sl, #1
 800a0ec:	9304      	str	r3, [sp, #16]
 800a0ee:	9307      	str	r3, [sp, #28]
 800a0f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a0f6:	4654      	mov	r4, sl
 800a0f8:	2205      	movs	r2, #5
 800a0fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0fe:	4858      	ldr	r0, [pc, #352]	; (800a260 <_vfiprintf_r+0x24c>)
 800a100:	f7f6 f896 	bl	8000230 <memchr>
 800a104:	9a04      	ldr	r2, [sp, #16]
 800a106:	b9d8      	cbnz	r0, 800a140 <_vfiprintf_r+0x12c>
 800a108:	06d1      	lsls	r1, r2, #27
 800a10a:	bf44      	itt	mi
 800a10c:	2320      	movmi	r3, #32
 800a10e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a112:	0713      	lsls	r3, r2, #28
 800a114:	bf44      	itt	mi
 800a116:	232b      	movmi	r3, #43	; 0x2b
 800a118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a11c:	f89a 3000 	ldrb.w	r3, [sl]
 800a120:	2b2a      	cmp	r3, #42	; 0x2a
 800a122:	d015      	beq.n	800a150 <_vfiprintf_r+0x13c>
 800a124:	9a07      	ldr	r2, [sp, #28]
 800a126:	4654      	mov	r4, sl
 800a128:	2000      	movs	r0, #0
 800a12a:	f04f 0c0a 	mov.w	ip, #10
 800a12e:	4621      	mov	r1, r4
 800a130:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a134:	3b30      	subs	r3, #48	; 0x30
 800a136:	2b09      	cmp	r3, #9
 800a138:	d94e      	bls.n	800a1d8 <_vfiprintf_r+0x1c4>
 800a13a:	b1b0      	cbz	r0, 800a16a <_vfiprintf_r+0x156>
 800a13c:	9207      	str	r2, [sp, #28]
 800a13e:	e014      	b.n	800a16a <_vfiprintf_r+0x156>
 800a140:	eba0 0308 	sub.w	r3, r0, r8
 800a144:	fa09 f303 	lsl.w	r3, r9, r3
 800a148:	4313      	orrs	r3, r2
 800a14a:	9304      	str	r3, [sp, #16]
 800a14c:	46a2      	mov	sl, r4
 800a14e:	e7d2      	b.n	800a0f6 <_vfiprintf_r+0xe2>
 800a150:	9b03      	ldr	r3, [sp, #12]
 800a152:	1d19      	adds	r1, r3, #4
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	9103      	str	r1, [sp, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	bfbb      	ittet	lt
 800a15c:	425b      	neglt	r3, r3
 800a15e:	f042 0202 	orrlt.w	r2, r2, #2
 800a162:	9307      	strge	r3, [sp, #28]
 800a164:	9307      	strlt	r3, [sp, #28]
 800a166:	bfb8      	it	lt
 800a168:	9204      	strlt	r2, [sp, #16]
 800a16a:	7823      	ldrb	r3, [r4, #0]
 800a16c:	2b2e      	cmp	r3, #46	; 0x2e
 800a16e:	d10c      	bne.n	800a18a <_vfiprintf_r+0x176>
 800a170:	7863      	ldrb	r3, [r4, #1]
 800a172:	2b2a      	cmp	r3, #42	; 0x2a
 800a174:	d135      	bne.n	800a1e2 <_vfiprintf_r+0x1ce>
 800a176:	9b03      	ldr	r3, [sp, #12]
 800a178:	1d1a      	adds	r2, r3, #4
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	9203      	str	r2, [sp, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	bfb8      	it	lt
 800a182:	f04f 33ff 	movlt.w	r3, #4294967295
 800a186:	3402      	adds	r4, #2
 800a188:	9305      	str	r3, [sp, #20]
 800a18a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a270 <_vfiprintf_r+0x25c>
 800a18e:	7821      	ldrb	r1, [r4, #0]
 800a190:	2203      	movs	r2, #3
 800a192:	4650      	mov	r0, sl
 800a194:	f7f6 f84c 	bl	8000230 <memchr>
 800a198:	b140      	cbz	r0, 800a1ac <_vfiprintf_r+0x198>
 800a19a:	2340      	movs	r3, #64	; 0x40
 800a19c:	eba0 000a 	sub.w	r0, r0, sl
 800a1a0:	fa03 f000 	lsl.w	r0, r3, r0
 800a1a4:	9b04      	ldr	r3, [sp, #16]
 800a1a6:	4303      	orrs	r3, r0
 800a1a8:	3401      	adds	r4, #1
 800a1aa:	9304      	str	r3, [sp, #16]
 800a1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b0:	482c      	ldr	r0, [pc, #176]	; (800a264 <_vfiprintf_r+0x250>)
 800a1b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1b6:	2206      	movs	r2, #6
 800a1b8:	f7f6 f83a 	bl	8000230 <memchr>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d03f      	beq.n	800a240 <_vfiprintf_r+0x22c>
 800a1c0:	4b29      	ldr	r3, [pc, #164]	; (800a268 <_vfiprintf_r+0x254>)
 800a1c2:	bb1b      	cbnz	r3, 800a20c <_vfiprintf_r+0x1f8>
 800a1c4:	9b03      	ldr	r3, [sp, #12]
 800a1c6:	3307      	adds	r3, #7
 800a1c8:	f023 0307 	bic.w	r3, r3, #7
 800a1cc:	3308      	adds	r3, #8
 800a1ce:	9303      	str	r3, [sp, #12]
 800a1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d2:	443b      	add	r3, r7
 800a1d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1d6:	e767      	b.n	800a0a8 <_vfiprintf_r+0x94>
 800a1d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1dc:	460c      	mov	r4, r1
 800a1de:	2001      	movs	r0, #1
 800a1e0:	e7a5      	b.n	800a12e <_vfiprintf_r+0x11a>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	3401      	adds	r4, #1
 800a1e6:	9305      	str	r3, [sp, #20]
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	f04f 0c0a 	mov.w	ip, #10
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1f4:	3a30      	subs	r2, #48	; 0x30
 800a1f6:	2a09      	cmp	r2, #9
 800a1f8:	d903      	bls.n	800a202 <_vfiprintf_r+0x1ee>
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d0c5      	beq.n	800a18a <_vfiprintf_r+0x176>
 800a1fe:	9105      	str	r1, [sp, #20]
 800a200:	e7c3      	b.n	800a18a <_vfiprintf_r+0x176>
 800a202:	fb0c 2101 	mla	r1, ip, r1, r2
 800a206:	4604      	mov	r4, r0
 800a208:	2301      	movs	r3, #1
 800a20a:	e7f0      	b.n	800a1ee <_vfiprintf_r+0x1da>
 800a20c:	ab03      	add	r3, sp, #12
 800a20e:	9300      	str	r3, [sp, #0]
 800a210:	462a      	mov	r2, r5
 800a212:	4b16      	ldr	r3, [pc, #88]	; (800a26c <_vfiprintf_r+0x258>)
 800a214:	a904      	add	r1, sp, #16
 800a216:	4630      	mov	r0, r6
 800a218:	f7fd fe10 	bl	8007e3c <_printf_float>
 800a21c:	4607      	mov	r7, r0
 800a21e:	1c78      	adds	r0, r7, #1
 800a220:	d1d6      	bne.n	800a1d0 <_vfiprintf_r+0x1bc>
 800a222:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a224:	07d9      	lsls	r1, r3, #31
 800a226:	d405      	bmi.n	800a234 <_vfiprintf_r+0x220>
 800a228:	89ab      	ldrh	r3, [r5, #12]
 800a22a:	059a      	lsls	r2, r3, #22
 800a22c:	d402      	bmi.n	800a234 <_vfiprintf_r+0x220>
 800a22e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a230:	f000 faaf 	bl	800a792 <__retarget_lock_release_recursive>
 800a234:	89ab      	ldrh	r3, [r5, #12]
 800a236:	065b      	lsls	r3, r3, #25
 800a238:	f53f af12 	bmi.w	800a060 <_vfiprintf_r+0x4c>
 800a23c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a23e:	e711      	b.n	800a064 <_vfiprintf_r+0x50>
 800a240:	ab03      	add	r3, sp, #12
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	462a      	mov	r2, r5
 800a246:	4b09      	ldr	r3, [pc, #36]	; (800a26c <_vfiprintf_r+0x258>)
 800a248:	a904      	add	r1, sp, #16
 800a24a:	4630      	mov	r0, r6
 800a24c:	f7fe f89a 	bl	8008384 <_printf_i>
 800a250:	e7e4      	b.n	800a21c <_vfiprintf_r+0x208>
 800a252:	bf00      	nop
 800a254:	0800aea4 	.word	0x0800aea4
 800a258:	0800aec4 	.word	0x0800aec4
 800a25c:	0800ae84 	.word	0x0800ae84
 800a260:	0800ad2c 	.word	0x0800ad2c
 800a264:	0800ad36 	.word	0x0800ad36
 800a268:	08007e3d 	.word	0x08007e3d
 800a26c:	08009fef 	.word	0x08009fef
 800a270:	0800ad32 	.word	0x0800ad32

0800a274 <__swbuf_r>:
 800a274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a276:	460e      	mov	r6, r1
 800a278:	4614      	mov	r4, r2
 800a27a:	4605      	mov	r5, r0
 800a27c:	b118      	cbz	r0, 800a286 <__swbuf_r+0x12>
 800a27e:	6983      	ldr	r3, [r0, #24]
 800a280:	b90b      	cbnz	r3, 800a286 <__swbuf_r+0x12>
 800a282:	f000 f9e7 	bl	800a654 <__sinit>
 800a286:	4b21      	ldr	r3, [pc, #132]	; (800a30c <__swbuf_r+0x98>)
 800a288:	429c      	cmp	r4, r3
 800a28a:	d12b      	bne.n	800a2e4 <__swbuf_r+0x70>
 800a28c:	686c      	ldr	r4, [r5, #4]
 800a28e:	69a3      	ldr	r3, [r4, #24]
 800a290:	60a3      	str	r3, [r4, #8]
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	071a      	lsls	r2, r3, #28
 800a296:	d52f      	bpl.n	800a2f8 <__swbuf_r+0x84>
 800a298:	6923      	ldr	r3, [r4, #16]
 800a29a:	b36b      	cbz	r3, 800a2f8 <__swbuf_r+0x84>
 800a29c:	6923      	ldr	r3, [r4, #16]
 800a29e:	6820      	ldr	r0, [r4, #0]
 800a2a0:	1ac0      	subs	r0, r0, r3
 800a2a2:	6963      	ldr	r3, [r4, #20]
 800a2a4:	b2f6      	uxtb	r6, r6
 800a2a6:	4283      	cmp	r3, r0
 800a2a8:	4637      	mov	r7, r6
 800a2aa:	dc04      	bgt.n	800a2b6 <__swbuf_r+0x42>
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f000 f93c 	bl	800a52c <_fflush_r>
 800a2b4:	bb30      	cbnz	r0, 800a304 <__swbuf_r+0x90>
 800a2b6:	68a3      	ldr	r3, [r4, #8]
 800a2b8:	3b01      	subs	r3, #1
 800a2ba:	60a3      	str	r3, [r4, #8]
 800a2bc:	6823      	ldr	r3, [r4, #0]
 800a2be:	1c5a      	adds	r2, r3, #1
 800a2c0:	6022      	str	r2, [r4, #0]
 800a2c2:	701e      	strb	r6, [r3, #0]
 800a2c4:	6963      	ldr	r3, [r4, #20]
 800a2c6:	3001      	adds	r0, #1
 800a2c8:	4283      	cmp	r3, r0
 800a2ca:	d004      	beq.n	800a2d6 <__swbuf_r+0x62>
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	07db      	lsls	r3, r3, #31
 800a2d0:	d506      	bpl.n	800a2e0 <__swbuf_r+0x6c>
 800a2d2:	2e0a      	cmp	r6, #10
 800a2d4:	d104      	bne.n	800a2e0 <__swbuf_r+0x6c>
 800a2d6:	4621      	mov	r1, r4
 800a2d8:	4628      	mov	r0, r5
 800a2da:	f000 f927 	bl	800a52c <_fflush_r>
 800a2de:	b988      	cbnz	r0, 800a304 <__swbuf_r+0x90>
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2e4:	4b0a      	ldr	r3, [pc, #40]	; (800a310 <__swbuf_r+0x9c>)
 800a2e6:	429c      	cmp	r4, r3
 800a2e8:	d101      	bne.n	800a2ee <__swbuf_r+0x7a>
 800a2ea:	68ac      	ldr	r4, [r5, #8]
 800a2ec:	e7cf      	b.n	800a28e <__swbuf_r+0x1a>
 800a2ee:	4b09      	ldr	r3, [pc, #36]	; (800a314 <__swbuf_r+0xa0>)
 800a2f0:	429c      	cmp	r4, r3
 800a2f2:	bf08      	it	eq
 800a2f4:	68ec      	ldreq	r4, [r5, #12]
 800a2f6:	e7ca      	b.n	800a28e <__swbuf_r+0x1a>
 800a2f8:	4621      	mov	r1, r4
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f000 f81a 	bl	800a334 <__swsetup_r>
 800a300:	2800      	cmp	r0, #0
 800a302:	d0cb      	beq.n	800a29c <__swbuf_r+0x28>
 800a304:	f04f 37ff 	mov.w	r7, #4294967295
 800a308:	e7ea      	b.n	800a2e0 <__swbuf_r+0x6c>
 800a30a:	bf00      	nop
 800a30c:	0800aea4 	.word	0x0800aea4
 800a310:	0800aec4 	.word	0x0800aec4
 800a314:	0800ae84 	.word	0x0800ae84

0800a318 <__ascii_wctomb>:
 800a318:	b149      	cbz	r1, 800a32e <__ascii_wctomb+0x16>
 800a31a:	2aff      	cmp	r2, #255	; 0xff
 800a31c:	bf85      	ittet	hi
 800a31e:	238a      	movhi	r3, #138	; 0x8a
 800a320:	6003      	strhi	r3, [r0, #0]
 800a322:	700a      	strbls	r2, [r1, #0]
 800a324:	f04f 30ff 	movhi.w	r0, #4294967295
 800a328:	bf98      	it	ls
 800a32a:	2001      	movls	r0, #1
 800a32c:	4770      	bx	lr
 800a32e:	4608      	mov	r0, r1
 800a330:	4770      	bx	lr
	...

0800a334 <__swsetup_r>:
 800a334:	4b32      	ldr	r3, [pc, #200]	; (800a400 <__swsetup_r+0xcc>)
 800a336:	b570      	push	{r4, r5, r6, lr}
 800a338:	681d      	ldr	r5, [r3, #0]
 800a33a:	4606      	mov	r6, r0
 800a33c:	460c      	mov	r4, r1
 800a33e:	b125      	cbz	r5, 800a34a <__swsetup_r+0x16>
 800a340:	69ab      	ldr	r3, [r5, #24]
 800a342:	b913      	cbnz	r3, 800a34a <__swsetup_r+0x16>
 800a344:	4628      	mov	r0, r5
 800a346:	f000 f985 	bl	800a654 <__sinit>
 800a34a:	4b2e      	ldr	r3, [pc, #184]	; (800a404 <__swsetup_r+0xd0>)
 800a34c:	429c      	cmp	r4, r3
 800a34e:	d10f      	bne.n	800a370 <__swsetup_r+0x3c>
 800a350:	686c      	ldr	r4, [r5, #4]
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a358:	0719      	lsls	r1, r3, #28
 800a35a:	d42c      	bmi.n	800a3b6 <__swsetup_r+0x82>
 800a35c:	06dd      	lsls	r5, r3, #27
 800a35e:	d411      	bmi.n	800a384 <__swsetup_r+0x50>
 800a360:	2309      	movs	r3, #9
 800a362:	6033      	str	r3, [r6, #0]
 800a364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a368:	81a3      	strh	r3, [r4, #12]
 800a36a:	f04f 30ff 	mov.w	r0, #4294967295
 800a36e:	e03e      	b.n	800a3ee <__swsetup_r+0xba>
 800a370:	4b25      	ldr	r3, [pc, #148]	; (800a408 <__swsetup_r+0xd4>)
 800a372:	429c      	cmp	r4, r3
 800a374:	d101      	bne.n	800a37a <__swsetup_r+0x46>
 800a376:	68ac      	ldr	r4, [r5, #8]
 800a378:	e7eb      	b.n	800a352 <__swsetup_r+0x1e>
 800a37a:	4b24      	ldr	r3, [pc, #144]	; (800a40c <__swsetup_r+0xd8>)
 800a37c:	429c      	cmp	r4, r3
 800a37e:	bf08      	it	eq
 800a380:	68ec      	ldreq	r4, [r5, #12]
 800a382:	e7e6      	b.n	800a352 <__swsetup_r+0x1e>
 800a384:	0758      	lsls	r0, r3, #29
 800a386:	d512      	bpl.n	800a3ae <__swsetup_r+0x7a>
 800a388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a38a:	b141      	cbz	r1, 800a39e <__swsetup_r+0x6a>
 800a38c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a390:	4299      	cmp	r1, r3
 800a392:	d002      	beq.n	800a39a <__swsetup_r+0x66>
 800a394:	4630      	mov	r0, r6
 800a396:	f7ff fb6f 	bl	8009a78 <_free_r>
 800a39a:	2300      	movs	r3, #0
 800a39c:	6363      	str	r3, [r4, #52]	; 0x34
 800a39e:	89a3      	ldrh	r3, [r4, #12]
 800a3a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a3a4:	81a3      	strh	r3, [r4, #12]
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	6063      	str	r3, [r4, #4]
 800a3aa:	6923      	ldr	r3, [r4, #16]
 800a3ac:	6023      	str	r3, [r4, #0]
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	f043 0308 	orr.w	r3, r3, #8
 800a3b4:	81a3      	strh	r3, [r4, #12]
 800a3b6:	6923      	ldr	r3, [r4, #16]
 800a3b8:	b94b      	cbnz	r3, 800a3ce <__swsetup_r+0x9a>
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a3c4:	d003      	beq.n	800a3ce <__swsetup_r+0x9a>
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	4630      	mov	r0, r6
 800a3ca:	f000 fa07 	bl	800a7dc <__smakebuf_r>
 800a3ce:	89a0      	ldrh	r0, [r4, #12]
 800a3d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3d4:	f010 0301 	ands.w	r3, r0, #1
 800a3d8:	d00a      	beq.n	800a3f0 <__swsetup_r+0xbc>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60a3      	str	r3, [r4, #8]
 800a3de:	6963      	ldr	r3, [r4, #20]
 800a3e0:	425b      	negs	r3, r3
 800a3e2:	61a3      	str	r3, [r4, #24]
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	b943      	cbnz	r3, 800a3fa <__swsetup_r+0xc6>
 800a3e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a3ec:	d1ba      	bne.n	800a364 <__swsetup_r+0x30>
 800a3ee:	bd70      	pop	{r4, r5, r6, pc}
 800a3f0:	0781      	lsls	r1, r0, #30
 800a3f2:	bf58      	it	pl
 800a3f4:	6963      	ldrpl	r3, [r4, #20]
 800a3f6:	60a3      	str	r3, [r4, #8]
 800a3f8:	e7f4      	b.n	800a3e4 <__swsetup_r+0xb0>
 800a3fa:	2000      	movs	r0, #0
 800a3fc:	e7f7      	b.n	800a3ee <__swsetup_r+0xba>
 800a3fe:	bf00      	nop
 800a400:	20000020 	.word	0x20000020
 800a404:	0800aea4 	.word	0x0800aea4
 800a408:	0800aec4 	.word	0x0800aec4
 800a40c:	0800ae84 	.word	0x0800ae84

0800a410 <abort>:
 800a410:	b508      	push	{r3, lr}
 800a412:	2006      	movs	r0, #6
 800a414:	f000 fa52 	bl	800a8bc <raise>
 800a418:	2001      	movs	r0, #1
 800a41a:	f7f7 fcd9 	bl	8001dd0 <_exit>
	...

0800a420 <__sflush_r>:
 800a420:	898a      	ldrh	r2, [r1, #12]
 800a422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a426:	4605      	mov	r5, r0
 800a428:	0710      	lsls	r0, r2, #28
 800a42a:	460c      	mov	r4, r1
 800a42c:	d458      	bmi.n	800a4e0 <__sflush_r+0xc0>
 800a42e:	684b      	ldr	r3, [r1, #4]
 800a430:	2b00      	cmp	r3, #0
 800a432:	dc05      	bgt.n	800a440 <__sflush_r+0x20>
 800a434:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a436:	2b00      	cmp	r3, #0
 800a438:	dc02      	bgt.n	800a440 <__sflush_r+0x20>
 800a43a:	2000      	movs	r0, #0
 800a43c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a440:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a442:	2e00      	cmp	r6, #0
 800a444:	d0f9      	beq.n	800a43a <__sflush_r+0x1a>
 800a446:	2300      	movs	r3, #0
 800a448:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a44c:	682f      	ldr	r7, [r5, #0]
 800a44e:	602b      	str	r3, [r5, #0]
 800a450:	d032      	beq.n	800a4b8 <__sflush_r+0x98>
 800a452:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a454:	89a3      	ldrh	r3, [r4, #12]
 800a456:	075a      	lsls	r2, r3, #29
 800a458:	d505      	bpl.n	800a466 <__sflush_r+0x46>
 800a45a:	6863      	ldr	r3, [r4, #4]
 800a45c:	1ac0      	subs	r0, r0, r3
 800a45e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a460:	b10b      	cbz	r3, 800a466 <__sflush_r+0x46>
 800a462:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a464:	1ac0      	subs	r0, r0, r3
 800a466:	2300      	movs	r3, #0
 800a468:	4602      	mov	r2, r0
 800a46a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a46c:	6a21      	ldr	r1, [r4, #32]
 800a46e:	4628      	mov	r0, r5
 800a470:	47b0      	blx	r6
 800a472:	1c43      	adds	r3, r0, #1
 800a474:	89a3      	ldrh	r3, [r4, #12]
 800a476:	d106      	bne.n	800a486 <__sflush_r+0x66>
 800a478:	6829      	ldr	r1, [r5, #0]
 800a47a:	291d      	cmp	r1, #29
 800a47c:	d82c      	bhi.n	800a4d8 <__sflush_r+0xb8>
 800a47e:	4a2a      	ldr	r2, [pc, #168]	; (800a528 <__sflush_r+0x108>)
 800a480:	40ca      	lsrs	r2, r1
 800a482:	07d6      	lsls	r6, r2, #31
 800a484:	d528      	bpl.n	800a4d8 <__sflush_r+0xb8>
 800a486:	2200      	movs	r2, #0
 800a488:	6062      	str	r2, [r4, #4]
 800a48a:	04d9      	lsls	r1, r3, #19
 800a48c:	6922      	ldr	r2, [r4, #16]
 800a48e:	6022      	str	r2, [r4, #0]
 800a490:	d504      	bpl.n	800a49c <__sflush_r+0x7c>
 800a492:	1c42      	adds	r2, r0, #1
 800a494:	d101      	bne.n	800a49a <__sflush_r+0x7a>
 800a496:	682b      	ldr	r3, [r5, #0]
 800a498:	b903      	cbnz	r3, 800a49c <__sflush_r+0x7c>
 800a49a:	6560      	str	r0, [r4, #84]	; 0x54
 800a49c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a49e:	602f      	str	r7, [r5, #0]
 800a4a0:	2900      	cmp	r1, #0
 800a4a2:	d0ca      	beq.n	800a43a <__sflush_r+0x1a>
 800a4a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4a8:	4299      	cmp	r1, r3
 800a4aa:	d002      	beq.n	800a4b2 <__sflush_r+0x92>
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f7ff fae3 	bl	8009a78 <_free_r>
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	6360      	str	r0, [r4, #52]	; 0x34
 800a4b6:	e7c1      	b.n	800a43c <__sflush_r+0x1c>
 800a4b8:	6a21      	ldr	r1, [r4, #32]
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	4628      	mov	r0, r5
 800a4be:	47b0      	blx	r6
 800a4c0:	1c41      	adds	r1, r0, #1
 800a4c2:	d1c7      	bne.n	800a454 <__sflush_r+0x34>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d0c4      	beq.n	800a454 <__sflush_r+0x34>
 800a4ca:	2b1d      	cmp	r3, #29
 800a4cc:	d001      	beq.n	800a4d2 <__sflush_r+0xb2>
 800a4ce:	2b16      	cmp	r3, #22
 800a4d0:	d101      	bne.n	800a4d6 <__sflush_r+0xb6>
 800a4d2:	602f      	str	r7, [r5, #0]
 800a4d4:	e7b1      	b.n	800a43a <__sflush_r+0x1a>
 800a4d6:	89a3      	ldrh	r3, [r4, #12]
 800a4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	e7ad      	b.n	800a43c <__sflush_r+0x1c>
 800a4e0:	690f      	ldr	r7, [r1, #16]
 800a4e2:	2f00      	cmp	r7, #0
 800a4e4:	d0a9      	beq.n	800a43a <__sflush_r+0x1a>
 800a4e6:	0793      	lsls	r3, r2, #30
 800a4e8:	680e      	ldr	r6, [r1, #0]
 800a4ea:	bf08      	it	eq
 800a4ec:	694b      	ldreq	r3, [r1, #20]
 800a4ee:	600f      	str	r7, [r1, #0]
 800a4f0:	bf18      	it	ne
 800a4f2:	2300      	movne	r3, #0
 800a4f4:	eba6 0807 	sub.w	r8, r6, r7
 800a4f8:	608b      	str	r3, [r1, #8]
 800a4fa:	f1b8 0f00 	cmp.w	r8, #0
 800a4fe:	dd9c      	ble.n	800a43a <__sflush_r+0x1a>
 800a500:	6a21      	ldr	r1, [r4, #32]
 800a502:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a504:	4643      	mov	r3, r8
 800a506:	463a      	mov	r2, r7
 800a508:	4628      	mov	r0, r5
 800a50a:	47b0      	blx	r6
 800a50c:	2800      	cmp	r0, #0
 800a50e:	dc06      	bgt.n	800a51e <__sflush_r+0xfe>
 800a510:	89a3      	ldrh	r3, [r4, #12]
 800a512:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a516:	81a3      	strh	r3, [r4, #12]
 800a518:	f04f 30ff 	mov.w	r0, #4294967295
 800a51c:	e78e      	b.n	800a43c <__sflush_r+0x1c>
 800a51e:	4407      	add	r7, r0
 800a520:	eba8 0800 	sub.w	r8, r8, r0
 800a524:	e7e9      	b.n	800a4fa <__sflush_r+0xda>
 800a526:	bf00      	nop
 800a528:	20400001 	.word	0x20400001

0800a52c <_fflush_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	690b      	ldr	r3, [r1, #16]
 800a530:	4605      	mov	r5, r0
 800a532:	460c      	mov	r4, r1
 800a534:	b913      	cbnz	r3, 800a53c <_fflush_r+0x10>
 800a536:	2500      	movs	r5, #0
 800a538:	4628      	mov	r0, r5
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	b118      	cbz	r0, 800a546 <_fflush_r+0x1a>
 800a53e:	6983      	ldr	r3, [r0, #24]
 800a540:	b90b      	cbnz	r3, 800a546 <_fflush_r+0x1a>
 800a542:	f000 f887 	bl	800a654 <__sinit>
 800a546:	4b14      	ldr	r3, [pc, #80]	; (800a598 <_fflush_r+0x6c>)
 800a548:	429c      	cmp	r4, r3
 800a54a:	d11b      	bne.n	800a584 <_fflush_r+0x58>
 800a54c:	686c      	ldr	r4, [r5, #4]
 800a54e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d0ef      	beq.n	800a536 <_fflush_r+0xa>
 800a556:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a558:	07d0      	lsls	r0, r2, #31
 800a55a:	d404      	bmi.n	800a566 <_fflush_r+0x3a>
 800a55c:	0599      	lsls	r1, r3, #22
 800a55e:	d402      	bmi.n	800a566 <_fflush_r+0x3a>
 800a560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a562:	f000 f915 	bl	800a790 <__retarget_lock_acquire_recursive>
 800a566:	4628      	mov	r0, r5
 800a568:	4621      	mov	r1, r4
 800a56a:	f7ff ff59 	bl	800a420 <__sflush_r>
 800a56e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a570:	07da      	lsls	r2, r3, #31
 800a572:	4605      	mov	r5, r0
 800a574:	d4e0      	bmi.n	800a538 <_fflush_r+0xc>
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	059b      	lsls	r3, r3, #22
 800a57a:	d4dd      	bmi.n	800a538 <_fflush_r+0xc>
 800a57c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a57e:	f000 f908 	bl	800a792 <__retarget_lock_release_recursive>
 800a582:	e7d9      	b.n	800a538 <_fflush_r+0xc>
 800a584:	4b05      	ldr	r3, [pc, #20]	; (800a59c <_fflush_r+0x70>)
 800a586:	429c      	cmp	r4, r3
 800a588:	d101      	bne.n	800a58e <_fflush_r+0x62>
 800a58a:	68ac      	ldr	r4, [r5, #8]
 800a58c:	e7df      	b.n	800a54e <_fflush_r+0x22>
 800a58e:	4b04      	ldr	r3, [pc, #16]	; (800a5a0 <_fflush_r+0x74>)
 800a590:	429c      	cmp	r4, r3
 800a592:	bf08      	it	eq
 800a594:	68ec      	ldreq	r4, [r5, #12]
 800a596:	e7da      	b.n	800a54e <_fflush_r+0x22>
 800a598:	0800aea4 	.word	0x0800aea4
 800a59c:	0800aec4 	.word	0x0800aec4
 800a5a0:	0800ae84 	.word	0x0800ae84

0800a5a4 <std>:
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	b510      	push	{r4, lr}
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a5b2:	6083      	str	r3, [r0, #8]
 800a5b4:	8181      	strh	r1, [r0, #12]
 800a5b6:	6643      	str	r3, [r0, #100]	; 0x64
 800a5b8:	81c2      	strh	r2, [r0, #14]
 800a5ba:	6183      	str	r3, [r0, #24]
 800a5bc:	4619      	mov	r1, r3
 800a5be:	2208      	movs	r2, #8
 800a5c0:	305c      	adds	r0, #92	; 0x5c
 800a5c2:	f7fd fb93 	bl	8007cec <memset>
 800a5c6:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <std+0x38>)
 800a5c8:	6263      	str	r3, [r4, #36]	; 0x24
 800a5ca:	4b05      	ldr	r3, [pc, #20]	; (800a5e0 <std+0x3c>)
 800a5cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5ce:	4b05      	ldr	r3, [pc, #20]	; (800a5e4 <std+0x40>)
 800a5d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a5d2:	4b05      	ldr	r3, [pc, #20]	; (800a5e8 <std+0x44>)
 800a5d4:	6224      	str	r4, [r4, #32]
 800a5d6:	6323      	str	r3, [r4, #48]	; 0x30
 800a5d8:	bd10      	pop	{r4, pc}
 800a5da:	bf00      	nop
 800a5dc:	0800a8f5 	.word	0x0800a8f5
 800a5e0:	0800a917 	.word	0x0800a917
 800a5e4:	0800a94f 	.word	0x0800a94f
 800a5e8:	0800a973 	.word	0x0800a973

0800a5ec <_cleanup_r>:
 800a5ec:	4901      	ldr	r1, [pc, #4]	; (800a5f4 <_cleanup_r+0x8>)
 800a5ee:	f000 b8af 	b.w	800a750 <_fwalk_reent>
 800a5f2:	bf00      	nop
 800a5f4:	0800a52d 	.word	0x0800a52d

0800a5f8 <__sfmoreglue>:
 800a5f8:	b570      	push	{r4, r5, r6, lr}
 800a5fa:	1e4a      	subs	r2, r1, #1
 800a5fc:	2568      	movs	r5, #104	; 0x68
 800a5fe:	4355      	muls	r5, r2
 800a600:	460e      	mov	r6, r1
 800a602:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a606:	f7ff fa87 	bl	8009b18 <_malloc_r>
 800a60a:	4604      	mov	r4, r0
 800a60c:	b140      	cbz	r0, 800a620 <__sfmoreglue+0x28>
 800a60e:	2100      	movs	r1, #0
 800a610:	e9c0 1600 	strd	r1, r6, [r0]
 800a614:	300c      	adds	r0, #12
 800a616:	60a0      	str	r0, [r4, #8]
 800a618:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a61c:	f7fd fb66 	bl	8007cec <memset>
 800a620:	4620      	mov	r0, r4
 800a622:	bd70      	pop	{r4, r5, r6, pc}

0800a624 <__sfp_lock_acquire>:
 800a624:	4801      	ldr	r0, [pc, #4]	; (800a62c <__sfp_lock_acquire+0x8>)
 800a626:	f000 b8b3 	b.w	800a790 <__retarget_lock_acquire_recursive>
 800a62a:	bf00      	nop
 800a62c:	2000092c 	.word	0x2000092c

0800a630 <__sfp_lock_release>:
 800a630:	4801      	ldr	r0, [pc, #4]	; (800a638 <__sfp_lock_release+0x8>)
 800a632:	f000 b8ae 	b.w	800a792 <__retarget_lock_release_recursive>
 800a636:	bf00      	nop
 800a638:	2000092c 	.word	0x2000092c

0800a63c <__sinit_lock_acquire>:
 800a63c:	4801      	ldr	r0, [pc, #4]	; (800a644 <__sinit_lock_acquire+0x8>)
 800a63e:	f000 b8a7 	b.w	800a790 <__retarget_lock_acquire_recursive>
 800a642:	bf00      	nop
 800a644:	20000927 	.word	0x20000927

0800a648 <__sinit_lock_release>:
 800a648:	4801      	ldr	r0, [pc, #4]	; (800a650 <__sinit_lock_release+0x8>)
 800a64a:	f000 b8a2 	b.w	800a792 <__retarget_lock_release_recursive>
 800a64e:	bf00      	nop
 800a650:	20000927 	.word	0x20000927

0800a654 <__sinit>:
 800a654:	b510      	push	{r4, lr}
 800a656:	4604      	mov	r4, r0
 800a658:	f7ff fff0 	bl	800a63c <__sinit_lock_acquire>
 800a65c:	69a3      	ldr	r3, [r4, #24]
 800a65e:	b11b      	cbz	r3, 800a668 <__sinit+0x14>
 800a660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a664:	f7ff bff0 	b.w	800a648 <__sinit_lock_release>
 800a668:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a66c:	6523      	str	r3, [r4, #80]	; 0x50
 800a66e:	4b13      	ldr	r3, [pc, #76]	; (800a6bc <__sinit+0x68>)
 800a670:	4a13      	ldr	r2, [pc, #76]	; (800a6c0 <__sinit+0x6c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	62a2      	str	r2, [r4, #40]	; 0x28
 800a676:	42a3      	cmp	r3, r4
 800a678:	bf04      	itt	eq
 800a67a:	2301      	moveq	r3, #1
 800a67c:	61a3      	streq	r3, [r4, #24]
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 f820 	bl	800a6c4 <__sfp>
 800a684:	6060      	str	r0, [r4, #4]
 800a686:	4620      	mov	r0, r4
 800a688:	f000 f81c 	bl	800a6c4 <__sfp>
 800a68c:	60a0      	str	r0, [r4, #8]
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 f818 	bl	800a6c4 <__sfp>
 800a694:	2200      	movs	r2, #0
 800a696:	60e0      	str	r0, [r4, #12]
 800a698:	2104      	movs	r1, #4
 800a69a:	6860      	ldr	r0, [r4, #4]
 800a69c:	f7ff ff82 	bl	800a5a4 <std>
 800a6a0:	68a0      	ldr	r0, [r4, #8]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	2109      	movs	r1, #9
 800a6a6:	f7ff ff7d 	bl	800a5a4 <std>
 800a6aa:	68e0      	ldr	r0, [r4, #12]
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	2112      	movs	r1, #18
 800a6b0:	f7ff ff78 	bl	800a5a4 <std>
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	61a3      	str	r3, [r4, #24]
 800a6b8:	e7d2      	b.n	800a660 <__sinit+0xc>
 800a6ba:	bf00      	nop
 800a6bc:	0800ab04 	.word	0x0800ab04
 800a6c0:	0800a5ed 	.word	0x0800a5ed

0800a6c4 <__sfp>:
 800a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c6:	4607      	mov	r7, r0
 800a6c8:	f7ff ffac 	bl	800a624 <__sfp_lock_acquire>
 800a6cc:	4b1e      	ldr	r3, [pc, #120]	; (800a748 <__sfp+0x84>)
 800a6ce:	681e      	ldr	r6, [r3, #0]
 800a6d0:	69b3      	ldr	r3, [r6, #24]
 800a6d2:	b913      	cbnz	r3, 800a6da <__sfp+0x16>
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	f7ff ffbd 	bl	800a654 <__sinit>
 800a6da:	3648      	adds	r6, #72	; 0x48
 800a6dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	d503      	bpl.n	800a6ec <__sfp+0x28>
 800a6e4:	6833      	ldr	r3, [r6, #0]
 800a6e6:	b30b      	cbz	r3, 800a72c <__sfp+0x68>
 800a6e8:	6836      	ldr	r6, [r6, #0]
 800a6ea:	e7f7      	b.n	800a6dc <__sfp+0x18>
 800a6ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a6f0:	b9d5      	cbnz	r5, 800a728 <__sfp+0x64>
 800a6f2:	4b16      	ldr	r3, [pc, #88]	; (800a74c <__sfp+0x88>)
 800a6f4:	60e3      	str	r3, [r4, #12]
 800a6f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a6fa:	6665      	str	r5, [r4, #100]	; 0x64
 800a6fc:	f000 f847 	bl	800a78e <__retarget_lock_init_recursive>
 800a700:	f7ff ff96 	bl	800a630 <__sfp_lock_release>
 800a704:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a708:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a70c:	6025      	str	r5, [r4, #0]
 800a70e:	61a5      	str	r5, [r4, #24]
 800a710:	2208      	movs	r2, #8
 800a712:	4629      	mov	r1, r5
 800a714:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a718:	f7fd fae8 	bl	8007cec <memset>
 800a71c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a720:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a724:	4620      	mov	r0, r4
 800a726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a728:	3468      	adds	r4, #104	; 0x68
 800a72a:	e7d9      	b.n	800a6e0 <__sfp+0x1c>
 800a72c:	2104      	movs	r1, #4
 800a72e:	4638      	mov	r0, r7
 800a730:	f7ff ff62 	bl	800a5f8 <__sfmoreglue>
 800a734:	4604      	mov	r4, r0
 800a736:	6030      	str	r0, [r6, #0]
 800a738:	2800      	cmp	r0, #0
 800a73a:	d1d5      	bne.n	800a6e8 <__sfp+0x24>
 800a73c:	f7ff ff78 	bl	800a630 <__sfp_lock_release>
 800a740:	230c      	movs	r3, #12
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	e7ee      	b.n	800a724 <__sfp+0x60>
 800a746:	bf00      	nop
 800a748:	0800ab04 	.word	0x0800ab04
 800a74c:	ffff0001 	.word	0xffff0001

0800a750 <_fwalk_reent>:
 800a750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a754:	4606      	mov	r6, r0
 800a756:	4688      	mov	r8, r1
 800a758:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a75c:	2700      	movs	r7, #0
 800a75e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a762:	f1b9 0901 	subs.w	r9, r9, #1
 800a766:	d505      	bpl.n	800a774 <_fwalk_reent+0x24>
 800a768:	6824      	ldr	r4, [r4, #0]
 800a76a:	2c00      	cmp	r4, #0
 800a76c:	d1f7      	bne.n	800a75e <_fwalk_reent+0xe>
 800a76e:	4638      	mov	r0, r7
 800a770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a774:	89ab      	ldrh	r3, [r5, #12]
 800a776:	2b01      	cmp	r3, #1
 800a778:	d907      	bls.n	800a78a <_fwalk_reent+0x3a>
 800a77a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a77e:	3301      	adds	r3, #1
 800a780:	d003      	beq.n	800a78a <_fwalk_reent+0x3a>
 800a782:	4629      	mov	r1, r5
 800a784:	4630      	mov	r0, r6
 800a786:	47c0      	blx	r8
 800a788:	4307      	orrs	r7, r0
 800a78a:	3568      	adds	r5, #104	; 0x68
 800a78c:	e7e9      	b.n	800a762 <_fwalk_reent+0x12>

0800a78e <__retarget_lock_init_recursive>:
 800a78e:	4770      	bx	lr

0800a790 <__retarget_lock_acquire_recursive>:
 800a790:	4770      	bx	lr

0800a792 <__retarget_lock_release_recursive>:
 800a792:	4770      	bx	lr

0800a794 <__swhatbuf_r>:
 800a794:	b570      	push	{r4, r5, r6, lr}
 800a796:	460e      	mov	r6, r1
 800a798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79c:	2900      	cmp	r1, #0
 800a79e:	b096      	sub	sp, #88	; 0x58
 800a7a0:	4614      	mov	r4, r2
 800a7a2:	461d      	mov	r5, r3
 800a7a4:	da07      	bge.n	800a7b6 <__swhatbuf_r+0x22>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	602b      	str	r3, [r5, #0]
 800a7aa:	89b3      	ldrh	r3, [r6, #12]
 800a7ac:	061a      	lsls	r2, r3, #24
 800a7ae:	d410      	bmi.n	800a7d2 <__swhatbuf_r+0x3e>
 800a7b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7b4:	e00e      	b.n	800a7d4 <__swhatbuf_r+0x40>
 800a7b6:	466a      	mov	r2, sp
 800a7b8:	f000 f902 	bl	800a9c0 <_fstat_r>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	dbf2      	blt.n	800a7a6 <__swhatbuf_r+0x12>
 800a7c0:	9a01      	ldr	r2, [sp, #4]
 800a7c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7c6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7ca:	425a      	negs	r2, r3
 800a7cc:	415a      	adcs	r2, r3
 800a7ce:	602a      	str	r2, [r5, #0]
 800a7d0:	e7ee      	b.n	800a7b0 <__swhatbuf_r+0x1c>
 800a7d2:	2340      	movs	r3, #64	; 0x40
 800a7d4:	2000      	movs	r0, #0
 800a7d6:	6023      	str	r3, [r4, #0]
 800a7d8:	b016      	add	sp, #88	; 0x58
 800a7da:	bd70      	pop	{r4, r5, r6, pc}

0800a7dc <__smakebuf_r>:
 800a7dc:	898b      	ldrh	r3, [r1, #12]
 800a7de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7e0:	079d      	lsls	r5, r3, #30
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	d507      	bpl.n	800a7f8 <__smakebuf_r+0x1c>
 800a7e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7ec:	6023      	str	r3, [r4, #0]
 800a7ee:	6123      	str	r3, [r4, #16]
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	6163      	str	r3, [r4, #20]
 800a7f4:	b002      	add	sp, #8
 800a7f6:	bd70      	pop	{r4, r5, r6, pc}
 800a7f8:	ab01      	add	r3, sp, #4
 800a7fa:	466a      	mov	r2, sp
 800a7fc:	f7ff ffca 	bl	800a794 <__swhatbuf_r>
 800a800:	9900      	ldr	r1, [sp, #0]
 800a802:	4605      	mov	r5, r0
 800a804:	4630      	mov	r0, r6
 800a806:	f7ff f987 	bl	8009b18 <_malloc_r>
 800a80a:	b948      	cbnz	r0, 800a820 <__smakebuf_r+0x44>
 800a80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a810:	059a      	lsls	r2, r3, #22
 800a812:	d4ef      	bmi.n	800a7f4 <__smakebuf_r+0x18>
 800a814:	f023 0303 	bic.w	r3, r3, #3
 800a818:	f043 0302 	orr.w	r3, r3, #2
 800a81c:	81a3      	strh	r3, [r4, #12]
 800a81e:	e7e3      	b.n	800a7e8 <__smakebuf_r+0xc>
 800a820:	4b0d      	ldr	r3, [pc, #52]	; (800a858 <__smakebuf_r+0x7c>)
 800a822:	62b3      	str	r3, [r6, #40]	; 0x28
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	6020      	str	r0, [r4, #0]
 800a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82c:	81a3      	strh	r3, [r4, #12]
 800a82e:	9b00      	ldr	r3, [sp, #0]
 800a830:	6163      	str	r3, [r4, #20]
 800a832:	9b01      	ldr	r3, [sp, #4]
 800a834:	6120      	str	r0, [r4, #16]
 800a836:	b15b      	cbz	r3, 800a850 <__smakebuf_r+0x74>
 800a838:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a83c:	4630      	mov	r0, r6
 800a83e:	f000 f8d1 	bl	800a9e4 <_isatty_r>
 800a842:	b128      	cbz	r0, 800a850 <__smakebuf_r+0x74>
 800a844:	89a3      	ldrh	r3, [r4, #12]
 800a846:	f023 0303 	bic.w	r3, r3, #3
 800a84a:	f043 0301 	orr.w	r3, r3, #1
 800a84e:	81a3      	strh	r3, [r4, #12]
 800a850:	89a0      	ldrh	r0, [r4, #12]
 800a852:	4305      	orrs	r5, r0
 800a854:	81a5      	strh	r5, [r4, #12]
 800a856:	e7cd      	b.n	800a7f4 <__smakebuf_r+0x18>
 800a858:	0800a5ed 	.word	0x0800a5ed

0800a85c <_malloc_usable_size_r>:
 800a85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a860:	1f18      	subs	r0, r3, #4
 800a862:	2b00      	cmp	r3, #0
 800a864:	bfbc      	itt	lt
 800a866:	580b      	ldrlt	r3, [r1, r0]
 800a868:	18c0      	addlt	r0, r0, r3
 800a86a:	4770      	bx	lr

0800a86c <_raise_r>:
 800a86c:	291f      	cmp	r1, #31
 800a86e:	b538      	push	{r3, r4, r5, lr}
 800a870:	4604      	mov	r4, r0
 800a872:	460d      	mov	r5, r1
 800a874:	d904      	bls.n	800a880 <_raise_r+0x14>
 800a876:	2316      	movs	r3, #22
 800a878:	6003      	str	r3, [r0, #0]
 800a87a:	f04f 30ff 	mov.w	r0, #4294967295
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a882:	b112      	cbz	r2, 800a88a <_raise_r+0x1e>
 800a884:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a888:	b94b      	cbnz	r3, 800a89e <_raise_r+0x32>
 800a88a:	4620      	mov	r0, r4
 800a88c:	f000 f830 	bl	800a8f0 <_getpid_r>
 800a890:	462a      	mov	r2, r5
 800a892:	4601      	mov	r1, r0
 800a894:	4620      	mov	r0, r4
 800a896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a89a:	f000 b817 	b.w	800a8cc <_kill_r>
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d00a      	beq.n	800a8b8 <_raise_r+0x4c>
 800a8a2:	1c59      	adds	r1, r3, #1
 800a8a4:	d103      	bne.n	800a8ae <_raise_r+0x42>
 800a8a6:	2316      	movs	r3, #22
 800a8a8:	6003      	str	r3, [r0, #0]
 800a8aa:	2001      	movs	r0, #1
 800a8ac:	e7e7      	b.n	800a87e <_raise_r+0x12>
 800a8ae:	2400      	movs	r4, #0
 800a8b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8b4:	4628      	mov	r0, r5
 800a8b6:	4798      	blx	r3
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	e7e0      	b.n	800a87e <_raise_r+0x12>

0800a8bc <raise>:
 800a8bc:	4b02      	ldr	r3, [pc, #8]	; (800a8c8 <raise+0xc>)
 800a8be:	4601      	mov	r1, r0
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	f7ff bfd3 	b.w	800a86c <_raise_r>
 800a8c6:	bf00      	nop
 800a8c8:	20000020 	.word	0x20000020

0800a8cc <_kill_r>:
 800a8cc:	b538      	push	{r3, r4, r5, lr}
 800a8ce:	4d07      	ldr	r5, [pc, #28]	; (800a8ec <_kill_r+0x20>)
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	4608      	mov	r0, r1
 800a8d6:	4611      	mov	r1, r2
 800a8d8:	602b      	str	r3, [r5, #0]
 800a8da:	f7f7 fa69 	bl	8001db0 <_kill>
 800a8de:	1c43      	adds	r3, r0, #1
 800a8e0:	d102      	bne.n	800a8e8 <_kill_r+0x1c>
 800a8e2:	682b      	ldr	r3, [r5, #0]
 800a8e4:	b103      	cbz	r3, 800a8e8 <_kill_r+0x1c>
 800a8e6:	6023      	str	r3, [r4, #0]
 800a8e8:	bd38      	pop	{r3, r4, r5, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20000920 	.word	0x20000920

0800a8f0 <_getpid_r>:
 800a8f0:	f7f7 ba56 	b.w	8001da0 <_getpid>

0800a8f4 <__sread>:
 800a8f4:	b510      	push	{r4, lr}
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8fc:	f000 f894 	bl	800aa28 <_read_r>
 800a900:	2800      	cmp	r0, #0
 800a902:	bfab      	itete	ge
 800a904:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a906:	89a3      	ldrhlt	r3, [r4, #12]
 800a908:	181b      	addge	r3, r3, r0
 800a90a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a90e:	bfac      	ite	ge
 800a910:	6563      	strge	r3, [r4, #84]	; 0x54
 800a912:	81a3      	strhlt	r3, [r4, #12]
 800a914:	bd10      	pop	{r4, pc}

0800a916 <__swrite>:
 800a916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a91a:	461f      	mov	r7, r3
 800a91c:	898b      	ldrh	r3, [r1, #12]
 800a91e:	05db      	lsls	r3, r3, #23
 800a920:	4605      	mov	r5, r0
 800a922:	460c      	mov	r4, r1
 800a924:	4616      	mov	r6, r2
 800a926:	d505      	bpl.n	800a934 <__swrite+0x1e>
 800a928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a92c:	2302      	movs	r3, #2
 800a92e:	2200      	movs	r2, #0
 800a930:	f000 f868 	bl	800aa04 <_lseek_r>
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a93a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a93e:	81a3      	strh	r3, [r4, #12]
 800a940:	4632      	mov	r2, r6
 800a942:	463b      	mov	r3, r7
 800a944:	4628      	mov	r0, r5
 800a946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a94a:	f000 b817 	b.w	800a97c <_write_r>

0800a94e <__sseek>:
 800a94e:	b510      	push	{r4, lr}
 800a950:	460c      	mov	r4, r1
 800a952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a956:	f000 f855 	bl	800aa04 <_lseek_r>
 800a95a:	1c43      	adds	r3, r0, #1
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	bf15      	itete	ne
 800a960:	6560      	strne	r0, [r4, #84]	; 0x54
 800a962:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a966:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a96a:	81a3      	strheq	r3, [r4, #12]
 800a96c:	bf18      	it	ne
 800a96e:	81a3      	strhne	r3, [r4, #12]
 800a970:	bd10      	pop	{r4, pc}

0800a972 <__sclose>:
 800a972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a976:	f000 b813 	b.w	800a9a0 <_close_r>
	...

0800a97c <_write_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	4d07      	ldr	r5, [pc, #28]	; (800a99c <_write_r+0x20>)
 800a980:	4604      	mov	r4, r0
 800a982:	4608      	mov	r0, r1
 800a984:	4611      	mov	r1, r2
 800a986:	2200      	movs	r2, #0
 800a988:	602a      	str	r2, [r5, #0]
 800a98a:	461a      	mov	r2, r3
 800a98c:	f7f6 fd1b 	bl	80013c6 <_write>
 800a990:	1c43      	adds	r3, r0, #1
 800a992:	d102      	bne.n	800a99a <_write_r+0x1e>
 800a994:	682b      	ldr	r3, [r5, #0]
 800a996:	b103      	cbz	r3, 800a99a <_write_r+0x1e>
 800a998:	6023      	str	r3, [r4, #0]
 800a99a:	bd38      	pop	{r3, r4, r5, pc}
 800a99c:	20000920 	.word	0x20000920

0800a9a0 <_close_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4d06      	ldr	r5, [pc, #24]	; (800a9bc <_close_r+0x1c>)
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	602b      	str	r3, [r5, #0]
 800a9ac:	f7f7 fa37 	bl	8001e1e <_close>
 800a9b0:	1c43      	adds	r3, r0, #1
 800a9b2:	d102      	bne.n	800a9ba <_close_r+0x1a>
 800a9b4:	682b      	ldr	r3, [r5, #0]
 800a9b6:	b103      	cbz	r3, 800a9ba <_close_r+0x1a>
 800a9b8:	6023      	str	r3, [r4, #0]
 800a9ba:	bd38      	pop	{r3, r4, r5, pc}
 800a9bc:	20000920 	.word	0x20000920

0800a9c0 <_fstat_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4d07      	ldr	r5, [pc, #28]	; (800a9e0 <_fstat_r+0x20>)
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	602b      	str	r3, [r5, #0]
 800a9ce:	f7f7 fa32 	bl	8001e36 <_fstat>
 800a9d2:	1c43      	adds	r3, r0, #1
 800a9d4:	d102      	bne.n	800a9dc <_fstat_r+0x1c>
 800a9d6:	682b      	ldr	r3, [r5, #0]
 800a9d8:	b103      	cbz	r3, 800a9dc <_fstat_r+0x1c>
 800a9da:	6023      	str	r3, [r4, #0]
 800a9dc:	bd38      	pop	{r3, r4, r5, pc}
 800a9de:	bf00      	nop
 800a9e0:	20000920 	.word	0x20000920

0800a9e4 <_isatty_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4d06      	ldr	r5, [pc, #24]	; (800aa00 <_isatty_r+0x1c>)
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	602b      	str	r3, [r5, #0]
 800a9f0:	f7f7 fa31 	bl	8001e56 <_isatty>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d102      	bne.n	800a9fe <_isatty_r+0x1a>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	b103      	cbz	r3, 800a9fe <_isatty_r+0x1a>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	20000920 	.word	0x20000920

0800aa04 <_lseek_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d07      	ldr	r5, [pc, #28]	; (800aa24 <_lseek_r+0x20>)
 800aa08:	4604      	mov	r4, r0
 800aa0a:	4608      	mov	r0, r1
 800aa0c:	4611      	mov	r1, r2
 800aa0e:	2200      	movs	r2, #0
 800aa10:	602a      	str	r2, [r5, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	f7f7 fa2a 	bl	8001e6c <_lseek>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	d102      	bne.n	800aa22 <_lseek_r+0x1e>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	b103      	cbz	r3, 800aa22 <_lseek_r+0x1e>
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	bd38      	pop	{r3, r4, r5, pc}
 800aa24:	20000920 	.word	0x20000920

0800aa28 <_read_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4d07      	ldr	r5, [pc, #28]	; (800aa48 <_read_r+0x20>)
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	4608      	mov	r0, r1
 800aa30:	4611      	mov	r1, r2
 800aa32:	2200      	movs	r2, #0
 800aa34:	602a      	str	r2, [r5, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	f7f7 f9d4 	bl	8001de4 <_read>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_read_r+0x1e>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_read_r+0x1e>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	20000920 	.word	0x20000920

0800aa4c <_init>:
 800aa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4e:	bf00      	nop
 800aa50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa52:	bc08      	pop	{r3}
 800aa54:	469e      	mov	lr, r3
 800aa56:	4770      	bx	lr

0800aa58 <_fini>:
 800aa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5a:	bf00      	nop
 800aa5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5e:	bc08      	pop	{r3}
 800aa60:	469e      	mov	lr, r3
 800aa62:	4770      	bx	lr
